<?xml version="1.0"?><ts><start>s0</start><states><state id="s31"><transition target="s4" action="org.jfree.chart.renderer.category.LineAndShapeRenderer.equals(java.lang.Object)" proba="1.0"></transition></state><state id="s30"><transition target="s4" action="org.jfree.chart.renderer.category.LineAndShapeRenderer.equals(java.lang.Object)" proba="1.0"></transition></state><state id="s33"><transition target="s4" action="org.jfree.chart.renderer.category.LineAndShapeRenderer.equals(java.lang.Object)" proba="1.0"></transition></state><state id="s32"><transition target="s4" action="org.jfree.chart.renderer.category.LineAndShapeRenderer.equals(java.lang.Object)" proba="1.0"></transition></state><state id="s35"><transition target="s4" action="org.jfree.chart.renderer.category.LineAndShapeRenderer.equals(java.lang.Object)" proba="1.0"></transition></state><state id="s34"><transition target="s4" action="org.jfree.chart.renderer.category.LineAndShapeRenderer.equals(java.lang.Object)" proba="1.0"></transition></state><state id="s37"><transition target="s4" action="org.jfree.chart.renderer.category.LineAndShapeRenderer.equals(java.lang.Object)" proba="1.0"></transition></state><state id="s36"><transition target="s4" action="org.jfree.chart.renderer.category.LineAndShapeRenderer.equals(java.lang.Object)" proba="1.0"></transition></state><state id="s39"><transition target="s4" action="org.jfree.chart.renderer.category.LineAndShapeRenderer.equals(java.lang.Object)" proba="1.0"></transition></state><state id="s38"><transition target="s4" action="org.jfree.chart.renderer.category.LineAndShapeRenderer.equals(java.lang.Object)" proba="1.0"></transition></state><state id="s0"><transition target="s4" action="org.jfree.chart.renderer.category.LineAndShapeRenderer.equals(java.lang.Object)" proba="0.03571428571428571"></transition><transition target="s7" action="org.jfree.chart.renderer.category.LineAndShapeRenderer.getBaseLinesVisible()" proba="0.03571428571428571"></transition><transition target="s8" action="org.jfree.chart.renderer.category.LineAndShapeRenderer.setBaseLinesVisible(boolean)" proba="0.03571428571428571"></transition><transition target="s48" action="org.jfree.chart.renderer.category.LineAndShapeRenderer.&lt;init&gt;(boolean,boolean)" proba="0.03571428571428571"></transition><transition target="s1" action="org.jfree.chart.renderer.category.LineAndShapeRenderer.&lt;init&gt;()" proba="0.8571428571428571"></transition></state><state id="s1"><transition target="s4" action="org.jfree.chart.renderer.category.LineAndShapeRenderer.equals(java.lang.Object)" proba="0.125"></transition><transition target="s5" action="org.jfree.chart.renderer.category.LineAndShapeRenderer.getLegendItem(int,int)" proba="0.041666666666666664"></transition><transition target="s6" action="org.jfree.chart.renderer.category.LineAndShapeRenderer.hashCode()" proba="0.041666666666666664"></transition><transition target="s7" action="org.jfree.chart.renderer.category.LineAndShapeRenderer.getBaseLinesVisible()" proba="0.041666666666666664"></transition><transition target="sX" action="epsilon" proba="0.25"></transition><transition target="s8" action="org.jfree.chart.renderer.category.LineAndShapeRenderer.setBaseLinesVisible(boolean)" proba="0.041666666666666664"></transition><transition target="s40" action="org.jfree.chart.renderer.category.LineAndShapeRenderer.setBasePaint(java.awt.Paint)" proba="0.08333333333333333"></transition><transition target="s24" action="org.jfree.chart.renderer.category.LineAndShapeRenderer.setBaseToolTipGenerator(org.jfree.chart.labels.CategoryToolTipGenerator)" proba="0.08333333333333333"></transition><transition target="s23" action="org.jfree.chart.renderer.category.LineAndShapeRenderer.setSeriesPaint(int,java.awt.Paint)" proba="0.041666666666666664"></transition><transition target="s45" action="org.jfree.chart.renderer.category.LineAndShapeRenderer.findRangeBounds(org.jfree.data.category.CategoryDataset)" proba="0.041666666666666664"></transition><transition target="s19" action="org.jfree.chart.renderer.category.LineAndShapeRenderer.setBaseShape(java.awt.Shape)" proba="0.041666666666666664"></transition><transition target="s18" action="org.jfree.chart.renderer.category.LineAndShapeRenderer.fromString(java.lang.String)" proba="0.041666666666666664"></transition><transition target="s2" action="org.jfree.chart.renderer.category.LineAndShapeRenderer.clone()" proba="0.125"></transition></state><state id="s2"><transition target="s3" action="org.jfree.chart.renderer.category.LineAndShapeRenderer.getClass()" proba="0.3"></transition><transition target="s4" action="org.jfree.chart.renderer.category.LineAndShapeRenderer.equals(java.lang.Object)" proba="0.4"></transition><transition target="s2" action="org.jfree.chart.renderer.category.LineAndShapeRenderer.clone()" proba="0.3"></transition></state><state id="s3"><transition target="s4" action="org.jfree.chart.renderer.category.LineAndShapeRenderer.equals(java.lang.Object)" proba="1.0"></transition></state><state id="s4"><transition target="sX" action="epsilon" proba="0.059322033898305086"></transition><transition target="s31" action="org.jfree.chart.renderer.category.LineAndShapeRenderer.setSeriesShape(int,java.awt.Shape)" proba="0.00847457627118644"></transition><transition target="s30" action="org.jfree.chart.renderer.category.LineAndShapeRenderer.setSeriesOutlineStroke(int,java.awt.Stroke)" proba="0.00847457627118644"></transition><transition target="s33" action="org.jfree.chart.renderer.category.LineAndShapeRenderer.setSeriesItemLabelPaint(int,java.awt.Paint)" proba="0.00847457627118644"></transition><transition target="s10" action="org.jfree.chart.renderer.category.LineAndShapeRenderer.getBaseShapesVisible()" proba="0.06779661016949153"></transition><transition target="s32" action="org.jfree.chart.renderer.category.LineAndShapeRenderer.setSeriesItemLabelsVisible(int,java.lang.Boolean)" proba="0.00847457627118644"></transition><transition target="s13" action="org.jfree.chart.renderer.category.LineAndShapeRenderer.setSeriesShapesFilled(int,boolean)" proba="0.05084745762711865"></transition><transition target="s35" action="org.jfree.chart.renderer.category.LineAndShapeRenderer.setSeriesNegativeItemLabelPosition(int,org.jfree.chart.labels.ItemLabelPosition)" proba="0.00847457627118644"></transition><transition target="s12" action="org.jfree.chart.renderer.category.LineAndShapeRenderer.setSeriesShapesVisible(int,boolean)" proba="0.05084745762711865"></transition><transition target="s34" action="org.jfree.chart.renderer.category.LineAndShapeRenderer.setSeriesPositiveItemLabelPosition(int,org.jfree.chart.labels.ItemLabelPosition)" proba="0.00847457627118644"></transition><transition target="s15" action="org.jfree.chart.renderer.category.LineAndShapeRenderer.setUseOutlinePaint(boolean)" proba="0.025423728813559324"></transition><transition target="s37" action="org.jfree.chart.renderer.category.LineAndShapeRenderer.setLegendShape(int,java.awt.Shape)" proba="0.00847457627118644"></transition><transition target="s14" action="org.jfree.chart.renderer.category.LineAndShapeRenderer.setBaseShapesFilled(boolean)" proba="0.05084745762711865"></transition><transition target="s36" action="org.jfree.chart.renderer.category.LineAndShapeRenderer.setSeriesCreateEntities(int,java.lang.Boolean)" proba="0.00847457627118644"></transition><transition target="s17" action="org.jfree.chart.renderer.category.LineAndShapeRenderer.setItemMargin(double)" proba="0.00847457627118644"></transition><transition target="s39" action="org.jfree.chart.renderer.category.LineAndShapeRenderer.setLegendTextPaint(int,java.awt.Paint)" proba="0.00847457627118644"></transition><transition target="s16" action="org.jfree.chart.renderer.category.LineAndShapeRenderer.setUseSeriesOffset(boolean)" proba="0.025423728813559324"></transition><transition target="s38" action="org.jfree.chart.renderer.category.LineAndShapeRenderer.setLegendTextFont(int,java.awt.Font)" proba="0.00847457627118644"></transition><transition target="s18" action="org.jfree.chart.renderer.category.LineAndShapeRenderer.fromString(java.lang.String)" proba="0.00847457627118644"></transition><transition target="s4" action="org.jfree.chart.renderer.category.LineAndShapeRenderer.equals(java.lang.Object)" proba="0.3305084745762712"></transition><transition target="s6" action="org.jfree.chart.renderer.category.LineAndShapeRenderer.hashCode()" proba="0.01694915254237288"></transition><transition target="s7" action="org.jfree.chart.renderer.category.LineAndShapeRenderer.getBaseLinesVisible()" proba="0.059322033898305086"></transition><transition target="s9" action="org.jfree.chart.renderer.category.LineAndShapeRenderer.setSeriesLinesVisible(int,boolean)" proba="0.05084745762711865"></transition><transition target="s20" action="org.jfree.chart.renderer.category.LineAndShapeRenderer.setBaseLegendShape(java.awt.Shape)" proba="0.00847457627118644"></transition><transition target="s41" action="org.jfree.chart.renderer.category.LineAndShapeRenderer.hasListener(java.util.EventListener)" proba="0.00847457627118644"></transition><transition target="s22" action="org.jfree.chart.renderer.category.LineAndShapeRenderer.setBaseLegendTextPaint(java.awt.Paint)" proba="0.00847457627118644"></transition><transition target="s21" action="org.jfree.chart.renderer.category.LineAndShapeRenderer.setBaseLegendTextFont(java.awt.Font)" proba="0.00847457627118644"></transition><transition target="s46" action="org.jfree.chart.renderer.category.LineAndShapeRenderer.setPaint(int,java.awt.Paint)" proba="0.00847457627118644"></transition><transition target="s23" action="org.jfree.chart.renderer.category.LineAndShapeRenderer.setSeriesPaint(int,java.awt.Paint)" proba="0.00847457627118644"></transition><transition target="s26" action="org.jfree.chart.renderer.category.LineAndShapeRenderer.setSeriesVisibleInLegend(int,java.lang.Boolean)" proba="0.00847457627118644"></transition><transition target="s25" action="org.jfree.chart.renderer.category.LineAndShapeRenderer.setSeriesVisible(int,java.lang.Boolean)" proba="0.00847457627118644"></transition><transition target="s47" action="org.jfree.chart.renderer.category.LineAndShapeRenderer.getPaint(int)" proba="0.00847457627118644"></transition><transition target="s28" action="org.jfree.chart.renderer.category.LineAndShapeRenderer.setSeriesOutlinePaint(int,java.awt.Paint)" proba="0.00847457627118644"></transition><transition target="s27" action="org.jfree.chart.renderer.category.LineAndShapeRenderer.setSeriesFillPaint(int,java.awt.Paint)" proba="0.01694915254237288"></transition><transition target="s29" action="org.jfree.chart.renderer.category.LineAndShapeRenderer.setSeriesStroke(int,java.awt.Stroke)" proba="0.00847457627118644"></transition></state><state id="s5"><transition target="sX" action="epsilon" proba="1.0"></transition></state><state id="s6"><transition target="s6" action="org.jfree.chart.renderer.category.LineAndShapeRenderer.hashCode()" proba="0.25"></transition><transition target="sX" action="epsilon" proba="0.75"></transition></state><state id="s7"><transition target="s4" action="org.jfree.chart.renderer.category.LineAndShapeRenderer.equals(java.lang.Object)" proba="0.2222222222222222"></transition><transition target="s10" action="org.jfree.chart.renderer.category.LineAndShapeRenderer.getBaseShapesVisible()" proba="0.1111111111111111"></transition><transition target="s8" action="org.jfree.chart.renderer.category.LineAndShapeRenderer.setBaseLinesVisible(boolean)" proba="0.6666666666666666"></transition></state><state id="s8"><transition target="s4" action="org.jfree.chart.renderer.category.LineAndShapeRenderer.equals(java.lang.Object)" proba="0.75"></transition><transition target="s9" action="org.jfree.chart.renderer.category.LineAndShapeRenderer.setSeriesLinesVisible(int,boolean)" proba="0.25"></transition></state><state id="s9"><transition target="s4" action="org.jfree.chart.renderer.category.LineAndShapeRenderer.equals(java.lang.Object)" proba="0.75"></transition><transition target="s11" action="org.jfree.chart.renderer.category.LineAndShapeRenderer.setBaseShapesVisible(boolean)" proba="0.25"></transition></state><state id="s40"><transition target="s22" action="org.jfree.chart.renderer.category.LineAndShapeRenderer.setBaseLegendTextPaint(java.awt.Paint)" proba="0.5"></transition><transition target="s18" action="org.jfree.chart.renderer.category.LineAndShapeRenderer.fromString(java.lang.String)" proba="0.5"></transition></state><state id="s42"><transition target="s10" action="org.jfree.chart.renderer.category.LineAndShapeRenderer.getBaseShapesVisible()" proba="1.0"></transition></state><state id="s41"><transition target="sX" action="epsilon" proba="1.0"></transition></state><state id="s44"><transition target="sX" action="epsilon" proba="1.0"></transition></state><state id="s43"><transition target="s44" action="org.jfree.chart.renderer.category.LineAndShapeRenderer.add(java.awt.Component,java.lang.Object)" proba="1.0"></transition></state><state id="s46"><transition target="s4" action="org.jfree.chart.renderer.category.LineAndShapeRenderer.equals(java.lang.Object)" proba="1.0"></transition></state><state id="s45"><transition target="s45" action="org.jfree.chart.renderer.category.LineAndShapeRenderer.findRangeBounds(org.jfree.data.category.CategoryDataset)" proba="0.8"></transition><transition target="sX" action="epsilon" proba="0.2"></transition></state><state id="s48"><transition target="s24" action="org.jfree.chart.renderer.category.LineAndShapeRenderer.setBaseToolTipGenerator(org.jfree.chart.labels.CategoryToolTipGenerator)" proba="1.0"></transition></state><state id="s47"><transition target="s23" action="org.jfree.chart.renderer.category.LineAndShapeRenderer.setSeriesPaint(int,java.awt.Paint)" proba="1.0"></transition></state><state id="s49"><transition target="sX" action="epsilon" proba="1.0"></transition></state><state id="sX"><transition target="s0" action="epsilon" proba="1.0"></transition></state><state id="s11"><transition target="s4" action="org.jfree.chart.renderer.category.LineAndShapeRenderer.equals(java.lang.Object)" proba="0.75"></transition><transition target="s12" action="org.jfree.chart.renderer.category.LineAndShapeRenderer.setSeriesShapesVisible(int,boolean)" proba="0.25"></transition></state><state id="s10"><transition target="s42" action="org.jfree.chart.renderer.category.LineAndShapeRenderer.getPlotLines()" proba="0.1"></transition><transition target="s4" action="org.jfree.chart.renderer.category.LineAndShapeRenderer.equals(java.lang.Object)" proba="0.2"></transition><transition target="s11" action="org.jfree.chart.renderer.category.LineAndShapeRenderer.setBaseShapesVisible(boolean)" proba="0.6"></transition><transition target="s43" action="org.jfree.chart.renderer.category.LineAndShapeRenderer.setBorder(javax.swing.border.Border)" proba="0.1"></transition></state><state id="s13"><transition target="s4" action="org.jfree.chart.renderer.category.LineAndShapeRenderer.equals(java.lang.Object)" proba="0.6"></transition><transition target="s13" action="org.jfree.chart.renderer.category.LineAndShapeRenderer.setSeriesShapesFilled(int,boolean)" proba="0.2"></transition><transition target="s14" action="org.jfree.chart.renderer.category.LineAndShapeRenderer.setBaseShapesFilled(boolean)" proba="0.2"></transition></state><state id="s12"><transition target="s4" action="org.jfree.chart.renderer.category.LineAndShapeRenderer.equals(java.lang.Object)" proba="0.75"></transition><transition target="s13" action="org.jfree.chart.renderer.category.LineAndShapeRenderer.setSeriesShapesFilled(int,boolean)" proba="0.25"></transition></state><state id="s15"><transition target="s4" action="org.jfree.chart.renderer.category.LineAndShapeRenderer.equals(java.lang.Object)" proba="0.75"></transition><transition target="s16" action="org.jfree.chart.renderer.category.LineAndShapeRenderer.setUseSeriesOffset(boolean)" proba="0.25"></transition></state><state id="s14"><transition target="s4" action="org.jfree.chart.renderer.category.LineAndShapeRenderer.equals(java.lang.Object)" proba="0.6"></transition><transition target="sX" action="epsilon" proba="0.1"></transition><transition target="s15" action="org.jfree.chart.renderer.category.LineAndShapeRenderer.setUseOutlinePaint(boolean)" proba="0.1"></transition><transition target="s14" action="org.jfree.chart.renderer.category.LineAndShapeRenderer.setBaseShapesFilled(boolean)" proba="0.2"></transition></state><state id="s17"><transition target="s4" action="org.jfree.chart.renderer.category.LineAndShapeRenderer.equals(java.lang.Object)" proba="0.5"></transition><transition target="sX" action="epsilon" proba="0.5"></transition></state><state id="s16"><transition target="s4" action="org.jfree.chart.renderer.category.LineAndShapeRenderer.equals(java.lang.Object)" proba="0.5"></transition><transition target="sX" action="epsilon" proba="0.25"></transition><transition target="s17" action="org.jfree.chart.renderer.category.LineAndShapeRenderer.setItemMargin(double)" proba="0.25"></transition></state><state id="s19"><transition target="s20" action="org.jfree.chart.renderer.category.LineAndShapeRenderer.setBaseLegendShape(java.awt.Shape)" proba="0.5"></transition><transition target="s18" action="org.jfree.chart.renderer.category.LineAndShapeRenderer.fromString(java.lang.String)" proba="0.5"></transition></state><state id="s18"><transition target="s20" action="org.jfree.chart.renderer.category.LineAndShapeRenderer.setBaseLegendShape(java.awt.Shape)" proba="0.16666666666666666"></transition><transition target="s22" action="org.jfree.chart.renderer.category.LineAndShapeRenderer.setBaseLegendTextPaint(java.awt.Paint)" proba="0.3333333333333333"></transition><transition target="s21" action="org.jfree.chart.renderer.category.LineAndShapeRenderer.setBaseLegendTextFont(java.awt.Font)" proba="0.16666666666666666"></transition><transition target="s23" action="org.jfree.chart.renderer.category.LineAndShapeRenderer.setSeriesPaint(int,java.awt.Paint)" proba="0.16666666666666666"></transition><transition target="s19" action="org.jfree.chart.renderer.category.LineAndShapeRenderer.setBaseShape(java.awt.Shape)" proba="0.16666666666666666"></transition></state><state id="s20"><transition target="s4" action="org.jfree.chart.renderer.category.LineAndShapeRenderer.equals(java.lang.Object)" proba="0.3333333333333333"></transition><transition target="s21" action="org.jfree.chart.renderer.category.LineAndShapeRenderer.setBaseLegendTextFont(java.awt.Font)" proba="0.3333333333333333"></transition><transition target="s18" action="org.jfree.chart.renderer.category.LineAndShapeRenderer.fromString(java.lang.String)" proba="0.3333333333333333"></transition></state><state id="s22"><transition target="s4" action="org.jfree.chart.renderer.category.LineAndShapeRenderer.equals(java.lang.Object)" proba="0.2"></transition><transition target="s2" action="org.jfree.chart.renderer.category.LineAndShapeRenderer.clone()" proba="0.8"></transition></state><state id="s21"><transition target="s4" action="org.jfree.chart.renderer.category.LineAndShapeRenderer.equals(java.lang.Object)" proba="0.3333333333333333"></transition><transition target="s22" action="org.jfree.chart.renderer.category.LineAndShapeRenderer.setBaseLegendTextPaint(java.awt.Paint)" proba="0.3333333333333333"></transition><transition target="s18" action="org.jfree.chart.renderer.category.LineAndShapeRenderer.fromString(java.lang.String)" proba="0.3333333333333333"></transition></state><state id="s24"><transition target="sX" action="epsilon" proba="0.6666666666666666"></transition><transition target="s49" action="org.jfree.chart.renderer.category.LineAndShapeRenderer.setBaseURLGenerator(org.jfree.chart.urls.CategoryURLGenerator)" proba="0.3333333333333333"></transition></state><state id="s23"><transition target="s4" action="org.jfree.chart.renderer.category.LineAndShapeRenderer.equals(java.lang.Object)" proba="0.75"></transition><transition target="sX" action="epsilon" proba="0.25"></transition></state><state id="s26"><transition target="s4" action="org.jfree.chart.renderer.category.LineAndShapeRenderer.equals(java.lang.Object)" proba="1.0"></transition></state><state id="s25"><transition target="s4" action="org.jfree.chart.renderer.category.LineAndShapeRenderer.equals(java.lang.Object)" proba="1.0"></transition></state><state id="s28"><transition target="s4" action="org.jfree.chart.renderer.category.LineAndShapeRenderer.equals(java.lang.Object)" proba="1.0"></transition></state><state id="s27"><transition target="s4" action="org.jfree.chart.renderer.category.LineAndShapeRenderer.equals(java.lang.Object)" proba="0.5"></transition><transition target="sX" action="epsilon" proba="0.5"></transition></state><state id="s29"><transition target="s4" action="org.jfree.chart.renderer.category.LineAndShapeRenderer.equals(java.lang.Object)" proba="1.0"></transition></state></states></ts>