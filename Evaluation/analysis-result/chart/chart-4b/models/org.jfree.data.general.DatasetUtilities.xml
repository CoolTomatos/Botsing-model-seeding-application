<?xml version="1.0"?><ts><start>s0</start><states><state id="sX"><transition target="s0" action="epsilon" proba="1.0"></transition></state><state id="s11"><transition target="sX" action="epsilon" proba="1.0"></transition></state><state id="s10"><transition target="s11" action="org.jfree.data.general.DatasetUtilities.getRowKey(int)" proba="0.8"></transition><transition target="sX" action="epsilon" proba="0.2"></transition></state><state id="s13"><transition target="sX" action="epsilon" proba="1.0"></transition></state><state id="s12"><transition target="s13" action="org.jfree.data.general.DatasetUtilities.findDomainBounds(org.jfree.data.xy.XYDataset,boolean)" proba="1.0"></transition></state><state id="s15"><transition target="s10" action="org.jfree.data.general.DatasetUtilities.getRowCount()" proba="0.014184397163120567"></transition><transition target="sX" action="epsilon" proba="0.07092198581560284"></transition><transition target="s15" action="org.jfree.data.general.DatasetUtilities.addValue(double,java.lang.Comparable,java.lang.Comparable)" proba="0.8936170212765957"></transition><transition target="s25" action="org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap)" proba="0.02127659574468085"></transition></state><state id="s14"><transition target="sX" action="epsilon" proba="1.0"></transition></state><state id="s17"><transition target="s22" action="org.jfree.data.general.DatasetUtilities.calculatePieDatasetTotal(org.jfree.data.general.PieDataset)" proba="0.3333333333333333"></transition><transition target="sX" action="epsilon" proba="0.6666666666666666"></transition></state><state id="s16"><transition target="sX" action="epsilon" proba="1.0"></transition></state><state id="s19"><transition target="sX" action="epsilon" proba="1.0"></transition></state><state id="s18"><transition target="s19" action="org.jfree.data.general.DatasetUtilities.findRangeBounds(org.jfree.data.xy.XYDataset,boolean)" proba="1.0"></transition></state><state id="s0"><transition target="s3" action="org.jfree.data.general.DatasetUtilities.calculateStackTotal(org.jfree.data.xy.TableXYDataset,int)" proba="0.00909090909090909"></transition><transition target="s4" action="org.jfree.data.general.DatasetUtilities.&lt;init&gt;(java.lang.Comparable)" proba="0.15454545454545454"></transition><transition target="s6" action="org.jfree.data.general.DatasetUtilities.&lt;init&gt;()" proba="0.36363636363636365"></transition><transition target="s8" action="org.jfree.data.general.DatasetUtilities.findRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean)" proba="0.00909090909090909"></transition><transition target="s20" action="org.jfree.data.general.DatasetUtilities.isEmptyOrNull(org.jfree.data.category.CategoryDataset)" proba="0.03636363636363636"></transition><transition target="s22" action="org.jfree.data.general.DatasetUtilities.calculatePieDatasetTotal(org.jfree.data.general.PieDataset)" proba="0.02727272727272727"></transition><transition target="s21" action="org.jfree.data.general.DatasetUtilities.findRangeBounds(org.jfree.data.xy.XYDataset)" proba="0.00909090909090909"></transition><transition target="s13" action="org.jfree.data.general.DatasetUtilities.findDomainBounds(org.jfree.data.xy.XYDataset,boolean)" proba="0.03636363636363636"></transition><transition target="s12" action="org.jfree.data.general.DatasetUtilities.findDomainBounds(org.jfree.data.xy.XYDataset,java.util.List,boolean)" proba="0.00909090909090909"></transition><transition target="s26" action="org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double)" proba="0.00909090909090909"></transition><transition target="s14" action="org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(org.jfree.data.xy.TableXYDataset)" proba="0.01818181818181818"></transition><transition target="s25" action="org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap)" proba="0.00909090909090909"></transition><transition target="s17" action="org.jfree.data.general.DatasetUtilities.isEmptyOrNull(org.jfree.data.general.PieDataset)" proba="0.02727272727272727"></transition><transition target="s16" action="org.jfree.data.general.DatasetUtilities.isEmptyOrNull(org.jfree.data.xy.XYDataset)" proba="0.02727272727272727"></transition><transition target="s27" action="org.jfree.data.general.DatasetUtilities.findDomainBounds(org.jfree.data.xy.XYDataset)" proba="0.00909090909090909"></transition><transition target="s19" action="org.jfree.data.general.DatasetUtilities.findRangeBounds(org.jfree.data.xy.XYDataset,boolean)" proba="0.045454545454545456"></transition><transition target="s18" action="org.jfree.data.general.DatasetUtilities.findRangeBounds(org.jfree.data.xy.XYDataset,java.util.List,org.jfree.data.Range,boolean)" proba="0.00909090909090909"></transition><transition target="s1" action="org.jfree.data.general.DatasetUtilities.createCategoryDataset(java.lang.String,java.lang.String,java.lang.Number[][])" proba="0.17272727272727273"></transition><transition target="s2" action="org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(org.jfree.data.category.CategoryDataset)" proba="0.01818181818181818"></transition></state><state id="s1"><transition target="sX" action="epsilon" proba="1.0"></transition></state><state id="s2"><transition target="sX" action="epsilon" proba="1.0"></transition></state><state id="s3"><transition target="sX" action="epsilon" proba="1.0"></transition></state><state id="s4"><transition target="s5" action="org.jfree.data.general.DatasetUtilities.add(double,double)" proba="0.9411764705882353"></transition><transition target="s28" action="org.jfree.data.general.DatasetUtilities.mapKeyToGroup(java.lang.Comparable,java.lang.Comparable)" proba="0.058823529411764705"></transition></state><state id="s5"><transition target="s5" action="org.jfree.data.general.DatasetUtilities.add(double,double)" proba="0.9166666666666666"></transition><transition target="sX" action="epsilon" proba="0.08333333333333333"></transition></state><state id="s6"><transition target="s10" action="org.jfree.data.general.DatasetUtilities.getRowCount()" proba="0.025"></transition><transition target="s7" action="org.jfree.data.general.DatasetUtilities.add(E)" proba="0.15"></transition><transition target="sX" action="epsilon" proba="0.55"></transition><transition target="s8" action="org.jfree.data.general.DatasetUtilities.findRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean)" proba="0.025"></transition><transition target="s15" action="org.jfree.data.general.DatasetUtilities.addValue(double,java.lang.Comparable,java.lang.Comparable)" proba="0.225"></transition><transition target="s25" action="org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap)" proba="0.025"></transition></state><state id="s7"><transition target="s7" action="org.jfree.data.general.DatasetUtilities.add(E)" proba="0.4"></transition><transition target="s8" action="org.jfree.data.general.DatasetUtilities.findRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean)" proba="0.4"></transition><transition target="sX" action="epsilon" proba="0.2"></transition></state><state id="s8"><transition target="s10" action="org.jfree.data.general.DatasetUtilities.getRowCount()" proba="0.16666666666666666"></transition><transition target="s24" action="org.jfree.data.general.DatasetUtilities.findRangeBounds(org.jfree.data.category.CategoryDataset,boolean)" proba="0.16666666666666666"></transition><transition target="sX" action="epsilon" proba="0.16666666666666666"></transition><transition target="s9" action="org.jfree.data.general.DatasetUtilities.addValue(java.lang.Number,java.lang.Comparable,java.lang.Comparable)" proba="0.16666666666666666"></transition><transition target="s15" action="org.jfree.data.general.DatasetUtilities.addValue(double,java.lang.Comparable,java.lang.Comparable)" proba="0.3333333333333333"></transition></state><state id="s9"><transition target="s10" action="org.jfree.data.general.DatasetUtilities.getRowCount()" proba="0.5"></transition><transition target="s25" action="org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap)" proba="0.5"></transition></state><state id="s20"><transition target="sX" action="epsilon" proba="0.75"></transition><transition target="s23" action="org.jfree.data.general.DatasetUtilities.createConsolidatedPieDataset(org.jfree.data.general.PieDataset,java.lang.Comparable,double)" proba="0.25"></transition></state><state id="s22"><transition target="sX" action="epsilon" proba="1.0"></transition></state><state id="s21"><transition target="sX" action="epsilon" proba="1.0"></transition></state><state id="s24"><transition target="sX" action="epsilon" proba="1.0"></transition></state><state id="s23"><transition target="sX" action="epsilon" proba="1.0"></transition></state><state id="s26"><transition target="sX" action="epsilon" proba="1.0"></transition></state><state id="s25"><transition target="sX" action="epsilon" proba="0.2857142857142857"></transition><transition target="s15" action="org.jfree.data.general.DatasetUtilities.addValue(double,java.lang.Comparable,java.lang.Comparable)" proba="0.5714285714285714"></transition><transition target="s9" action="org.jfree.data.general.DatasetUtilities.addValue(java.lang.Number,java.lang.Comparable,java.lang.Comparable)" proba="0.14285714285714285"></transition></state><state id="s28"><transition target="s25" action="org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap)" proba="0.3333333333333333"></transition><transition target="s28" action="org.jfree.data.general.DatasetUtilities.mapKeyToGroup(java.lang.Comparable,java.lang.Comparable)" proba="0.6666666666666666"></transition></state><state id="s27"><transition target="s21" action="org.jfree.data.general.DatasetUtilities.findRangeBounds(org.jfree.data.xy.XYDataset)" proba="1.0"></transition></state></states></ts>