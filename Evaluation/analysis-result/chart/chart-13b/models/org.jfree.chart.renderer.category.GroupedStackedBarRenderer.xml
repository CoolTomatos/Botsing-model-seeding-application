<?xml version="1.0"?><ts><start>s0</start><states><state id="s3"><transition target="s6" action="org.jfree.chart.renderer.category.GroupedStackedBarRenderer.findRangeBounds(org.jfree.data.category.CategoryDataset)" proba="0.2"></transition><transition target="sX" action="epsilon" proba="0.2"></transition><transition target="s2" action="org.jfree.chart.renderer.category.GroupedStackedBarRenderer.equals(java.lang.Object)" proba="0.6"></transition></state><state id="s4"><transition target="s5" action="org.jfree.chart.renderer.category.GroupedStackedBarRenderer.getClass()" proba="0.5"></transition><transition target="s2" action="org.jfree.chart.renderer.category.GroupedStackedBarRenderer.equals(java.lang.Object)" proba="0.5"></transition></state><state id="s5"><transition target="s2" action="org.jfree.chart.renderer.category.GroupedStackedBarRenderer.equals(java.lang.Object)" proba="1.0"></transition></state><state id="s6"><transition target="s3" action="org.jfree.chart.renderer.category.GroupedStackedBarRenderer.setSeriesToGroupMap(org.jfree.data.KeyToGroupMap)" proba="0.1111111111111111"></transition><transition target="s6" action="org.jfree.chart.renderer.category.GroupedStackedBarRenderer.findRangeBounds(org.jfree.data.category.CategoryDataset)" proba="0.5555555555555556"></transition><transition target="sX" action="epsilon" proba="0.3333333333333333"></transition></state><state id="s7"><transition target="s8" action="org.jfree.chart.renderer.category.GroupedStackedBarRenderer.mapKeyToGroup(java.lang.Comparable,java.lang.Comparable)" proba="1.0"></transition></state><state id="sX"><transition target="s0" action="epsilon" proba="1.0"></transition></state><state id="s8"><transition target="s3" action="org.jfree.chart.renderer.category.GroupedStackedBarRenderer.setSeriesToGroupMap(org.jfree.data.KeyToGroupMap)" proba="1.0"></transition></state><state id="s0"><transition target="s7" action="org.jfree.chart.renderer.category.GroupedStackedBarRenderer.&lt;init&gt;(java.lang.Comparable)" proba="0.125"></transition><transition target="s1" action="org.jfree.chart.renderer.category.GroupedStackedBarRenderer.&lt;init&gt;()" proba="0.875"></transition></state><state id="s1"><transition target="s4" action="org.jfree.chart.renderer.category.GroupedStackedBarRenderer.clone()" proba="0.14285714285714285"></transition><transition target="s6" action="org.jfree.chart.renderer.category.GroupedStackedBarRenderer.findRangeBounds(org.jfree.data.category.CategoryDataset)" proba="0.21428571428571427"></transition><transition target="sX" action="epsilon" proba="0.42857142857142855"></transition><transition target="s2" action="org.jfree.chart.renderer.category.GroupedStackedBarRenderer.equals(java.lang.Object)" proba="0.21428571428571427"></transition></state><state id="s2"><transition target="s3" action="org.jfree.chart.renderer.category.GroupedStackedBarRenderer.setSeriesToGroupMap(org.jfree.data.KeyToGroupMap)" proba="0.2"></transition><transition target="sX" action="epsilon" proba="0.6"></transition><transition target="s2" action="org.jfree.chart.renderer.category.GroupedStackedBarRenderer.equals(java.lang.Object)" proba="0.2"></transition></state></states></ts>