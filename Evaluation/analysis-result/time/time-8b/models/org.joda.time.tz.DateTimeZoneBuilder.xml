<?xml version="1.0"?><ts><start>s0</start><states><state id="s3"><transition target="sX" action="epsilon" proba="1.0"></transition></state><state id="s4"><transition target="sX" action="epsilon" proba="1.0"></transition></state><state id="s5"><transition target="s7" action="org.joda.time.tz.DateTimeZoneBuilder.writeTo(java.lang.String,java.io.OutputStream)" proba="0.3333333333333333"></transition><transition target="sX" action="epsilon" proba="0.6666666666666666"></transition></state><state id="s6"><transition target="s5" action="org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone(java.lang.String,boolean)" proba="0.5"></transition><transition target="s8" action="org.joda.time.tz.DateTimeZoneBuilder.setStandardOffset(int)" proba="0.5"></transition></state><state id="s10"><transition target="s10" action="org.joda.time.tz.DateTimeZoneBuilder.setFixedSavings(java.lang.String,int)" proba="0.5"></transition><transition target="sX" action="epsilon" proba="0.5"></transition></state><state id="s7"><transition target="sX" action="epsilon" proba="1.0"></transition></state><state id="sX"><transition target="s0" action="epsilon" proba="1.0"></transition></state><state id="s8"><transition target="s10" action="org.joda.time.tz.DateTimeZoneBuilder.setFixedSavings(java.lang.String,int)" proba="0.5"></transition><transition target="s9" action="org.joda.time.tz.DateTimeZoneBuilder.addRecurringSavings(java.lang.String,int,int,int,char,int,int,int,boolean,int)" proba="0.5"></transition></state><state id="s9"><transition target="s5" action="org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone(java.lang.String,boolean)" proba="0.3333333333333333"></transition><transition target="sX" action="epsilon" proba="0.3333333333333333"></transition><transition target="s9" action="org.joda.time.tz.DateTimeZoneBuilder.addRecurringSavings(java.lang.String,int,int,int,char,int,int,int,boolean,int)" proba="0.3333333333333333"></transition></state><state id="s0"><transition target="s3" action="org.joda.time.tz.DateTimeZoneBuilder.addCutover(int,char,int,int,int,boolean,int)" proba="0.05555555555555555"></transition><transition target="s4" action="org.joda.time.tz.DateTimeZoneBuilder.readFrom(java.io.InputStream,java.lang.String)" proba="0.16666666666666666"></transition><transition target="s5" action="org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone(java.lang.String,boolean)" proba="0.05555555555555555"></transition><transition target="s6" action="org.joda.time.tz.DateTimeZoneBuilder.&lt;init&gt;()" proba="0.1111111111111111"></transition><transition target="s7" action="org.joda.time.tz.DateTimeZoneBuilder.writeTo(java.lang.String,java.io.OutputStream)" proba="0.05555555555555555"></transition><transition target="s8" action="org.joda.time.tz.DateTimeZoneBuilder.setStandardOffset(int)" proba="0.05555555555555555"></transition><transition target="s9" action="org.joda.time.tz.DateTimeZoneBuilder.addRecurringSavings(java.lang.String,int,int,int,char,int,int,int,boolean,int)" proba="0.05555555555555555"></transition><transition target="s1" action="org.joda.time.tz.DateTimeZoneBuilder.readMillis(java.io.DataInput)" proba="0.2222222222222222"></transition><transition target="s2" action="org.joda.time.tz.DateTimeZoneBuilder.writeMillis(java.io.DataOutput,long)" proba="0.2222222222222222"></transition></state><state id="s1"><transition target="sX" action="epsilon" proba="0.6666666666666666"></transition><transition target="s1" action="org.joda.time.tz.DateTimeZoneBuilder.readMillis(java.io.DataInput)" proba="0.3333333333333333"></transition></state><state id="s2"><transition target="sX" action="epsilon" proba="0.6666666666666666"></transition><transition target="s2" action="org.joda.time.tz.DateTimeZoneBuilder.writeMillis(java.io.DataOutput,long)" proba="0.3333333333333333"></transition></state></states></ts>