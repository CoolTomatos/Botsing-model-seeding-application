<?xml version="1.0"?><ts><start>s0</start><states><state id="s3"><transition target="sX" action="epsilon" proba="1.0"></transition></state><state id="s4"><transition target="sX" action="epsilon" proba="1.0"></transition></state><state id="s5"><transition target="sX" action="epsilon" proba="1.0"></transition></state><state id="s6"><transition target="sX" action="epsilon" proba="1.0"></transition></state><state id="s7"><transition target="sX" action="epsilon" proba="1.0"></transition></state><state id="sX"><transition target="s0" action="epsilon" proba="1.0"></transition></state><state id="s0"><transition target="s3" action="org.joda.time.tz.DateTimeZoneBuilder$OfYear.writeTo(java.io.DataOutput)" proba="0.1111111111111111"></transition><transition target="s4" action="org.joda.time.tz.DateTimeZoneBuilder$OfYear.next(long,int,int)" proba="0.1111111111111111"></transition><transition target="s5" action="org.joda.time.tz.DateTimeZoneBuilder$OfYear.previous(long,int,int)" proba="0.1111111111111111"></transition><transition target="s6" action="org.joda.time.tz.DateTimeZoneBuilder$OfYear.setInstant(int,int,int)" proba="0.2222222222222222"></transition><transition target="s7" action="org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals(java.lang.Object)" proba="0.1111111111111111"></transition><transition target="s1" action="org.joda.time.tz.DateTimeZoneBuilder$OfYear.readFrom(java.io.DataInput)" proba="0.1111111111111111"></transition><transition target="s2" action="org.joda.time.tz.DateTimeZoneBuilder$OfYear.&lt;init&gt;(char,int,int,int,boolean,int)" proba="0.2222222222222222"></transition></state><state id="s1"><transition target="sX" action="epsilon" proba="1.0"></transition></state><state id="s2"><transition target="sX" action="epsilon" proba="1.0"></transition></state></states></ts>