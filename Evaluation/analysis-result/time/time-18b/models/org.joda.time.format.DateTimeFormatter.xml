<?xml version="1.0"?><ts><start>s0</start><states><state id="s31"><transition target="s32" action="org.joda.time.format.DateTimeFormatter.print(long)" proba="1.0"></transition></state><state id="s30"><transition target="s31" action="org.joda.time.format.DateTimeFormatter.isParser()" proba="1.0"></transition></state><state id="s33"><transition target="s33" action="org.joda.time.format.DateTimeFormatter.parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)" proba="0.16666666666666666"></transition><transition target="s13" action="org.joda.time.format.DateTimeFormatter.withZone(org.joda.time.DateTimeZone)" proba="0.2916666666666667"></transition><transition target="sX" action="epsilon" proba="0.3333333333333333"></transition><transition target="s14" action="org.joda.time.format.DateTimeFormatter.withOffsetParsed()" proba="0.08333333333333333"></transition><transition target="s2" action="org.joda.time.format.DateTimeFormatter.withChronology(org.joda.time.Chronology)" proba="0.125"></transition></state><state id="s32"><transition target="s5" action="org.joda.time.format.DateTimeFormatter.parseDateTime(java.lang.String)" proba="1.0"></transition></state><state id="s35"><transition target="s27" action="org.joda.time.format.DateTimeFormatter.printTo(java.lang.StringBuffer,long)" proba="1.0"></transition></state><state id="s34"><transition target="sX" action="epsilon" proba="1.0"></transition></state><state id="s37"><transition target="s38" action="org.joda.time.format.DateTimeFormatter.printTo(java.io.Writer,long)" proba="1.0"></transition></state><state id="s36"><transition target="sX" action="epsilon" proba="1.0"></transition></state><state id="s39"><transition target="s15" action="org.joda.time.format.DateTimeFormatter.withPivotYear(int)" proba="0.3333333333333333"></transition><transition target="s16" action="org.joda.time.format.DateTimeFormatter.withPivotYear(java.lang.Integer)" proba="0.6666666666666666"></transition></state><state id="s38"><transition target="sX" action="epsilon" proba="1.0"></transition></state><state id="s0"><transition target="s11" action="org.joda.time.format.DateTimeFormatter.getZone()" proba="0.018867924528301886"></transition><transition target="s33" action="org.joda.time.format.DateTimeFormatter.parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)" proba="0.011320754716981131"></transition><transition target="s13" action="org.joda.time.format.DateTimeFormatter.withZone(org.joda.time.DateTimeZone)" proba="0.045283018867924525"></transition><transition target="s35" action="org.joda.time.format.DateTimeFormatter.printTo(java.lang.StringBuffer,org.joda.time.ReadableInstant)" proba="0.0037735849056603774"></transition><transition target="s12" action="org.joda.time.format.DateTimeFormatter.isOffsetParsed()" proba="0.0037735849056603774"></transition><transition target="s15" action="org.joda.time.format.DateTimeFormatter.withPivotYear(int)" proba="0.0037735849056603774"></transition><transition target="s37" action="org.joda.time.format.DateTimeFormatter.printTo(java.io.Writer,org.joda.time.ReadableInstant)" proba="0.0037735849056603774"></transition><transition target="s14" action="org.joda.time.format.DateTimeFormatter.withOffsetParsed()" proba="0.01509433962264151"></transition><transition target="s17" action="org.joda.time.format.DateTimeFormatter.localDateParser()" proba="0.0037735849056603774"></transition><transition target="s39" action="org.joda.time.format.DateTimeFormatter.getPivotYear()" proba="0.0037735849056603774"></transition><transition target="s1" action="org.joda.time.format.DateTimeFormatter.print(org.joda.time.ReadablePartial)" proba="0.1509433962264151"></transition><transition target="s2" action="org.joda.time.format.DateTimeFormatter.withChronology(org.joda.time.Chronology)" proba="0.04150943396226415"></transition><transition target="s3" action="org.joda.time.format.DateTimeFormatter.parseMutableDateTime(java.lang.String)" proba="0.0037735849056603774"></transition><transition target="s4" action="org.joda.time.format.DateTimeFormatter.parseLocalDate(java.lang.String)" proba="0.06792452830188679"></transition><transition target="s5" action="org.joda.time.format.DateTimeFormatter.parseDateTime(java.lang.String)" proba="0.14339622641509434"></transition><transition target="s6" action="org.joda.time.format.DateTimeFormatter.print(org.joda.time.ReadableInstant)" proba="0.28679245283018867"></transition><transition target="s7" action="org.joda.time.format.DateTimeFormatter.parseLocalDateTime(java.lang.String)" proba="0.018867924528301886"></transition><transition target="s8" action="org.joda.time.format.DateTimeFormatter.withLocale(java.util.Locale)" proba="0.007547169811320755"></transition><transition target="s9" action="org.joda.time.format.DateTimeFormatter.forPattern(java.lang.String)" proba="0.018867924528301886"></transition><transition target="s22" action="org.joda.time.format.DateTimeFormatter.dateOptionalTimeParser()" proba="0.0037735849056603774"></transition><transition target="s44" action="org.joda.time.format.DateTimeFormatter.parseLocalTime(java.lang.String)" proba="0.007547169811320755"></transition><transition target="s21" action="org.joda.time.format.DateTimeFormatter.getPrinter()" proba="0.011320754716981131"></transition><transition target="s46" action="org.joda.time.format.DateTimeFormatter.printTo(java.lang.Appendable,org.joda.time.ReadableInstant)" proba="0.0037735849056603774"></transition><transition target="s45" action="org.joda.time.format.DateTimeFormatter.getChronology()" proba="0.0037735849056603774"></transition><transition target="s26" action="org.joda.time.format.DateTimeFormatter.parseMillis(java.lang.String)" proba="0.018867924528301886"></transition><transition target="s48" action="org.joda.time.format.DateTimeFormatter.getLocale()" proba="0.0037735849056603774"></transition><transition target="s28" action="org.joda.time.format.DateTimeFormatter.dateTimeParser()" proba="0.08679245283018867"></transition><transition target="s29" action="org.joda.time.format.DateTimeFormatter.&lt;init&gt;(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser)" proba="0.007547169811320755"></transition></state><state id="s1"><transition target="sX" action="epsilon" proba="0.3076923076923077"></transition><transition target="s1" action="org.joda.time.format.DateTimeFormatter.print(org.joda.time.ReadablePartial)" proba="0.6923076923076923"></transition></state><state id="s2"><transition target="s3" action="org.joda.time.format.DateTimeFormatter.parseMutableDateTime(java.lang.String)" proba="0.06349206349206349"></transition><transition target="s4" action="org.joda.time.format.DateTimeFormatter.parseLocalDate(java.lang.String)" proba="0.015873015873015872"></transition><transition target="s5" action="org.joda.time.format.DateTimeFormatter.parseDateTime(java.lang.String)" proba="0.14285714285714285"></transition><transition target="s6" action="org.joda.time.format.DateTimeFormatter.print(org.joda.time.ReadableInstant)" proba="0.1111111111111111"></transition><transition target="s7" action="org.joda.time.format.DateTimeFormatter.parseLocalDateTime(java.lang.String)" proba="0.015873015873015872"></transition><transition target="sX" action="epsilon" proba="0.031746031746031744"></transition><transition target="s33" action="org.joda.time.format.DateTimeFormatter.parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)" proba="0.06349206349206349"></transition><transition target="s44" action="org.joda.time.format.DateTimeFormatter.parseLocalTime(java.lang.String)" proba="0.015873015873015872"></transition><transition target="s13" action="org.joda.time.format.DateTimeFormatter.withZone(org.joda.time.DateTimeZone)" proba="0.23809523809523808"></transition><transition target="s45" action="org.joda.time.format.DateTimeFormatter.getChronology()" proba="0.015873015873015872"></transition><transition target="s26" action="org.joda.time.format.DateTimeFormatter.parseMillis(java.lang.String)" proba="0.2222222222222222"></transition><transition target="s27" action="org.joda.time.format.DateTimeFormatter.printTo(java.lang.StringBuffer,long)" proba="0.047619047619047616"></transition><transition target="s2" action="org.joda.time.format.DateTimeFormatter.withChronology(org.joda.time.Chronology)" proba="0.015873015873015872"></transition></state><state id="s3"><transition target="s3" action="org.joda.time.format.DateTimeFormatter.parseMutableDateTime(java.lang.String)" proba="0.05263157894736842"></transition><transition target="s13" action="org.joda.time.format.DateTimeFormatter.withZone(org.joda.time.DateTimeZone)" proba="0.3684210526315789"></transition><transition target="sX" action="epsilon" proba="0.3157894736842105"></transition><transition target="s14" action="org.joda.time.format.DateTimeFormatter.withOffsetParsed()" proba="0.10526315789473684"></transition><transition target="s2" action="org.joda.time.format.DateTimeFormatter.withChronology(org.joda.time.Chronology)" proba="0.15789473684210525"></transition></state><state id="s4"><transition target="s4" action="org.joda.time.format.DateTimeFormatter.parseLocalDate(java.lang.String)" proba="0.20833333333333334"></transition><transition target="s5" action="org.joda.time.format.DateTimeFormatter.parseDateTime(java.lang.String)" proba="0.041666666666666664"></transition><transition target="sX" action="epsilon" proba="0.7083333333333334"></transition><transition target="s2" action="org.joda.time.format.DateTimeFormatter.withChronology(org.joda.time.Chronology)" proba="0.041666666666666664"></transition></state><state id="s5"><transition target="s5" action="org.joda.time.format.DateTimeFormatter.parseDateTime(java.lang.String)" proba="0.40512820512820513"></transition><transition target="s6" action="org.joda.time.format.DateTimeFormatter.print(org.joda.time.ReadableInstant)" proba="0.005128205128205128"></transition><transition target="sX" action="epsilon" proba="0.358974358974359"></transition><transition target="s42" action="org.joda.time.format.DateTimeFormatter.getYear()" proba="0.020512820512820513"></transition><transition target="s11" action="org.joda.time.format.DateTimeFormatter.getZone()" proba="0.005128205128205128"></transition><transition target="s43" action="org.joda.time.format.DateTimeFormatter.toInstant()" proba="0.005128205128205128"></transition><transition target="s13" action="org.joda.time.format.DateTimeFormatter.withZone(org.joda.time.DateTimeZone)" proba="0.05128205128205128"></transition><transition target="s34" action="org.joda.time.format.DateTimeFormatter.toDateMidnight()" proba="0.005128205128205128"></transition><transition target="s36" action="org.joda.time.format.DateTimeFormatter.toMutableDateTime()" proba="0.005128205128205128"></transition><transition target="s14" action="org.joda.time.format.DateTimeFormatter.withOffsetParsed()" proba="0.05128205128205128"></transition><transition target="s16" action="org.joda.time.format.DateTimeFormatter.withPivotYear(java.lang.Integer)" proba="0.015384615384615385"></transition><transition target="s19" action="org.joda.time.format.DateTimeFormatter.withZoneUTC()" proba="0.035897435897435895"></transition><transition target="s29" action="org.joda.time.format.DateTimeFormatter.&lt;init&gt;(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser)" proba="0.010256410256410256"></transition><transition target="s2" action="org.joda.time.format.DateTimeFormatter.withChronology(org.joda.time.Chronology)" proba="0.02564102564102564"></transition></state><state id="s6"><transition target="s5" action="org.joda.time.format.DateTimeFormatter.parseDateTime(java.lang.String)" proba="0.052845528455284556"></transition><transition target="s6" action="org.joda.time.format.DateTimeFormatter.print(org.joda.time.ReadableInstant)" proba="0.3821138211382114"></transition><transition target="s13" action="org.joda.time.format.DateTimeFormatter.withZone(org.joda.time.DateTimeZone)" proba="0.028455284552845527"></transition><transition target="s7" action="org.joda.time.format.DateTimeFormatter.parseLocalDateTime(java.lang.String)" proba="0.008130081300813009"></transition><transition target="sX" action="epsilon" proba="0.25203252032520324"></transition><transition target="s8" action="org.joda.time.format.DateTimeFormatter.withLocale(java.util.Locale)" proba="0.17886178861788618"></transition><transition target="s19" action="org.joda.time.format.DateTimeFormatter.withZoneUTC()" proba="0.016260162601626018"></transition><transition target="s2" action="org.joda.time.format.DateTimeFormatter.withChronology(org.joda.time.Chronology)" proba="0.08130081300813008"></transition></state><state id="s7"><transition target="s5" action="org.joda.time.format.DateTimeFormatter.parseDateTime(java.lang.String)" proba="0.0625"></transition><transition target="s13" action="org.joda.time.format.DateTimeFormatter.withZone(org.joda.time.DateTimeZone)" proba="0.1875"></transition><transition target="s7" action="org.joda.time.format.DateTimeFormatter.parseLocalDateTime(java.lang.String)" proba="0.125"></transition><transition target="sX" action="epsilon" proba="0.4375"></transition><transition target="s14" action="org.joda.time.format.DateTimeFormatter.withOffsetParsed()" proba="0.125"></transition><transition target="s2" action="org.joda.time.format.DateTimeFormatter.withChronology(org.joda.time.Chronology)" proba="0.0625"></transition></state><state id="s8"><transition target="s5" action="org.joda.time.format.DateTimeFormatter.parseDateTime(java.lang.String)" proba="0.061224489795918366"></transition><transition target="s6" action="org.joda.time.format.DateTimeFormatter.print(org.joda.time.ReadableInstant)" proba="0.8571428571428571"></transition><transition target="s8" action="org.joda.time.format.DateTimeFormatter.withLocale(java.util.Locale)" proba="0.02040816326530612"></transition><transition target="sX" action="epsilon" proba="0.04081632653061224"></transition><transition target="s48" action="org.joda.time.format.DateTimeFormatter.getLocale()" proba="0.02040816326530612"></transition></state><state id="s9"><transition target="s10" action="org.joda.time.format.DateTimeFormatter.fromString(java.lang.String)" proba="0.2"></transition><transition target="s40" action="org.joda.time.format.DateTimeFormatter.&lt;init&gt;(long)" proba="0.8"></transition></state><state id="s40"><transition target="s6" action="org.joda.time.format.DateTimeFormatter.print(org.joda.time.ReadableInstant)" proba="1.0"></transition></state><state id="s42"><transition target="s5" action="org.joda.time.format.DateTimeFormatter.parseDateTime(java.lang.String)" proba="1.0"></transition></state><state id="s41"><transition target="s41" action="org.joda.time.format.DateTimeFormatter.getChronology(org.joda.time.Chronology)" proba="0.2"></transition><transition target="s11" action="org.joda.time.format.DateTimeFormatter.getZone()" proba="0.2"></transition><transition target="s2" action="org.joda.time.format.DateTimeFormatter.withChronology(org.joda.time.Chronology)" proba="0.6"></transition></state><state id="s44"><transition target="s44" action="org.joda.time.format.DateTimeFormatter.parseLocalTime(java.lang.String)" proba="0.4"></transition><transition target="s5" action="org.joda.time.format.DateTimeFormatter.parseDateTime(java.lang.String)" proba="0.2"></transition><transition target="sX" action="epsilon" proba="0.2"></transition><transition target="s2" action="org.joda.time.format.DateTimeFormatter.withChronology(org.joda.time.Chronology)" proba="0.2"></transition></state><state id="s43"><transition target="sX" action="epsilon" proba="1.0"></transition></state><state id="s46"><transition target="s47" action="org.joda.time.format.DateTimeFormatter.printTo(java.lang.Appendable,long)" proba="1.0"></transition></state><state id="s45"><transition target="s2" action="org.joda.time.format.DateTimeFormatter.withChronology(org.joda.time.Chronology)" proba="1.0"></transition></state><state id="s48"><transition target="s8" action="org.joda.time.format.DateTimeFormatter.withLocale(java.util.Locale)" proba="1.0"></transition></state><state id="s47"><transition target="sX" action="epsilon" proba="1.0"></transition></state><state id="s49"><transition target="s50" action="org.joda.time.format.DateTimeFormatter.getInstance()" proba="1.0"></transition></state><state id="sX"><transition target="s0" action="epsilon" proba="1.0"></transition></state><state id="s51"><transition target="sX" action="epsilon" proba="1.0"></transition></state><state id="s50"><transition target="s51" action="org.joda.time.format.DateTimeFormatter.getInstantConverter(java.lang.Object)" proba="1.0"></transition></state><state id="s11"><transition target="s41" action="org.joda.time.format.DateTimeFormatter.getChronology(org.joda.time.Chronology)" proba="0.16666666666666666"></transition><transition target="s5" action="org.joda.time.format.DateTimeFormatter.parseDateTime(java.lang.String)" proba="0.05555555555555555"></transition><transition target="s11" action="org.joda.time.format.DateTimeFormatter.getZone()" proba="0.05555555555555555"></transition><transition target="s10" action="org.joda.time.format.DateTimeFormatter.fromString(java.lang.String)" proba="0.05555555555555555"></transition><transition target="s13" action="org.joda.time.format.DateTimeFormatter.withZone(org.joda.time.DateTimeZone)" proba="0.16666666666666666"></transition><transition target="s12" action="org.joda.time.format.DateTimeFormatter.isOffsetParsed()" proba="0.05555555555555555"></transition><transition target="sX" action="epsilon" proba="0.1111111111111111"></transition><transition target="s26" action="org.joda.time.format.DateTimeFormatter.parseMillis(java.lang.String)" proba="0.05555555555555555"></transition><transition target="s14" action="org.joda.time.format.DateTimeFormatter.withOffsetParsed()" proba="0.1111111111111111"></transition><transition target="s49" action="org.joda.time.format.DateTimeFormatter.withUTC()" proba="0.05555555555555555"></transition><transition target="s2" action="org.joda.time.format.DateTimeFormatter.withChronology(org.joda.time.Chronology)" proba="0.1111111111111111"></transition></state><state id="s10"><transition target="s11" action="org.joda.time.format.DateTimeFormatter.getZone()" proba="0.3333333333333333"></transition><transition target="s23" action="org.joda.time.format.DateTimeFormatter.getMinimumDaysInFirstWeek()" proba="0.6666666666666666"></transition></state><state id="s13"><transition target="s20" action="org.joda.time.format.DateTimeFormatter.getParser()" proba="0.014492753623188406"></transition><transition target="s3" action="org.joda.time.format.DateTimeFormatter.parseMutableDateTime(java.lang.String)" proba="0.14492753623188406"></transition><transition target="s5" action="org.joda.time.format.DateTimeFormatter.parseDateTime(java.lang.String)" proba="0.21739130434782608"></transition><transition target="s33" action="org.joda.time.format.DateTimeFormatter.parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)" proba="0.14492753623188406"></transition><transition target="s11" action="org.joda.time.format.DateTimeFormatter.getZone()" proba="0.014492753623188406"></transition><transition target="s6" action="org.joda.time.format.DateTimeFormatter.print(org.joda.time.ReadableInstant)" proba="0.30434782608695654"></transition><transition target="s7" action="org.joda.time.format.DateTimeFormatter.parseLocalDateTime(java.lang.String)" proba="0.057971014492753624"></transition><transition target="s13" action="org.joda.time.format.DateTimeFormatter.withZone(org.joda.time.DateTimeZone)" proba="0.014492753623188406"></transition><transition target="s12" action="org.joda.time.format.DateTimeFormatter.isOffsetParsed()" proba="0.014492753623188406"></transition><transition target="sX" action="epsilon" proba="0.028985507246376812"></transition><transition target="s14" action="org.joda.time.format.DateTimeFormatter.withOffsetParsed()" proba="0.043478260869565216"></transition></state><state id="s12"><transition target="s11" action="org.joda.time.format.DateTimeFormatter.getZone()" proba="1.0"></transition></state><state id="s15"><transition target="s39" action="org.joda.time.format.DateTimeFormatter.getPivotYear()" proba="0.5"></transition><transition target="s16" action="org.joda.time.format.DateTimeFormatter.withPivotYear(java.lang.Integer)" proba="0.5"></transition></state><state id="s14"><transition target="s3" action="org.joda.time.format.DateTimeFormatter.parseMutableDateTime(java.lang.String)" proba="0.10344827586206896"></transition><transition target="s33" action="org.joda.time.format.DateTimeFormatter.parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)" proba="0.10344827586206896"></transition><transition target="s5" action="org.joda.time.format.DateTimeFormatter.parseDateTime(java.lang.String)" proba="0.4827586206896552"></transition><transition target="s13" action="org.joda.time.format.DateTimeFormatter.withZone(org.joda.time.DateTimeZone)" proba="0.10344827586206896"></transition><transition target="s7" action="org.joda.time.format.DateTimeFormatter.parseLocalDateTime(java.lang.String)" proba="0.06896551724137931"></transition><transition target="s12" action="org.joda.time.format.DateTimeFormatter.isOffsetParsed()" proba="0.034482758620689655"></transition><transition target="sX" action="epsilon" proba="0.06896551724137931"></transition><transition target="s14" action="org.joda.time.format.DateTimeFormatter.withOffsetParsed()" proba="0.034482758620689655"></transition></state><state id="s17"><transition target="s18" action="org.joda.time.format.DateTimeFormatter.dateElementParser()" proba="1.0"></transition></state><state id="s16"><transition target="s5" action="org.joda.time.format.DateTimeFormatter.parseDateTime(java.lang.String)" proba="0.42857142857142855"></transition><transition target="sX" action="epsilon" proba="0.2857142857142857"></transition><transition target="s39" action="org.joda.time.format.DateTimeFormatter.getPivotYear()" proba="0.14285714285714285"></transition><transition target="s16" action="org.joda.time.format.DateTimeFormatter.withPivotYear(java.lang.Integer)" proba="0.14285714285714285"></transition></state><state id="s19"><transition target="s5" action="org.joda.time.format.DateTimeFormatter.parseDateTime(java.lang.String)" proba="0.8333333333333334"></transition><transition target="s6" action="org.joda.time.format.DateTimeFormatter.print(org.joda.time.ReadableInstant)" proba="0.08333333333333333"></transition><transition target="s13" action="org.joda.time.format.DateTimeFormatter.withZone(org.joda.time.DateTimeZone)" proba="0.08333333333333333"></transition></state><state id="s18"><transition target="s19" action="org.joda.time.format.DateTimeFormatter.withZoneUTC()" proba="1.0"></transition></state><state id="s20"><transition target="s20" action="org.joda.time.format.DateTimeFormatter.getParser()" proba="0.1111111111111111"></transition><transition target="s30" action="org.joda.time.format.DateTimeFormatter.isPrinter()" proba="0.3333333333333333"></transition><transition target="s21" action="org.joda.time.format.DateTimeFormatter.getPrinter()" proba="0.2222222222222222"></transition><transition target="sX" action="epsilon" proba="0.3333333333333333"></transition></state><state id="s22"><transition target="s11" action="org.joda.time.format.DateTimeFormatter.getZone()" proba="1.0"></transition></state><state id="s21"><transition target="s20" action="org.joda.time.format.DateTimeFormatter.getParser()" proba="0.7777777777777778"></transition><transition target="s21" action="org.joda.time.format.DateTimeFormatter.getPrinter()" proba="0.1111111111111111"></transition><transition target="sX" action="epsilon" proba="0.1111111111111111"></transition></state><state id="s24"><transition target="s25" action="org.joda.time.format.DateTimeFormatter.setCurrentMillisFixed(long)" proba="1.0"></transition></state><state id="s23"><transition target="s24" action="org.joda.time.format.DateTimeFormatter.getGregorianCutover()" proba="1.0"></transition></state><state id="s26"><transition target="s41" action="org.joda.time.format.DateTimeFormatter.getChronology(org.joda.time.Chronology)" proba="0.041666666666666664"></transition><transition target="sX" action="epsilon" proba="0.7916666666666666"></transition><transition target="s26" action="org.joda.time.format.DateTimeFormatter.parseMillis(java.lang.String)" proba="0.16666666666666666"></transition></state><state id="s25"><transition target="sX" action="epsilon" proba="1.0"></transition></state><state id="s28"><transition target="s10" action="org.joda.time.format.DateTimeFormatter.fromString(java.lang.String)" proba="0.43478260869565216"></transition><transition target="s14" action="org.joda.time.format.DateTimeFormatter.withOffsetParsed()" proba="0.13043478260869565"></transition><transition target="s2" action="org.joda.time.format.DateTimeFormatter.withChronology(org.joda.time.Chronology)" proba="0.43478260869565216"></transition></state><state id="s27"><transition target="sX" action="epsilon" proba="0.6666666666666666"></transition><transition target="s27" action="org.joda.time.format.DateTimeFormatter.printTo(java.lang.StringBuffer,long)" proba="0.3333333333333333"></transition></state><state id="s29"><transition target="s21" action="org.joda.time.format.DateTimeFormatter.getPrinter()" proba="0.75"></transition><transition target="sX" action="epsilon" proba="0.25"></transition></state></states></ts>