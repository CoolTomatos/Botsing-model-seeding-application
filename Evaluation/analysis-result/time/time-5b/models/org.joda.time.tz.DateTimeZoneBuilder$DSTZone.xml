<?xml version="1.0"?><ts><start>s0</start><states><state id="s3"><transition target="sX" action="epsilon" proba="1.0"></transition></state><state id="s4"><transition target="sX" action="epsilon" proba="1.0"></transition></state><state id="s5"><transition target="sX" action="epsilon" proba="1.0"></transition></state><state id="s6"><transition target="sX" action="epsilon" proba="1.0"></transition></state><state id="s10"><transition target="sX" action="epsilon" proba="1.0"></transition></state><state id="s7"><transition target="sX" action="epsilon" proba="1.0"></transition></state><state id="sX"><transition target="s0" action="epsilon" proba="1.0"></transition></state><state id="s8"><transition target="s9" action="org.joda.time.tz.DateTimeZoneBuilder$DSTZone.&lt;init&gt;(java.lang.String,int,org.joda.time.tz.DateTimeZoneBuilder$Recurrence,org.joda.time.tz.DateTimeZoneBuilder$Recurrence)" proba="1.0"></transition></state><state id="s9"><transition target="s8" action="org.joda.time.tz.DateTimeZoneBuilder$DSTZone.getID()" proba="0.5"></transition><transition target="sX" action="epsilon" proba="0.5"></transition></state><state id="s0"><transition target="s3" action="org.joda.time.tz.DateTimeZoneBuilder$DSTZone.getOffset(long)" proba="0.1111111111111111"></transition><transition target="s4" action="org.joda.time.tz.DateTimeZoneBuilder$DSTZone.equals(java.lang.Object)" proba="0.1111111111111111"></transition><transition target="s5" action="org.joda.time.tz.DateTimeZoneBuilder$DSTZone.writeTo(java.io.DataOutput)" proba="0.1111111111111111"></transition><transition target="s6" action="org.joda.time.tz.DateTimeZoneBuilder$DSTZone.nextTransition(long)" proba="0.1111111111111111"></transition><transition target="s10" action="org.joda.time.tz.DateTimeZoneBuilder$DSTZone.readFrom(java.io.DataInput,java.lang.String)" proba="0.1111111111111111"></transition><transition target="s7" action="org.joda.time.tz.DateTimeZoneBuilder$DSTZone.getStandardOffset(long)" proba="0.1111111111111111"></transition><transition target="s8" action="org.joda.time.tz.DateTimeZoneBuilder$DSTZone.getID()" proba="0.1111111111111111"></transition><transition target="s1" action="org.joda.time.tz.DateTimeZoneBuilder$DSTZone.getNameKey(long)" proba="0.1111111111111111"></transition><transition target="s2" action="org.joda.time.tz.DateTimeZoneBuilder$DSTZone.previousTransition(long)" proba="0.1111111111111111"></transition></state><state id="s1"><transition target="sX" action="epsilon" proba="1.0"></transition></state><state id="s2"><transition target="sX" action="epsilon" proba="1.0"></transition></state></states></ts>