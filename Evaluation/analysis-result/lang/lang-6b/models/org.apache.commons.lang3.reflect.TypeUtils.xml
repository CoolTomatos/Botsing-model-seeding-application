<?xml version="1.0"?><ts><start>s0</start><states><state id="s3"><transition target="s11" action="org.apache.commons.lang3.reflect.TypeUtils.determineTypeArguments(java.lang.Class&lt;?&gt;,java.lang.reflect.ParameterizedType)" proba="0.02857142857142857"></transition><transition target="s13" action="org.apache.commons.lang3.reflect.TypeUtils.&lt;init&gt;()" proba="0.02857142857142857"></transition><transition target="s8" action="org.apache.commons.lang3.reflect.TypeUtils.getRawType(java.lang.reflect.Type,java.lang.reflect.Type)" proba="0.2"></transition><transition target="sX" action="epsilon" proba="0.05714285714285714"></transition><transition target="s1" action="org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(java.lang.reflect.Type)" proba="0.34285714285714286"></transition><transition target="s2" action="org.apache.commons.lang3.reflect.TypeUtils.isArrayType(java.lang.reflect.Type)" proba="0.34285714285714286"></transition></state><state id="s4"><transition target="s4" action="org.apache.commons.lang3.reflect.TypeUtils.isAssignable(java.lang.reflect.Type,java.lang.reflect.Type)" proba="0.9545454545454546"></transition><transition target="sX" action="epsilon" proba="0.045454545454545456"></transition></state><state id="s5"><transition target="s5" action="org.apache.commons.lang3.reflect.TypeUtils.getTypeArguments(java.lang.reflect.Type,java.lang.Class)" proba="0.8"></transition><transition target="sX" action="epsilon" proba="0.2"></transition></state><state id="s6"><transition target="sX" action="epsilon" proba="1.0"></transition></state><state id="s7"><transition target="s7" action="org.apache.commons.lang3.reflect.TypeUtils.typesSatisfyVariables(java.util.Map)" proba="0.6666666666666666"></transition><transition target="sX" action="epsilon" proba="0.3333333333333333"></transition></state><state id="sX"><transition target="s0" action="epsilon" proba="1.0"></transition></state><state id="s8"><transition target="s3" action="org.apache.commons.lang3.reflect.TypeUtils.fromString(java.lang.String)" proba="0.3333333333333333"></transition><transition target="s8" action="org.apache.commons.lang3.reflect.TypeUtils.getRawType(java.lang.reflect.Type,java.lang.reflect.Type)" proba="0.5555555555555556"></transition><transition target="sX" action="epsilon" proba="0.1111111111111111"></transition></state><state id="s9"><transition target="sX" action="epsilon" proba="0.5"></transition><transition target="s9" action="org.apache.commons.lang3.reflect.TypeUtils.isInstance(java.lang.Object,java.lang.reflect.Type)" proba="0.5"></transition></state><state id="s11"><transition target="sX" action="epsilon" proba="1.0"></transition></state><state id="s10"><transition target="s10" action="org.apache.commons.lang3.reflect.TypeUtils.getTypeArguments(java.lang.reflect.Type,java.lang.Class&lt;?&gt;)" proba="0.8"></transition><transition target="sX" action="epsilon" proba="0.2"></transition></state><state id="s13"><transition target="s14" action="org.apache.commons.lang3.reflect.TypeUtils.put(K,V)" proba="1.0"></transition></state><state id="s12"><transition target="sX" action="epsilon" proba="1.0"></transition></state><state id="s15"><transition target="s3" action="org.apache.commons.lang3.reflect.TypeUtils.fromString(java.lang.String)" proba="0.6666666666666666"></transition><transition target="sX" action="epsilon" proba="0.3333333333333333"></transition></state><state id="s14"><transition target="s15" action="org.apache.commons.lang3.reflect.TypeUtils.typesSatisfyVariables(java.util.Map&lt;java.lang.reflect.TypeVariable&lt;?&gt;, java.lang.reflect.Type&gt;)" proba="1.0"></transition></state><state id="s0"><transition target="s3" action="org.apache.commons.lang3.reflect.TypeUtils.fromString(java.lang.String)" proba="0.13043478260869565"></transition><transition target="s4" action="org.apache.commons.lang3.reflect.TypeUtils.isAssignable(java.lang.reflect.Type,java.lang.reflect.Type)" proba="0.08695652173913043"></transition><transition target="s5" action="org.apache.commons.lang3.reflect.TypeUtils.getTypeArguments(java.lang.reflect.Type,java.lang.Class)" proba="0.043478260869565216"></transition><transition target="s6" action="org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(java.lang.reflect.Type[])" proba="0.08695652173913043"></transition><transition target="s10" action="org.apache.commons.lang3.reflect.TypeUtils.getTypeArguments(java.lang.reflect.Type,java.lang.Class&lt;?&gt;)" proba="0.043478260869565216"></transition><transition target="s7" action="org.apache.commons.lang3.reflect.TypeUtils.typesSatisfyVariables(java.util.Map)" proba="0.043478260869565216"></transition><transition target="s13" action="org.apache.commons.lang3.reflect.TypeUtils.&lt;init&gt;()" proba="0.08695652173913043"></transition><transition target="s8" action="org.apache.commons.lang3.reflect.TypeUtils.getRawType(java.lang.reflect.Type,java.lang.reflect.Type)" proba="0.043478260869565216"></transition><transition target="s12" action="org.apache.commons.lang3.reflect.TypeUtils.determineTypeArguments(java.lang.Class,java.lang.reflect.ParameterizedType)" proba="0.043478260869565216"></transition><transition target="s9" action="org.apache.commons.lang3.reflect.TypeUtils.isInstance(java.lang.Object,java.lang.reflect.Type)" proba="0.043478260869565216"></transition><transition target="s1" action="org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(java.lang.reflect.Type)" proba="0.17391304347826086"></transition><transition target="s2" action="org.apache.commons.lang3.reflect.TypeUtils.isArrayType(java.lang.reflect.Type)" proba="0.17391304347826086"></transition></state><state id="s1"><transition target="s3" action="org.apache.commons.lang3.reflect.TypeUtils.fromString(java.lang.String)" proba="0.2"></transition><transition target="sX" action="epsilon" proba="0.06666666666666667"></transition><transition target="s1" action="org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(java.lang.reflect.Type)" proba="0.7333333333333333"></transition></state><state id="s2"><transition target="s3" action="org.apache.commons.lang3.reflect.TypeUtils.fromString(java.lang.String)" proba="0.17647058823529413"></transition><transition target="sX" action="epsilon" proba="0.058823529411764705"></transition><transition target="s2" action="org.apache.commons.lang3.reflect.TypeUtils.isArrayType(java.lang.reflect.Type)" proba="0.7647058823529411"></transition></state></states></ts>