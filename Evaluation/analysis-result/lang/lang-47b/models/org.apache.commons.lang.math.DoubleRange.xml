<?xml version="1.0"?><ts><start>s0</start><states><state id="s3"><transition target="sX" action="epsilon" proba="1.0"></transition></state><state id="s4"><transition target="s4" action="org.apache.commons.lang.math.DoubleRange.equals(java.lang.Object)" proba="0.25"></transition><transition target="sX" action="epsilon" proba="0.75"></transition></state><state id="s5"><transition target="s5" action="org.apache.commons.lang.math.DoubleRange.toString()" proba="0.3333333333333333"></transition><transition target="sX" action="epsilon" proba="0.6666666666666666"></transition></state><state id="s6"><transition target="sX" action="epsilon" proba="1.0"></transition></state><state id="s7"><transition target="s8" action="org.apache.commons.lang.math.DoubleRange.getMinimumNumber()" proba="1.0"></transition></state><state id="sX"><transition target="s0" action="epsilon" proba="1.0"></transition></state><state id="s8"><transition target="s9" action="org.apache.commons.lang.math.DoubleRange.getMaximumNumber()" proba="1.0"></transition></state><state id="s9"><transition target="sX" action="epsilon" proba="1.0"></transition></state><state id="s20"><transition target="s21" action="org.apache.commons.lang.math.DoubleRange.getMaximumFloat()" proba="1.0"></transition></state><state id="s11"><transition target="s11" action="org.apache.commons.lang.math.DoubleRange.hashCode()" proba="0.6666666666666666"></transition><transition target="sX" action="epsilon" proba="0.3333333333333333"></transition></state><state id="s22"><transition target="sX" action="epsilon" proba="1.0"></transition></state><state id="s21"><transition target="sX" action="epsilon" proba="1.0"></transition></state><state id="s10"><transition target="sX" action="epsilon" proba="1.0"></transition></state><state id="s13"><transition target="sX" action="epsilon" proba="1.0"></transition></state><state id="s12"><transition target="sX" action="epsilon" proba="1.0"></transition></state><state id="s15"><transition target="s16" action="org.apache.commons.lang.math.DoubleRange.getMinimumDouble()" proba="1.0"></transition></state><state id="s14"><transition target="s15" action="org.apache.commons.lang.math.DoubleRange.getMinimumInteger()" proba="1.0"></transition></state><state id="s17"><transition target="sX" action="epsilon" proba="1.0"></transition></state><state id="s16"><transition target="s17" action="org.apache.commons.lang.math.DoubleRange.getMinimumFloat()" proba="1.0"></transition></state><state id="s19"><transition target="s20" action="org.apache.commons.lang.math.DoubleRange.getMaximumDouble()" proba="1.0"></transition></state><state id="s18"><transition target="s19" action="org.apache.commons.lang.math.DoubleRange.getMaximumInteger()" proba="1.0"></transition></state><state id="s0"><transition target="s4" action="org.apache.commons.lang.math.DoubleRange.equals(java.lang.Object)" proba="0.018867924528301886"></transition><transition target="s7" action="org.apache.commons.lang.math.DoubleRange.&lt;init&gt;(java.lang.Number)" proba="0.018867924528301886"></transition><transition target="s1" action="org.apache.commons.lang.math.DoubleRange.&lt;init&gt;(java.lang.Number,java.lang.Number)" proba="0.9622641509433962"></transition></state><state id="s1"><transition target="s3" action="org.apache.commons.lang.math.DoubleRange.containsRange(org.apache.commons.lang.math.Range)" proba="0.3137254901960784"></transition><transition target="s4" action="org.apache.commons.lang.math.DoubleRange.equals(java.lang.Object)" proba="0.1568627450980392"></transition><transition target="s5" action="org.apache.commons.lang.math.DoubleRange.toString()" proba="0.0392156862745098"></transition><transition target="s6" action="org.apache.commons.lang.math.DoubleRange.containsFloat(java.lang.Number)" proba="0.0196078431372549"></transition><transition target="sX" action="epsilon" proba="0.0196078431372549"></transition><transition target="s11" action="org.apache.commons.lang.math.DoubleRange.hashCode()" proba="0.0196078431372549"></transition><transition target="s22" action="org.apache.commons.lang.math.DoubleRange.containsInteger(java.lang.Number)" proba="0.0196078431372549"></transition><transition target="s10" action="org.apache.commons.lang.math.DoubleRange.containsDouble(java.lang.Number)" proba="0.0196078431372549"></transition><transition target="s13" action="org.apache.commons.lang.math.DoubleRange.containsNumber(java.lang.Number)" proba="0.0196078431372549"></transition><transition target="s12" action="org.apache.commons.lang.math.DoubleRange.containsLong(java.lang.Number)" proba="0.0196078431372549"></transition><transition target="s14" action="org.apache.commons.lang.math.DoubleRange.getMinimumLong()" proba="0.0196078431372549"></transition><transition target="s18" action="org.apache.commons.lang.math.DoubleRange.getMaximumLong()" proba="0.0196078431372549"></transition><transition target="s2" action="org.apache.commons.lang.math.DoubleRange.overlapsRange(org.apache.commons.lang.math.Range)" proba="0.3137254901960784"></transition></state><state id="s2"><transition target="sX" action="epsilon" proba="1.0"></transition></state></states></ts>