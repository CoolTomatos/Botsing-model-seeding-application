<?xml version="1.0"?><ts><start>s0</start><states><state id="s3"><transition target="s4" action="org.apache.commons.math.optimization.general.GaussNewtonOptimizer.optimize(org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction,double[],double[],double[])" proba="1.0"></transition></state><state id="s4"><transition target="s4" action="org.apache.commons.math.optimization.general.GaussNewtonOptimizer.optimize(org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction,double[],double[],double[])" proba="0.10526315789473684"></transition><transition target="s5" action="org.apache.commons.math.optimization.general.GaussNewtonOptimizer.getRMS()" proba="0.631578947368421"></transition><transition target="sX" action="epsilon" proba="0.2631578947368421"></transition></state><state id="s5"><transition target="s4" action="org.apache.commons.math.optimization.general.GaussNewtonOptimizer.optimize(org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction,double[],double[],double[])" proba="0.16666666666666666"></transition><transition target="sX" action="epsilon" proba="0.8333333333333334"></transition></state><state id="sX"><transition target="s0" action="epsilon" proba="1.0"></transition></state><state id="s0"><transition target="s1" action="org.apache.commons.math.optimization.general.GaussNewtonOptimizer.&lt;init&gt;(boolean)" proba="1.0"></transition></state><state id="s1"><transition target="sX" action="epsilon" proba="0.16666666666666666"></transition><transition target="s2" action="org.apache.commons.math.optimization.general.GaussNewtonOptimizer.setMaxEvaluations(int)" proba="0.8333333333333334"></transition></state><state id="s2"><transition target="s3" action="org.apache.commons.math.optimization.general.GaussNewtonOptimizer.setConvergenceChecker(org.apache.commons.math.optimization.ConvergenceChecker)" proba="1.0"></transition></state></states></ts>