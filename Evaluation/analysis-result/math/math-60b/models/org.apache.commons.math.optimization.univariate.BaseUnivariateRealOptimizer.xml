<?xml version="1.0"?><ts><start>s0</start><states><state id="s3"><transition target="sX" action="epsilon" proba="1.0"></transition></state><state id="s4"><transition target="s5" action="org.apache.commons.math.optimization.univariate.BaseUnivariateRealOptimizer.getEvaluations()" proba="1.0"></transition></state><state id="s5"><transition target="s6" action="org.apache.commons.math.optimization.univariate.BaseUnivariateRealOptimizer.getMaxEvaluations()" proba="1.0"></transition></state><state id="s6"><transition target="s1" action="org.apache.commons.math.optimization.univariate.BaseUnivariateRealOptimizer.setMaxEvaluations(int)" proba="1.0"></transition></state><state id="sX"><transition target="s0" action="epsilon" proba="1.0"></transition></state><state id="s0"><transition target="s3" action="org.apache.commons.math.optimization.univariate.BaseUnivariateRealOptimizer.getConvergenceChecker()" proba="0.25"></transition><transition target="s4" action="org.apache.commons.math.optimization.univariate.BaseUnivariateRealOptimizer.optimize(org.apache.commons.math.analysis.UnivariateRealFunction,org.apache.commons.math.optimization.GoalType,double,double,double)" proba="0.25"></transition><transition target="s1" action="org.apache.commons.math.optimization.univariate.BaseUnivariateRealOptimizer.setMaxEvaluations(int)" proba="0.25"></transition><transition target="s2" action="org.apache.commons.math.optimization.univariate.BaseUnivariateRealOptimizer.setConvergenceChecker(org.apache.commons.math.optimization.ConvergenceChecker)" proba="0.25"></transition></state><state id="s1"><transition target="sX" action="epsilon" proba="1.0"></transition></state><state id="s2"><transition target="sX" action="epsilon" proba="1.0"></transition></state></states></ts>