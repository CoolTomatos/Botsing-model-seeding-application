<?xml version="1.0"?><ts><start>s0</start><states><state id="s3"><transition target="sX" action="epsilon" proba="1.0"></transition></state><state id="s4"><transition target="s4" action="org.apache.commons.math.TestUtils.assertEquals(java.lang.String,org.apache.commons.math.linear.RealMatrix,org.apache.commons.math.linear.RealMatrix,double)" proba="0.5151515151515151"></transition><transition target="sX" action="epsilon" proba="0.48484848484848486"></transition></state><state id="s5"><transition target="s5" action="org.apache.commons.math.TestUtils.assertSame(org.apache.commons.math.complex.Complex,org.apache.commons.math.complex.Complex)" proba="0.8604651162790697"></transition><transition target="s11" action="org.apache.commons.math.TestUtils.assertEquals(org.apache.commons.math.complex.Complex,org.apache.commons.math.complex.Complex,double)" proba="0.007751937984496124"></transition><transition target="sX" action="epsilon" proba="0.13178294573643412"></transition></state><state id="s6"><transition target="s6" action="org.apache.commons.math.TestUtils.assertEquals(double[],double[],double)" proba="0.7586206896551724"></transition><transition target="sX" action="epsilon" proba="0.2413793103448276"></transition></state><state id="s7"><transition target="s7" action="org.apache.commons.math.TestUtils.assertEquals(org.apache.commons.math.linear.FieldMatrix,org.apache.commons.math.linear.FieldMatrix)" proba="0.6"></transition><transition target="sX" action="epsilon" proba="0.4"></transition></state><state id="sX"><transition target="s0" action="epsilon" proba="1.0"></transition></state><state id="s8"><transition target="sX" action="epsilon" proba="0.775"></transition><transition target="s8" action="org.apache.commons.math.TestUtils.serializeAndRecover(java.lang.Object)" proba="0.15"></transition><transition target="s15" action="org.apache.commons.math.TestUtils.checkSerializedEquality(java.lang.Object)" proba="0.075"></transition></state><state id="s9"><transition target="sX" action="epsilon" proba="0.21428571428571427"></transition><transition target="s9" action="org.apache.commons.math.TestUtils.assertEquals(java.lang.String,double,double,double)" proba="0.7142857142857143"></transition><transition target="s1" action="org.apache.commons.math.TestUtils.assertEquals(double,double,double)" proba="0.07142857142857142"></transition></state><state id="s20"><transition target="s20" action="org.apache.commons.math.TestUtils.assertRelativelyEquals(java.lang.String,double,double,double)" proba="0.6666666666666666"></transition><transition target="sX" action="epsilon" proba="0.3333333333333333"></transition></state><state id="s11"><transition target="s11" action="org.apache.commons.math.TestUtils.assertEquals(org.apache.commons.math.complex.Complex,org.apache.commons.math.complex.Complex,double)" proba="0.45"></transition><transition target="sX" action="epsilon" proba="0.55"></transition></state><state id="s22"><transition target="s12" action="org.apache.commons.math.TestUtils.getDistributionQuartiles(org.apache.commons.math.distribution.ContinuousDistribution)" proba="1.0"></transition></state><state id="s10"><transition target="s10" action="org.apache.commons.math.TestUtils.assertEquals(org.apache.commons.math.FieldElement[],org.apache.commons.math.FieldElement[])" proba="0.42857142857142855"></transition><transition target="sX" action="epsilon" proba="0.5714285714285714"></transition></state><state id="s21"><transition target="s22" action="org.apache.commons.math.TestUtils.sample(int)" proba="1.0"></transition></state><state id="s13"><transition target="s13" action="org.apache.commons.math.TestUtils.updateCounts(double,long[],double[])" proba="0.1"></transition><transition target="sX" action="epsilon" proba="0.1"></transition><transition target="s14" action="org.apache.commons.math.TestUtils.assertChiSquareAccept(double[],long[],double)" proba="0.8"></transition></state><state id="s12"><transition target="s13" action="org.apache.commons.math.TestUtils.updateCounts(double,long[],double[])" proba="1.0"></transition></state><state id="s15"><transition target="s8" action="org.apache.commons.math.TestUtils.serializeAndRecover(java.lang.Object)" proba="0.8571428571428571"></transition><transition target="sX" action="epsilon" proba="0.14285714285714285"></transition></state><state id="s14"><transition target="sX" action="epsilon" proba="1.0"></transition></state><state id="s17"><transition target="sX" action="epsilon" proba="1.0"></transition></state><state id="s16"><transition target="sX" action="epsilon" proba="0.6"></transition><transition target="s16" action="org.apache.commons.math.TestUtils.sumSquareDev(double[],double)" proba="0.4"></transition></state><state id="s19"><transition target="sX" action="epsilon" proba="1.0"></transition></state><state id="s18"><transition target="sX" action="epsilon" proba="0.5"></transition><transition target="s18" action="org.apache.commons.math.TestUtils.assertEquals(java.lang.String,double[],double[],double)" proba="0.5"></transition></state><state id="s0"><transition target="s4" action="org.apache.commons.math.TestUtils.assertEquals(java.lang.String,org.apache.commons.math.linear.RealMatrix,org.apache.commons.math.linear.RealMatrix,double)" proba="0.07960199004975124"></transition><transition target="s5" action="org.apache.commons.math.TestUtils.assertSame(org.apache.commons.math.complex.Complex,org.apache.commons.math.complex.Complex)" proba="0.08955223880597014"></transition><transition target="s6" action="org.apache.commons.math.TestUtils.assertEquals(double[],double[],double)" proba="0.1044776119402985"></transition><transition target="s7" action="org.apache.commons.math.TestUtils.assertEquals(org.apache.commons.math.linear.FieldMatrix,org.apache.commons.math.linear.FieldMatrix)" proba="0.07960199004975124"></transition><transition target="s8" action="org.apache.commons.math.TestUtils.serializeAndRecover(java.lang.Object)" proba="0.13930348258706468"></transition><transition target="s9" action="org.apache.commons.math.TestUtils.assertEquals(java.lang.String,double,double,double)" proba="0.05472636815920398"></transition><transition target="s20" action="org.apache.commons.math.TestUtils.assertRelativelyEquals(java.lang.String,double,double,double)" proba="0.004975124378109453"></transition><transition target="s11" action="org.apache.commons.math.TestUtils.assertEquals(org.apache.commons.math.complex.Complex,org.apache.commons.math.complex.Complex,double)" proba="0.1044776119402985"></transition><transition target="s10" action="org.apache.commons.math.TestUtils.assertEquals(org.apache.commons.math.FieldElement[],org.apache.commons.math.FieldElement[])" proba="0.03980099502487562"></transition><transition target="s21" action="org.apache.commons.math.TestUtils.&lt;init&gt;(double,double)" proba="0.004975124378109453"></transition><transition target="s12" action="org.apache.commons.math.TestUtils.getDistributionQuartiles(org.apache.commons.math.distribution.ContinuousDistribution)" proba="0.03980099502487562"></transition><transition target="s15" action="org.apache.commons.math.TestUtils.checkSerializedEquality(java.lang.Object)" proba="0.01990049751243781"></transition><transition target="s17" action="org.apache.commons.math.TestUtils.assertSame(double,double)" proba="0.009950248756218905"></transition><transition target="s16" action="org.apache.commons.math.TestUtils.sumSquareDev(double[],double)" proba="0.014925373134328358"></transition><transition target="s19" action="org.apache.commons.math.TestUtils.assertRelativelyEquals(double,double,double)" proba="0.009950248756218905"></transition><transition target="s18" action="org.apache.commons.math.TestUtils.assertEquals(java.lang.String,double[],double[],double)" proba="0.014925373134328358"></transition><transition target="s1" action="org.apache.commons.math.TestUtils.assertEquals(double,double,double)" proba="0.16417910447761194"></transition><transition target="s2" action="org.apache.commons.math.TestUtils.eliminateZeroMassPoints(int[],double[])" proba="0.024875621890547265"></transition></state><state id="s1"><transition target="sX" action="epsilon" proba="0.3595505617977528"></transition><transition target="s9" action="org.apache.commons.math.TestUtils.assertEquals(java.lang.String,double,double,double)" proba="0.056179775280898875"></transition><transition target="s1" action="org.apache.commons.math.TestUtils.assertEquals(double,double,double)" proba="0.5842696629213483"></transition></state><state id="s2"><transition target="s3" action="org.apache.commons.math.TestUtils.assertChiSquareAccept(int[],double[],long[],double)" proba="1.0"></transition></state></states></ts>