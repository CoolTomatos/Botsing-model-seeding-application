<?xml version="1.0"?><ts><start>s0</start><states><state id="sX"><transition target="s0" action="epsilon" proba="1.0"></transition></state><state id="s11"><transition target="sX" action="epsilon" proba="1.0"></transition></state><state id="s10"><transition target="sX" action="epsilon" proba="1.0"></transition></state><state id="s13"><transition target="s13" action="org.apache.commons.math3.util.MathArrays.checkOrder(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)" proba="0.8888888888888888"></transition><transition target="sX" action="epsilon" proba="0.1111111111111111"></transition></state><state id="s12"><transition target="s12" action="org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(double[],double[])" proba="0.8666666666666667"></transition><transition target="sX" action="epsilon" proba="0.13333333333333333"></transition></state><state id="s15"><transition target="sX" action="epsilon" proba="0.8"></transition><transition target="s15" action="org.apache.commons.math3.util.MathArrays.copyOf(int[],int)" proba="0.2"></transition></state><state id="s14"><transition target="sX" action="epsilon" proba="1.0"></transition></state><state id="s17"><transition target="sX" action="epsilon" proba="1.0"></transition></state><state id="s16"><transition target="sX" action="epsilon" proba="1.0"></transition></state><state id="s19"><transition target="sX" action="epsilon" proba="1.0"></transition></state><state id="s18"><transition target="sX" action="epsilon" proba="0.125"></transition><transition target="s18" action="org.apache.commons.math3.util.MathArrays.isMonotonic(java.lang.Comparable[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)" proba="0.875"></transition></state><state id="s0"><transition target="s3" action="org.apache.commons.math3.util.MathArrays.linearCombination(double,double,double,double,double,double,double,double)" proba="0.014705882352941176"></transition><transition target="s5" action="org.apache.commons.math3.util.MathArrays.distance1(double[],double[])" proba="0.014705882352941176"></transition><transition target="s6" action="org.apache.commons.math3.util.MathArrays.copyOf(double[])" proba="0.11764705882352941"></transition><transition target="s7" action="org.apache.commons.math3.util.MathArrays.checkOrder(double[])" proba="0.16176470588235295"></transition><transition target="s8" action="org.apache.commons.math3.util.MathArrays.distance(int[],int[])" proba="0.029411764705882353"></transition><transition target="s9" action="org.apache.commons.math3.util.MathArrays.sortInPlace(double[],double[][])" proba="0.07352941176470588"></transition><transition target="s20" action="org.apache.commons.math3.util.MathArrays.distanceInf(int[],int[])" proba="0.014705882352941176"></transition><transition target="s11" action="org.apache.commons.math3.util.MathArrays.checkOrder(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean,boolean)" proba="0.014705882352941176"></transition><transition target="s22" action="org.apache.commons.math3.util.MathArrays.equals(double[],double[])" proba="0.014705882352941176"></transition><transition target="s10" action="org.apache.commons.math3.util.MathArrays.copyOf(double[],int)" proba="0.058823529411764705"></transition><transition target="s21" action="org.apache.commons.math3.util.MathArrays.isMonotonic(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)" proba="0.014705882352941176"></transition><transition target="s13" action="org.apache.commons.math3.util.MathArrays.checkOrder(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)" proba="0.014705882352941176"></transition><transition target="s12" action="org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(double[],double[])" proba="0.029411764705882353"></transition><transition target="s23" action="org.apache.commons.math3.util.MathArrays.normalizeArray(double[],double)" proba="0.029411764705882353"></transition><transition target="s15" action="org.apache.commons.math3.util.MathArrays.copyOf(int[],int)" proba="0.058823529411764705"></transition><transition target="s14" action="org.apache.commons.math3.util.MathArrays.copyOf(int[])" proba="0.07352941176470588"></transition><transition target="s17" action="org.apache.commons.math3.util.MathArrays.distance(double[],double[])" proba="0.014705882352941176"></transition><transition target="s16" action="org.apache.commons.math3.util.MathArrays.distanceInf(double[],double[])" proba="0.014705882352941176"></transition><transition target="s19" action="org.apache.commons.math3.util.MathArrays.distance1(int[],int[])" proba="0.014705882352941176"></transition><transition target="s18" action="org.apache.commons.math3.util.MathArrays.isMonotonic(java.lang.Comparable[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)" proba="0.014705882352941176"></transition><transition target="s1" action="org.apache.commons.math3.util.MathArrays.linearCombination(double,double,double,double)" proba="0.07352941176470588"></transition><transition target="s2" action="org.apache.commons.math3.util.MathArrays.linearCombination(double,double,double,double,double,double)" proba="0.1323529411764706"></transition></state><state id="s1"><transition target="sX" action="epsilon" proba="0.17647058823529413"></transition><transition target="s1" action="org.apache.commons.math3.util.MathArrays.linearCombination(double,double,double,double)" proba="0.5294117647058824"></transition><transition target="s2" action="org.apache.commons.math3.util.MathArrays.linearCombination(double,double,double,double,double,double)" proba="0.29411764705882354"></transition></state><state id="s2"><transition target="s3" action="org.apache.commons.math3.util.MathArrays.linearCombination(double,double,double,double,double,double,double,double)" proba="0.3076923076923077"></transition><transition target="s4" action="org.apache.commons.math3.util.MathArrays.linearCombination(double[],double[])" proba="0.07692307692307693"></transition><transition target="sX" action="epsilon" proba="0.07692307692307693"></transition><transition target="s1" action="org.apache.commons.math3.util.MathArrays.linearCombination(double,double,double,double)" proba="0.46153846153846156"></transition><transition target="s2" action="org.apache.commons.math3.util.MathArrays.linearCombination(double,double,double,double,double,double)" proba="0.07692307692307693"></transition></state><state id="s3"><transition target="s3" action="org.apache.commons.math3.util.MathArrays.linearCombination(double,double,double,double,double,double,double,double)" proba="0.18181818181818182"></transition><transition target="s4" action="org.apache.commons.math3.util.MathArrays.linearCombination(double[],double[])" proba="0.7272727272727273"></transition><transition target="sX" action="epsilon" proba="0.09090909090909091"></transition></state><state id="s4"><transition target="sX" action="epsilon" proba="0.3"></transition><transition target="s1" action="org.apache.commons.math3.util.MathArrays.linearCombination(double,double,double,double)" proba="0.7"></transition></state><state id="s5"><transition target="sX" action="epsilon" proba="1.0"></transition></state><state id="s6"><transition target="s6" action="org.apache.commons.math3.util.MathArrays.copyOf(double[])" proba="0.25"></transition><transition target="sX" action="epsilon" proba="0.75"></transition></state><state id="s7"><transition target="s6" action="org.apache.commons.math3.util.MathArrays.copyOf(double[])" proba="0.05555555555555555"></transition><transition target="s7" action="org.apache.commons.math3.util.MathArrays.checkOrder(double[])" proba="0.3888888888888889"></transition><transition target="sX" action="epsilon" proba="0.5"></transition><transition target="s9" action="org.apache.commons.math3.util.MathArrays.sortInPlace(double[],double[][])" proba="0.05555555555555555"></transition></state><state id="s8"><transition target="sX" action="epsilon" proba="1.0"></transition></state><state id="s9"><transition target="sX" action="epsilon" proba="0.75"></transition><transition target="s9" action="org.apache.commons.math3.util.MathArrays.sortInPlace(double[],double[][])" proba="0.25"></transition></state><state id="s20"><transition target="sX" action="epsilon" proba="1.0"></transition></state><state id="s22"><transition target="s22" action="org.apache.commons.math3.util.MathArrays.equals(double[],double[])" proba="0.8888888888888888"></transition><transition target="sX" action="epsilon" proba="0.1111111111111111"></transition></state><state id="s21"><transition target="s21" action="org.apache.commons.math3.util.MathArrays.isMonotonic(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)" proba="0.875"></transition><transition target="sX" action="epsilon" proba="0.125"></transition></state><state id="s23"><transition target="s23" action="org.apache.commons.math3.util.MathArrays.normalizeArray(double[],double)" proba="0.75"></transition><transition target="sX" action="epsilon" proba="0.25"></transition></state></states></ts>