<?xml version="1.0"?><ts><start>s0</start><states><state id="s3"><transition target="s4" action="org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateRealOptimizer.getMaxEvaluations()" proba="1.0"></transition></state><state id="s4"><transition target="s5" action="org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateRealOptimizer.getOptima()" proba="1.0"></transition></state><state id="s5"><transition target="s6" action="org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateRealOptimizer.getEvaluations()" proba="1.0"></transition></state><state id="s6"><transition target="s6" action="org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateRealOptimizer.getEvaluations()" proba="0.5"></transition><transition target="sX" action="epsilon" proba="0.5"></transition></state><state id="sX"><transition target="s0" action="epsilon" proba="1.0"></transition></state><state id="s0"><transition target="s1" action="org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateRealOptimizer.&lt;init&gt;(org.apache.commons.math.optimization.DifferentiableMultivariateRealOptimizer,int,org.apache.commons.math.random.RandomVectorGenerator)" proba="1.0"></transition></state><state id="s1"><transition target="s2" action="org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateRealOptimizer.setConvergenceChecker(org.apache.commons.math.optimization.ConvergenceChecker)" proba="1.0"></transition></state><state id="s2"><transition target="s3" action="org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateRealOptimizer.optimize(int,org.apache.commons.math.analysis.MultivariateRealFunction,org.apache.commons.math.optimization.GoalType,double[])" proba="1.0"></transition></state></states></ts>