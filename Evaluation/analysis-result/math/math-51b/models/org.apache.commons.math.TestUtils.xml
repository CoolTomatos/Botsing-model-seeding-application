<?xml version="1.0"?><ts><start>s0</start><states><state id="s3"><transition target="s3" action="org.apache.commons.math.TestUtils.assertEquals(org.apache.commons.math.complex.Complex,org.apache.commons.math.complex.Complex,double)" proba="0.46808510638297873"></transition><transition target="sX" action="epsilon" proba="0.5319148936170213"></transition></state><state id="s4"><transition target="s4" action="org.apache.commons.math.TestUtils.assertEquals(java.lang.String,org.apache.commons.math.linear.RealMatrix,org.apache.commons.math.linear.RealMatrix,double)" proba="0.5952380952380952"></transition><transition target="sX" action="epsilon" proba="0.40476190476190477"></transition></state><state id="s5"><transition target="s11" action="org.apache.commons.math.TestUtils.checkSerializedEquality(java.lang.Object)" proba="0.075"></transition><transition target="s5" action="org.apache.commons.math.TestUtils.serializeAndRecover(java.lang.Object)" proba="0.15"></transition><transition target="sX" action="epsilon" proba="0.775"></transition></state><state id="s6"><transition target="s6" action="org.apache.commons.math.TestUtils.sumSquareDev(double[],double)" proba="0.4"></transition><transition target="sX" action="epsilon" proba="0.6"></transition></state><state id="s7"><transition target="s3" action="org.apache.commons.math.TestUtils.assertEquals(org.apache.commons.math.complex.Complex,org.apache.commons.math.complex.Complex,double)" proba="0.013793103448275862"></transition><transition target="s7" action="org.apache.commons.math.TestUtils.assertSame(org.apache.commons.math.complex.Complex,org.apache.commons.math.complex.Complex)" proba="0.8620689655172413"></transition><transition target="sX" action="epsilon" proba="0.12413793103448276"></transition></state><state id="sX"><transition target="s0" action="epsilon" proba="1.0"></transition></state><state id="s8"><transition target="s9" action="org.apache.commons.math.TestUtils.updateCounts(double,long[],double[])" proba="1.0"></transition></state><state id="s9"><transition target="s10" action="org.apache.commons.math.TestUtils.assertChiSquareAccept(double[],long[],double)" proba="1.0"></transition></state><state id="s20"><transition target="s20" action="org.apache.commons.math.TestUtils.assertEquals(org.apache.commons.math.FieldElement[],org.apache.commons.math.FieldElement[])" proba="0.42857142857142855"></transition><transition target="sX" action="epsilon" proba="0.5714285714285714"></transition></state><state id="s11"><transition target="s5" action="org.apache.commons.math.TestUtils.serializeAndRecover(java.lang.Object)" proba="0.8571428571428571"></transition><transition target="sX" action="epsilon" proba="0.14285714285714285"></transition></state><state id="s10"><transition target="sX" action="epsilon" proba="0.8333333333333334"></transition><transition target="s8" action="org.apache.commons.math.TestUtils.getDistributionQuartiles(org.apache.commons.math.distribution.ContinuousDistribution)" proba="0.16666666666666666"></transition></state><state id="s13"><transition target="s14" action="org.apache.commons.math.TestUtils.assertChiSquareAccept(int[],double[],long[],double)" proba="1.0"></transition></state><state id="s12"><transition target="sX" action="epsilon" proba="1.0"></transition></state><state id="s15"><transition target="sX" action="epsilon" proba="0.3888888888888889"></transition><transition target="s15" action="org.apache.commons.math.TestUtils.assertEquals(java.lang.String,double,double,double)" proba="0.6111111111111112"></transition></state><state id="s14"><transition target="sX" action="epsilon" proba="1.0"></transition></state><state id="s17"><transition target="sX" action="epsilon" proba="0.3469387755102041"></transition><transition target="s17" action="org.apache.commons.math.TestUtils.assertEquals(org.apache.commons.math.linear.FieldMatrix,org.apache.commons.math.linear.FieldMatrix)" proba="0.6530612244897959"></transition></state><state id="s16"><transition target="sX" action="epsilon" proba="1.0"></transition></state><state id="s19"><transition target="sX" action="epsilon" proba="0.3333333333333333"></transition><transition target="s19" action="org.apache.commons.math.TestUtils.assertRelativelyEquals(java.lang.String,double,double,double)" proba="0.6666666666666666"></transition></state><state id="s18"><transition target="sX" action="epsilon" proba="0.5"></transition><transition target="s18" action="org.apache.commons.math.TestUtils.assertEquals(java.lang.String,double[],double[],double)" proba="0.5"></transition></state><state id="s0"><transition target="s3" action="org.apache.commons.math.TestUtils.assertEquals(org.apache.commons.math.complex.Complex,org.apache.commons.math.complex.Complex,double)" proba="0.11004784688995216"></transition><transition target="s4" action="org.apache.commons.math.TestUtils.assertEquals(java.lang.String,org.apache.commons.math.linear.RealMatrix,org.apache.commons.math.linear.RealMatrix,double)" proba="0.08133971291866028"></transition><transition target="s5" action="org.apache.commons.math.TestUtils.serializeAndRecover(java.lang.Object)" proba="0.1339712918660287"></transition><transition target="s6" action="org.apache.commons.math.TestUtils.sumSquareDev(double[],double)" proba="0.014354066985645933"></transition><transition target="s7" action="org.apache.commons.math.TestUtils.assertSame(org.apache.commons.math.complex.Complex,org.apache.commons.math.complex.Complex)" proba="0.09569377990430622"></transition><transition target="s8" action="org.apache.commons.math.TestUtils.getDistributionQuartiles(org.apache.commons.math.distribution.ContinuousDistribution)" proba="0.0430622009569378"></transition><transition target="s20" action="org.apache.commons.math.TestUtils.assertEquals(org.apache.commons.math.FieldElement[],org.apache.commons.math.FieldElement[])" proba="0.03827751196172249"></transition><transition target="s11" action="org.apache.commons.math.TestUtils.checkSerializedEquality(java.lang.Object)" proba="0.019138755980861243"></transition><transition target="s10" action="org.apache.commons.math.TestUtils.assertChiSquareAccept(double[],long[],double)" proba="0.004784688995215311"></transition><transition target="s13" action="org.apache.commons.math.TestUtils.eliminateZeroMassPoints(int[],double[])" proba="0.023923444976076555"></transition><transition target="s12" action="org.apache.commons.math.TestUtils.assertSame(double,double)" proba="0.009569377990430622"></transition><transition target="s15" action="org.apache.commons.math.TestUtils.assertEquals(java.lang.String,double,double,double)" proba="0.028708133971291867"></transition><transition target="s17" action="org.apache.commons.math.TestUtils.assertEquals(org.apache.commons.math.linear.FieldMatrix,org.apache.commons.math.linear.FieldMatrix)" proba="0.08133971291866028"></transition><transition target="s16" action="org.apache.commons.math.TestUtils.assertRelativelyEquals(double,double,double)" proba="0.014354066985645933"></transition><transition target="s19" action="org.apache.commons.math.TestUtils.assertRelativelyEquals(java.lang.String,double,double,double)" proba="0.004784688995215311"></transition><transition target="s18" action="org.apache.commons.math.TestUtils.assertEquals(java.lang.String,double[],double[],double)" proba="0.014354066985645933"></transition><transition target="s1" action="org.apache.commons.math.TestUtils.assertEquals(double[],double[],double)" proba="0.16267942583732056"></transition><transition target="s2" action="org.apache.commons.math.TestUtils.assertEquals(double,double,double)" proba="0.11961722488038277"></transition></state><state id="s1"><transition target="sX" action="epsilon" proba="0.19130434782608696"></transition><transition target="s1" action="org.apache.commons.math.TestUtils.assertEquals(double[],double[],double)" proba="0.6956521739130435"></transition><transition target="s2" action="org.apache.commons.math.TestUtils.assertEquals(double,double,double)" proba="0.11304347826086956"></transition></state><state id="s2"><transition target="sX" action="epsilon" proba="0.32727272727272727"></transition><transition target="s15" action="org.apache.commons.math.TestUtils.assertEquals(java.lang.String,double,double,double)" proba="0.00909090909090909"></transition><transition target="s1" action="org.apache.commons.math.TestUtils.assertEquals(double[],double[],double)" proba="0.00909090909090909"></transition><transition target="s2" action="org.apache.commons.math.TestUtils.assertEquals(double,double,double)" proba="0.6545454545454545"></transition></state></states></ts>