<?xml version="1.0"?><ts><start>s0</start><states><state id="s3"><transition target="s4" action="org.apache.commons.math3.optim.univariate.BrentOptimizer.getEvaluations()" proba="0.4166666666666667"></transition><transition target="sX" action="epsilon" proba="0.25"></transition><transition target="s2" action="org.apache.commons.math3.optim.univariate.BrentOptimizer.optimize(org.apache.commons.math3.optim.OptimizationData[])" proba="0.3333333333333333"></transition></state><state id="s4"><transition target="s4" action="org.apache.commons.math3.optim.univariate.BrentOptimizer.getEvaluations()" proba="0.125"></transition><transition target="s5" action="org.apache.commons.math3.optim.univariate.BrentOptimizer.getMaxEvaluations()" proba="0.125"></transition><transition target="sX" action="epsilon" proba="0.5"></transition><transition target="s2" action="org.apache.commons.math3.optim.univariate.BrentOptimizer.optimize(org.apache.commons.math3.optim.OptimizationData[])" proba="0.25"></transition></state><state id="s5"><transition target="s2" action="org.apache.commons.math3.optim.univariate.BrentOptimizer.optimize(org.apache.commons.math3.optim.OptimizationData[])" proba="1.0"></transition></state><state id="s6"><transition target="s2" action="org.apache.commons.math3.optim.univariate.BrentOptimizer.optimize(org.apache.commons.math3.optim.OptimizationData[])" proba="1.0"></transition></state><state id="sX"><transition target="s0" action="epsilon" proba="1.0"></transition></state><state id="s0"><transition target="s6" action="org.apache.commons.math3.optim.univariate.BrentOptimizer.&lt;init&gt;(double,double,org.apache.commons.math3.optim.ConvergenceChecker)" proba="0.06666666666666667"></transition><transition target="s1" action="org.apache.commons.math3.optim.univariate.BrentOptimizer.&lt;init&gt;(double,double)" proba="0.9333333333333333"></transition></state><state id="s1"><transition target="sX" action="epsilon" proba="0.35714285714285715"></transition><transition target="s2" action="org.apache.commons.math3.optim.univariate.BrentOptimizer.optimize(org.apache.commons.math3.optim.OptimizationData[])" proba="0.6428571428571429"></transition></state><state id="s2"><transition target="s3" action="org.apache.commons.math3.optim.univariate.BrentOptimizer.getPoint()" proba="0.7058823529411765"></transition><transition target="s4" action="org.apache.commons.math3.optim.univariate.BrentOptimizer.getEvaluations()" proba="0.11764705882352941"></transition><transition target="sX" action="epsilon" proba="0.17647058823529413"></transition></state></states></ts>