<?xml version="1.0"?><ts><start>s0</start><states><state id="sX"><transition target="s0" action="epsilon" proba="1.0"></transition></state><state id="s11"><transition target="s11" action="org.apache.commons.math3.TestUtils.assertEquals(java.lang.String,double[],org.apache.commons.math3.linear.RealVector,double)" proba="0.15384615384615385"></transition><transition target="sX" action="epsilon" proba="0.8461538461538461"></transition></state><state id="s10"><transition target="s10" action="org.apache.commons.math3.TestUtils.assertEquals(org.apache.commons.math3.linear.FieldMatrix,org.apache.commons.math3.linear.FieldMatrix)" proba="0.6530612244897959"></transition><transition target="sX" action="epsilon" proba="0.3469387755102041"></transition></state><state id="s13"><transition target="s14" action="org.apache.commons.math3.TestUtils.assertChiSquareAccept(double[],long[],double)" proba="1.0"></transition></state><state id="s12"><transition target="s13" action="org.apache.commons.math3.TestUtils.updateCounts(double,long[],double[])" proba="1.0"></transition></state><state id="s15"><transition target="sX" action="epsilon" proba="0.3333333333333333"></transition><transition target="s15" action="org.apache.commons.math3.TestUtils.assertRelativelyEquals(java.lang.String,double,double,double)" proba="0.6666666666666666"></transition></state><state id="s14"><transition target="sX" action="epsilon" proba="0.9047619047619048"></transition><transition target="s12" action="org.apache.commons.math3.TestUtils.getDistributionQuartiles(org.apache.commons.math3.distribution.RealDistribution)" proba="0.09523809523809523"></transition></state><state id="s17"><transition target="s18" action="org.apache.commons.math3.TestUtils.assertChiSquareAccept(int[],double[],long[],double)" proba="1.0"></transition></state><state id="s16"><transition target="sX" action="epsilon" proba="0.625"></transition><transition target="s16" action="org.apache.commons.math3.TestUtils.assertEquals(java.lang.String,double[],double[],double)" proba="0.375"></transition></state><state id="s19"><transition target="s8" action="org.apache.commons.math3.TestUtils.serializeAndRecover(java.lang.Object)" proba="0.8571428571428571"></transition><transition target="sX" action="epsilon" proba="0.14285714285714285"></transition></state><state id="s18"><transition target="sX" action="epsilon" proba="1.0"></transition></state><state id="s0"><transition target="s3" action="org.apache.commons.math3.TestUtils.assertEquals(org.apache.commons.math3.complex.Complex,org.apache.commons.math3.complex.Complex,double)" proba="0.08846153846153847"></transition><transition target="s4" action="org.apache.commons.math3.TestUtils.assertEquals(double[],double[],double)" proba="0.17692307692307693"></transition><transition target="s5" action="org.apache.commons.math3.TestUtils.assertRelativelyEquals(double,double,double)" proba="0.011538461538461539"></transition><transition target="s6" action="org.apache.commons.math3.TestUtils.assertEquals(java.lang.String,double,double,double)" proba="0.03461538461538462"></transition><transition target="s7" action="org.apache.commons.math3.TestUtils.assertEquals(org.apache.commons.math3.FieldElement[],org.apache.commons.math3.FieldElement[])" proba="0.03076923076923077"></transition><transition target="s8" action="org.apache.commons.math3.TestUtils.serializeAndRecover(java.lang.Object)" proba="0.13846153846153847"></transition><transition target="s9" action="org.apache.commons.math3.TestUtils.assertEquals(double,double,double)" proba="0.10384615384615385"></transition><transition target="s20" action="org.apache.commons.math3.TestUtils.assertSame(double,double)" proba="0.007692307692307693"></transition><transition target="s11" action="org.apache.commons.math3.TestUtils.assertEquals(java.lang.String,double[],org.apache.commons.math3.linear.RealVector,double)" proba="0.04230769230769231"></transition><transition target="s22" action="org.apache.commons.math3.TestUtils.assertContains(org.apache.commons.math3.complex.Complex[],org.apache.commons.math3.complex.Complex,double)" proba="0.0038461538461538464"></transition><transition target="s10" action="org.apache.commons.math3.TestUtils.assertEquals(org.apache.commons.math3.linear.FieldMatrix,org.apache.commons.math3.linear.FieldMatrix)" proba="0.06538461538461539"></transition><transition target="s21" action="org.apache.commons.math3.TestUtils.sumSquareDev(double[],double)" proba="0.011538461538461539"></transition><transition target="s12" action="org.apache.commons.math3.TestUtils.getDistributionQuartiles(org.apache.commons.math3.distribution.RealDistribution)" proba="0.038461538461538464"></transition><transition target="s23" action="org.apache.commons.math3.TestUtils.assertChiSquareAccept(java.lang.String[],double[],long[],double)" proba="0.0038461538461538464"></transition><transition target="s15" action="org.apache.commons.math3.TestUtils.assertRelativelyEquals(java.lang.String,double,double,double)" proba="0.0038461538461538464"></transition><transition target="s14" action="org.apache.commons.math3.TestUtils.assertChiSquareAccept(double[],long[],double)" proba="0.03461538461538462"></transition><transition target="s17" action="org.apache.commons.math3.TestUtils.eliminateZeroMassPoints(int[],double[])" proba="0.019230769230769232"></transition><transition target="s16" action="org.apache.commons.math3.TestUtils.assertEquals(java.lang.String,double[],double[],double)" proba="0.019230769230769232"></transition><transition target="s19" action="org.apache.commons.math3.TestUtils.checkSerializedEquality(java.lang.Object)" proba="0.015384615384615385"></transition><transition target="s1" action="org.apache.commons.math3.TestUtils.assertEquals(java.lang.String,org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealMatrix,double)" proba="0.07307692307692308"></transition><transition target="s2" action="org.apache.commons.math3.TestUtils.assertSame(org.apache.commons.math3.complex.Complex,org.apache.commons.math3.complex.Complex)" proba="0.07692307692307693"></transition></state><state id="s1"><transition target="sX" action="epsilon" proba="0.4318181818181818"></transition><transition target="s1" action="org.apache.commons.math3.TestUtils.assertEquals(java.lang.String,org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealMatrix,double)" proba="0.5681818181818182"></transition></state><state id="s2"><transition target="s3" action="org.apache.commons.math3.TestUtils.assertEquals(org.apache.commons.math3.complex.Complex,org.apache.commons.math3.complex.Complex,double)" proba="0.013793103448275862"></transition><transition target="sX" action="epsilon" proba="0.12413793103448276"></transition><transition target="s2" action="org.apache.commons.math3.TestUtils.assertSame(org.apache.commons.math3.complex.Complex,org.apache.commons.math3.complex.Complex)" proba="0.8620689655172413"></transition></state><state id="s3"><transition target="s3" action="org.apache.commons.math3.TestUtils.assertEquals(org.apache.commons.math3.complex.Complex,org.apache.commons.math3.complex.Complex,double)" proba="0.5098039215686274"></transition><transition target="sX" action="epsilon" proba="0.49019607843137253"></transition></state><state id="s4"><transition target="s4" action="org.apache.commons.math3.TestUtils.assertEquals(double[],double[],double)" proba="0.6328125"></transition><transition target="sX" action="epsilon" proba="0.265625"></transition><transition target="s9" action="org.apache.commons.math3.TestUtils.assertEquals(double,double,double)" proba="0.1015625"></transition></state><state id="s5"><transition target="sX" action="epsilon" proba="1.0"></transition></state><state id="s6"><transition target="s6" action="org.apache.commons.math3.TestUtils.assertEquals(java.lang.String,double,double,double)" proba="0.5238095238095238"></transition><transition target="sX" action="epsilon" proba="0.42857142857142855"></transition><transition target="s9" action="org.apache.commons.math3.TestUtils.assertEquals(double,double,double)" proba="0.047619047619047616"></transition></state><state id="s7"><transition target="s7" action="org.apache.commons.math3.TestUtils.assertEquals(org.apache.commons.math3.FieldElement[],org.apache.commons.math3.FieldElement[])" proba="0.42857142857142855"></transition><transition target="sX" action="epsilon" proba="0.5714285714285714"></transition></state><state id="s8"><transition target="sX" action="epsilon" proba="0.8125"></transition><transition target="s8" action="org.apache.commons.math3.TestUtils.serializeAndRecover(java.lang.Object)" proba="0.125"></transition><transition target="s19" action="org.apache.commons.math3.TestUtils.checkSerializedEquality(java.lang.Object)" proba="0.0625"></transition></state><state id="s9"><transition target="s4" action="org.apache.commons.math3.TestUtils.assertEquals(double[],double[],double)" proba="0.007575757575757576"></transition><transition target="s6" action="org.apache.commons.math3.TestUtils.assertEquals(java.lang.String,double,double,double)" proba="0.007575757575757576"></transition><transition target="sX" action="epsilon" proba="0.29545454545454547"></transition><transition target="s9" action="org.apache.commons.math3.TestUtils.assertEquals(double,double,double)" proba="0.6893939393939394"></transition></state><state id="s20"><transition target="sX" action="epsilon" proba="1.0"></transition></state><state id="s22"><transition target="sX" action="epsilon" proba="1.0"></transition></state><state id="s21"><transition target="s21" action="org.apache.commons.math3.TestUtils.sumSquareDev(double[],double)" proba="0.4"></transition><transition target="sX" action="epsilon" proba="0.6"></transition></state><state id="s23"><transition target="sX" action="epsilon" proba="1.0"></transition></state></states></ts>