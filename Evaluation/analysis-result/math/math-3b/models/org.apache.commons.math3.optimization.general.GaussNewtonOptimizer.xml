<?xml version="1.0"?><ts><start>s0</start><states><state id="s3"><transition target="s1" action="org.apache.commons.math3.optimization.general.GaussNewtonOptimizer.optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" proba="1.0"></transition></state><state id="s4"><transition target="sX" action="epsilon" proba="1.0"></transition></state><state id="s5"><transition target="sX" action="epsilon" proba="1.0"></transition></state><state id="sX"><transition target="s0" action="epsilon" proba="1.0"></transition></state><state id="s0"><transition target="s3" action="org.apache.commons.math3.optimization.general.GaussNewtonOptimizer.&lt;init&gt;(org.apache.commons.math3.optimization.ConvergenceChecker)" proba="0.1111111111111111"></transition><transition target="s4" action="org.apache.commons.math3.optimization.general.GaussNewtonOptimizer.getConvergenceChecker()" proba="0.2222222222222222"></transition><transition target="s5" action="org.apache.commons.math3.optimization.general.GaussNewtonOptimizer.getEvaluations()" proba="0.2222222222222222"></transition><transition target="s1" action="org.apache.commons.math3.optimization.general.GaussNewtonOptimizer.optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" proba="0.2222222222222222"></transition><transition target="s2" action="org.apache.commons.math3.optimization.general.GaussNewtonOptimizer.getMaxEvaluations()" proba="0.2222222222222222"></transition></state><state id="s1"><transition target="sX" action="epsilon" proba="1.0"></transition></state><state id="s2"><transition target="sX" action="epsilon" proba="1.0"></transition></state></states></ts>