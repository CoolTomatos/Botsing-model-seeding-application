<?xml version="1.0"?><ts><start>s0</start><states><state id="s3"><transition target="sX" action="epsilon" proba="1.0"></transition></state><state id="s4"><transition target="s1" action="org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer.cluster(java.util.Collection)" proba="1.0"></transition></state><state id="s5"><transition target="s1" action="org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer.cluster(java.util.Collection)" proba="1.0"></transition></state><state id="sX"><transition target="s0" action="epsilon" proba="1.0"></transition></state><state id="s0"><transition target="s3" action="org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer.getDistanceMeasure()" proba="0.16666666666666666"></transition><transition target="s4" action="org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer.&lt;init&gt;(int,int,org.apache.commons.math3.ml.distance.DistanceMeasure,org.apache.commons.math3.random.RandomGenerator,org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer$EmptyClusterStrategy)" proba="0.16666666666666666"></transition><transition target="s5" action="org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer.&lt;init&gt;(int,int)" proba="0.16666666666666666"></transition><transition target="s1" action="org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer.cluster(java.util.Collection)" proba="0.16666666666666666"></transition><transition target="s2" action="org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer.&lt;init&gt;(int,int,org.apache.commons.math3.ml.distance.DistanceMeasure,org.apache.commons.math3.random.RandomGenerator)" proba="0.3333333333333333"></transition></state><state id="s1"><transition target="sX" action="epsilon" proba="1.0"></transition></state><state id="s2"><transition target="s1" action="org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer.cluster(java.util.Collection)" proba="1.0"></transition></state></states></ts>