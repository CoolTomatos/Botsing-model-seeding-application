<?xml version="1.0"?><ts><start>s0</start><states><state id="s3"><transition target="s1" action="org.apache.commons.math3.distribution.MixtureMultivariateNormalDistribution.getComponents()" proba="1.0"></transition></state><state id="s4"><transition target="s1" action="org.apache.commons.math3.distribution.MixtureMultivariateNormalDistribution.getComponents()" proba="1.0"></transition></state><state id="s5"><transition target="sX" action="epsilon" proba="1.0"></transition></state><state id="s6"><transition target="sX" action="epsilon" proba="1.0"></transition></state><state id="sX"><transition target="s0" action="epsilon" proba="1.0"></transition></state><state id="s0"><transition target="s1" action="org.apache.commons.math3.distribution.MixtureMultivariateNormalDistribution.getComponents()" proba="0.8333333333333334"></transition><transition target="s2" action="org.apache.commons.math3.distribution.MixtureMultivariateNormalDistribution.&lt;init&gt;(java.util.List)" proba="0.16666666666666666"></transition></state><state id="s1"><transition target="s3" action="org.apache.commons.math3.distribution.MixtureMultivariateNormalDistribution.size()" proba="0.14285714285714285"></transition><transition target="s4" action="org.apache.commons.math3.distribution.MixtureMultivariateNormalDistribution.get(int)" proba="0.14285714285714285"></transition><transition target="s5" action="org.apache.commons.math3.distribution.MixtureMultivariateNormalDistribution.iterator()" proba="0.14285714285714285"></transition><transition target="s6" action="org.apache.commons.math3.distribution.MixtureMultivariateNormalDistribution.density(double[])" proba="0.14285714285714285"></transition><transition target="sX" action="epsilon" proba="0.42857142857142855"></transition></state><state id="s2"><transition target="sX" action="epsilon" proba="1.0"></transition></state></states></ts>