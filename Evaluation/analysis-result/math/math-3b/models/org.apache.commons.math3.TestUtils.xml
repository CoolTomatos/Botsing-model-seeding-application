<?xml version="1.0"?><ts><start>s0</start><states><state id="sX"><transition target="s0" action="epsilon" proba="1.0"></transition></state><state id="s11"><transition target="s11" action="org.apache.commons.math3.TestUtils.assertEquals(java.lang.String,org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealMatrix,double)" proba="0.5681818181818182"></transition><transition target="sX" action="epsilon" proba="0.4318181818181818"></transition></state><state id="s10"><transition target="s10" action="org.apache.commons.math3.TestUtils.assertEquals(double,double,double)" proba="0.6934306569343066"></transition><transition target="s7" action="org.apache.commons.math3.TestUtils.assertEquals(java.lang.String,double,double,double)" proba="0.0072992700729927005"></transition><transition target="sX" action="epsilon" proba="0.291970802919708"></transition><transition target="s9" action="org.apache.commons.math3.TestUtils.assertEquals(double[],double[],double)" proba="0.0072992700729927005"></transition></state><state id="s13"><transition target="s22" action="org.apache.commons.math3.TestUtils.clear()" proba="0.125"></transition><transition target="sX" action="epsilon" proba="0.125"></transition><transition target="s2" action="org.apache.commons.math3.TestUtils.serializeAndRecover(java.lang.Object)" proba="0.75"></transition></state><state id="s12"><transition target="sX" action="epsilon" proba="0.625"></transition><transition target="s12" action="org.apache.commons.math3.TestUtils.assertEquals(java.lang.String,double[],double[],double)" proba="0.375"></transition></state><state id="s15"><transition target="sX" action="epsilon" proba="0.49019607843137253"></transition><transition target="s15" action="org.apache.commons.math3.TestUtils.assertEquals(org.apache.commons.math3.complex.Complex,org.apache.commons.math3.complex.Complex,double)" proba="0.5098039215686274"></transition></state><state id="s14"><transition target="sX" action="epsilon" proba="1.0"></transition></state><state id="s17"><transition target="sX" action="epsilon" proba="0.6"></transition><transition target="s17" action="org.apache.commons.math3.TestUtils.sumSquareDev(double[],double)" proba="0.4"></transition></state><state id="s16"><transition target="sX" action="epsilon" proba="0.5714285714285714"></transition><transition target="s16" action="org.apache.commons.math3.TestUtils.assertEquals(org.apache.commons.math3.FieldElement[],org.apache.commons.math3.FieldElement[])" proba="0.42857142857142855"></transition></state><state id="s19"><transition target="sX" action="epsilon" proba="1.0"></transition></state><state id="s18"><transition target="s19" action="org.apache.commons.math3.TestUtils.assertChiSquareAccept(int[],double[],long[],double)" proba="1.0"></transition></state><state id="s0"><transition target="s3" action="org.apache.commons.math3.TestUtils.assertSame(org.apache.commons.math3.complex.Complex,org.apache.commons.math3.complex.Complex)" proba="0.07547169811320754"></transition><transition target="s4" action="org.apache.commons.math3.TestUtils.getDistributionQuartiles(org.apache.commons.math3.distribution.RealDistribution)" proba="0.03773584905660377"></transition><transition target="s6" action="org.apache.commons.math3.TestUtils.assertChiSquareAccept(double[],long[],double)" proba="0.033962264150943396"></transition><transition target="s7" action="org.apache.commons.math3.TestUtils.assertEquals(java.lang.String,double,double,double)" proba="0.033962264150943396"></transition><transition target="s8" action="org.apache.commons.math3.TestUtils.assertEquals(org.apache.commons.math3.linear.FieldMatrix,org.apache.commons.math3.linear.FieldMatrix)" proba="0.06415094339622641"></transition><transition target="s9" action="org.apache.commons.math3.TestUtils.assertEquals(double[],double[],double)" proba="0.17358490566037735"></transition><transition target="s20" action="org.apache.commons.math3.TestUtils.assertRelativelyEquals(double,double,double)" proba="0.01509433962264151"></transition><transition target="s11" action="org.apache.commons.math3.TestUtils.assertEquals(java.lang.String,org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealMatrix,double)" proba="0.07169811320754717"></transition><transition target="s10" action="org.apache.commons.math3.TestUtils.assertEquals(double,double,double)" proba="0.10566037735849057"></transition><transition target="s21" action="org.apache.commons.math3.TestUtils.&lt;init&gt;()" proba="0.007547169811320755"></transition><transition target="s13" action="org.apache.commons.math3.TestUtils.checkSerializedEquality(java.lang.Object)" proba="0.01509433962264151"></transition><transition target="s24" action="org.apache.commons.math3.TestUtils.assertSame(double,double)" proba="0.007547169811320755"></transition><transition target="s12" action="org.apache.commons.math3.TestUtils.assertEquals(java.lang.String,double[],double[],double)" proba="0.018867924528301886"></transition><transition target="s15" action="org.apache.commons.math3.TestUtils.assertEquals(org.apache.commons.math3.complex.Complex,org.apache.commons.math3.complex.Complex,double)" proba="0.08679245283018867"></transition><transition target="s26" action="org.apache.commons.math3.TestUtils.normalizeArray(double[],double)" proba="0.0037735849056603774"></transition><transition target="s14" action="org.apache.commons.math3.TestUtils.assertContains(org.apache.commons.math3.complex.Complex[],org.apache.commons.math3.complex.Complex,double)" proba="0.0037735849056603774"></transition><transition target="s25" action="org.apache.commons.math3.TestUtils.assertRelativelyEquals(java.lang.String,double,double,double)" proba="0.0037735849056603774"></transition><transition target="s17" action="org.apache.commons.math3.TestUtils.sumSquareDev(double[],double)" proba="0.011320754716981131"></transition><transition target="s16" action="org.apache.commons.math3.TestUtils.assertEquals(org.apache.commons.math3.FieldElement[],org.apache.commons.math3.FieldElement[])" proba="0.03018867924528302"></transition><transition target="s27" action="org.apache.commons.math3.TestUtils.assertChiSquareAccept(java.lang.String[],double[],long[],double)" proba="0.0037735849056603774"></transition><transition target="s18" action="org.apache.commons.math3.TestUtils.eliminateZeroMassPoints(int[],double[])" proba="0.018867924528301886"></transition><transition target="s1" action="org.apache.commons.math3.TestUtils.assertEquals(java.lang.String,double[],org.apache.commons.math3.linear.RealVector,double)" proba="0.04150943396226415"></transition><transition target="s2" action="org.apache.commons.math3.TestUtils.serializeAndRecover(java.lang.Object)" proba="0.13584905660377358"></transition></state><state id="s1"><transition target="sX" action="epsilon" proba="0.8461538461538461"></transition><transition target="s1" action="org.apache.commons.math3.TestUtils.assertEquals(java.lang.String,double[],org.apache.commons.math3.linear.RealVector,double)" proba="0.15384615384615385"></transition></state><state id="s2"><transition target="s13" action="org.apache.commons.math3.TestUtils.checkSerializedEquality(java.lang.Object)" proba="0.05660377358490566"></transition><transition target="sX" action="epsilon" proba="0.7735849056603774"></transition><transition target="s23" action="org.apache.commons.math3.TestUtils.increment(double)" proba="0.05660377358490566"></transition><transition target="s2" action="org.apache.commons.math3.TestUtils.serializeAndRecover(java.lang.Object)" proba="0.11320754716981132"></transition></state><state id="s3"><transition target="s3" action="org.apache.commons.math3.TestUtils.assertSame(org.apache.commons.math3.complex.Complex,org.apache.commons.math3.complex.Complex)" proba="0.8620689655172413"></transition><transition target="sX" action="epsilon" proba="0.12413793103448276"></transition><transition target="s15" action="org.apache.commons.math3.TestUtils.assertEquals(org.apache.commons.math3.complex.Complex,org.apache.commons.math3.complex.Complex,double)" proba="0.013793103448275862"></transition></state><state id="s4"><transition target="s5" action="org.apache.commons.math3.TestUtils.updateCounts(double,long[],double[])" proba="1.0"></transition></state><state id="s5"><transition target="s6" action="org.apache.commons.math3.TestUtils.assertChiSquareAccept(double[],long[],double)" proba="1.0"></transition></state><state id="s6"><transition target="s4" action="org.apache.commons.math3.TestUtils.getDistributionQuartiles(org.apache.commons.math3.distribution.RealDistribution)" proba="0.09523809523809523"></transition><transition target="sX" action="epsilon" proba="0.9047619047619048"></transition></state><state id="s7"><transition target="s10" action="org.apache.commons.math3.TestUtils.assertEquals(double,double,double)" proba="0.047619047619047616"></transition><transition target="s7" action="org.apache.commons.math3.TestUtils.assertEquals(java.lang.String,double,double,double)" proba="0.5238095238095238"></transition><transition target="sX" action="epsilon" proba="0.42857142857142855"></transition></state><state id="s8"><transition target="s8" action="org.apache.commons.math3.TestUtils.assertEquals(org.apache.commons.math3.linear.FieldMatrix,org.apache.commons.math3.linear.FieldMatrix)" proba="0.6530612244897959"></transition><transition target="sX" action="epsilon" proba="0.3469387755102041"></transition></state><state id="s9"><transition target="s10" action="org.apache.commons.math3.TestUtils.assertEquals(double,double,double)" proba="0.10077519379844961"></transition><transition target="sX" action="epsilon" proba="0.2713178294573643"></transition><transition target="s9" action="org.apache.commons.math3.TestUtils.assertEquals(double[],double[],double)" proba="0.627906976744186"></transition></state><state id="s20"><transition target="sX" action="epsilon" proba="1.0"></transition></state><state id="s22"><transition target="s23" action="org.apache.commons.math3.TestUtils.increment(double)" proba="1.0"></transition></state><state id="s21"><transition target="s13" action="org.apache.commons.math3.TestUtils.checkSerializedEquality(java.lang.Object)" proba="0.5"></transition><transition target="s2" action="org.apache.commons.math3.TestUtils.serializeAndRecover(java.lang.Object)" proba="0.5"></transition></state><state id="s24"><transition target="sX" action="epsilon" proba="1.0"></transition></state><state id="s23"><transition target="s23" action="org.apache.commons.math3.TestUtils.increment(double)" proba="0.75"></transition><transition target="s2" action="org.apache.commons.math3.TestUtils.serializeAndRecover(java.lang.Object)" proba="0.25"></transition></state><state id="s26"><transition target="s9" action="org.apache.commons.math3.TestUtils.assertEquals(double[],double[],double)" proba="1.0"></transition></state><state id="s25"><transition target="sX" action="epsilon" proba="0.3333333333333333"></transition><transition target="s25" action="org.apache.commons.math3.TestUtils.assertRelativelyEquals(java.lang.String,double,double,double)" proba="0.6666666666666666"></transition></state><state id="s27"><transition target="sX" action="epsilon" proba="1.0"></transition></state></states></ts>