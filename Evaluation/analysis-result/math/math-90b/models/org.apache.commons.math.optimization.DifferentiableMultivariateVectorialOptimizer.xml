<?xml version="1.0"?><ts><start>s0</start><states><state id="s3"><transition target="s4" action="org.apache.commons.math.optimization.DifferentiableMultivariateVectorialOptimizer.getEvaluations()" proba="1.0"></transition></state><state id="s4"><transition target="s5" action="org.apache.commons.math.optimization.DifferentiableMultivariateVectorialOptimizer.getJacobianEvaluations()" proba="1.0"></transition></state><state id="s5"><transition target="sX" action="epsilon" proba="1.0"></transition></state><state id="s6"><transition target="sX" action="epsilon" proba="1.0"></transition></state><state id="s7"><transition target="sX" action="epsilon" proba="1.0"></transition></state><state id="sX"><transition target="s0" action="epsilon" proba="1.0"></transition></state><state id="s0"><transition target="s6" action="org.apache.commons.math.optimization.DifferentiableMultivariateVectorialOptimizer.setConvergenceChecker(org.apache.commons.math.optimization.VectorialConvergenceChecker)" proba="0.3333333333333333"></transition><transition target="s7" action="org.apache.commons.math.optimization.DifferentiableMultivariateVectorialOptimizer.getConvergenceChecker()" proba="0.3333333333333333"></transition><transition target="s1" action="org.apache.commons.math.optimization.DifferentiableMultivariateVectorialOptimizer.setMaxIterations(int)" proba="0.3333333333333333"></transition></state><state id="s1"><transition target="s2" action="org.apache.commons.math.optimization.DifferentiableMultivariateVectorialOptimizer.optimize(org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction,double[],double[],double[])" proba="1.0"></transition></state><state id="s2"><transition target="s3" action="org.apache.commons.math.optimization.DifferentiableMultivariateVectorialOptimizer.getIterations()" proba="1.0"></transition></state></states></ts>