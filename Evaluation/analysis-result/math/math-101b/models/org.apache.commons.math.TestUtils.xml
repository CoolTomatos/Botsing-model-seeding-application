<?xml version="1.0"?><ts><start>s0</start><states><state id="s3"><transition target="s3" action="org.apache.commons.math.TestUtils.assertEquals(org.apache.commons.math.complex.Complex,org.apache.commons.math.complex.Complex,double)" proba="0.410958904109589"></transition><transition target="sX" action="epsilon" proba="0.589041095890411"></transition></state><state id="s4"><transition target="s4" action="org.apache.commons.math.TestUtils.assertEquals(double,double,double)" proba="0.6964285714285714"></transition><transition target="s6" action="org.apache.commons.math.TestUtils.assertEquals(java.lang.String,double,double,double)" proba="0.017857142857142856"></transition><transition target="sX" action="epsilon" proba="0.2857142857142857"></transition></state><state id="s5"><transition target="sX" action="epsilon" proba="0.14285714285714285"></transition><transition target="s1" action="org.apache.commons.math.TestUtils.serializeAndRecover(java.lang.Object)" proba="0.8571428571428571"></transition></state><state id="s6"><transition target="s6" action="org.apache.commons.math.TestUtils.assertEquals(java.lang.String,double,double,double)" proba="0.6470588235294118"></transition><transition target="sX" action="epsilon" proba="0.35294117647058826"></transition></state><state id="s7"><transition target="s7" action="org.apache.commons.math.TestUtils.assertRelativelyEquals(double,double,double)" proba="0.6666666666666666"></transition><transition target="sX" action="epsilon" proba="0.3333333333333333"></transition></state><state id="sX"><transition target="s0" action="epsilon" proba="1.0"></transition></state><state id="s8"><transition target="s8" action="org.apache.commons.math.TestUtils.assertContains(org.apache.commons.math.complex.Complex[],org.apache.commons.math.complex.Complex,double)" proba="0.8"></transition><transition target="sX" action="epsilon" proba="0.2"></transition></state><state id="s9"><transition target="sX" action="epsilon" proba="0.26666666666666666"></transition><transition target="s9" action="org.apache.commons.math.TestUtils.assertEquals(double[],double[],double)" proba="0.7333333333333333"></transition></state><state id="s0"><transition target="s3" action="org.apache.commons.math.TestUtils.assertEquals(org.apache.commons.math.complex.Complex,org.apache.commons.math.complex.Complex,double)" proba="0.36283185840707965"></transition><transition target="s4" action="org.apache.commons.math.TestUtils.assertEquals(double,double,double)" proba="0.1504424778761062"></transition><transition target="s5" action="org.apache.commons.math.TestUtils.checkSerializedEquality(java.lang.Object)" proba="0.035398230088495575"></transition><transition target="s6" action="org.apache.commons.math.TestUtils.assertEquals(java.lang.String,double,double,double)" proba="0.04424778761061947"></transition><transition target="s7" action="org.apache.commons.math.TestUtils.assertRelativelyEquals(double,double,double)" proba="0.008849557522123894"></transition><transition target="s8" action="org.apache.commons.math.TestUtils.assertContains(org.apache.commons.math.complex.Complex[],org.apache.commons.math.complex.Complex,double)" proba="0.008849557522123894"></transition><transition target="s9" action="org.apache.commons.math.TestUtils.assertEquals(double[],double[],double)" proba="0.035398230088495575"></transition><transition target="s1" action="org.apache.commons.math.TestUtils.serializeAndRecover(java.lang.Object)" proba="0.05309734513274336"></transition><transition target="s2" action="org.apache.commons.math.TestUtils.assertSame(org.apache.commons.math.complex.Complex,org.apache.commons.math.complex.Complex)" proba="0.3008849557522124"></transition></state><state id="s1"><transition target="s5" action="org.apache.commons.math.TestUtils.checkSerializedEquality(java.lang.Object)" proba="0.17647058823529413"></transition><transition target="sX" action="epsilon" proba="0.5294117647058824"></transition><transition target="s1" action="org.apache.commons.math.TestUtils.serializeAndRecover(java.lang.Object)" proba="0.29411764705882354"></transition></state><state id="s2"><transition target="s3" action="org.apache.commons.math.TestUtils.assertEquals(org.apache.commons.math.complex.Complex,org.apache.commons.math.complex.Complex,double)" proba="0.008130081300813009"></transition><transition target="sX" action="epsilon" proba="0.13008130081300814"></transition><transition target="s2" action="org.apache.commons.math.TestUtils.assertSame(org.apache.commons.math.complex.Complex,org.apache.commons.math.complex.Complex)" proba="0.8617886178861789"></transition></state></states></ts>