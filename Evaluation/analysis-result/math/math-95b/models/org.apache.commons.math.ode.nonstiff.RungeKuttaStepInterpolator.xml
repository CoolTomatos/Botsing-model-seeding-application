<?xml version="1.0"?><ts><start>s0</start><states><state id="s3"><transition target="s4" action="org.apache.commons.math.ode.nonstiff.RungeKuttaStepInterpolator.next()" proba="1.0"></transition></state><state id="s4"><transition target="s5" action="org.apache.commons.math.ode.nonstiff.RungeKuttaStepInterpolator.evaluateStep(org.apache.commons.math.ode.sampling.StepInterpolator)" proba="1.0"></transition></state><state id="s5"><transition target="s6" action="org.apache.commons.math.ode.nonstiff.RungeKuttaStepInterpolator.getEventTime()" proba="1.0"></transition></state><state id="s6"><transition target="s7" action="org.apache.commons.math.ode.nonstiff.RungeKuttaStepInterpolator.stepAccepted(double,double[])" proba="1.0"></transition></state><state id="s7"><transition target="s8" action="org.apache.commons.math.ode.nonstiff.RungeKuttaStepInterpolator.stop()" proba="1.0"></transition></state><state id="sX"><transition target="s0" action="epsilon" proba="1.0"></transition></state><state id="s8"><transition target="s9" action="org.apache.commons.math.ode.nonstiff.RungeKuttaStepInterpolator.reset(double,double[])" proba="1.0"></transition></state><state id="s9"><transition target="sX" action="epsilon" proba="1.0"></transition></state><state id="s0"><transition target="s1" action="org.apache.commons.math.ode.nonstiff.RungeKuttaStepInterpolator.copy()" proba="0.5"></transition><transition target="s2" action="org.apache.commons.math.ode.nonstiff.RungeKuttaStepInterpolator.reinitialize(org.apache.commons.math.ode.FirstOrderDifferentialEquations,double[],double[][],boolean)" proba="0.5"></transition></state><state id="s1"><transition target="sX" action="epsilon" proba="1.0"></transition></state><state id="s2"><transition target="s3" action="org.apache.commons.math.ode.nonstiff.RungeKuttaStepInterpolator.hasNext()" proba="0.5"></transition><transition target="sX" action="epsilon" proba="0.5"></transition></state></states></ts>