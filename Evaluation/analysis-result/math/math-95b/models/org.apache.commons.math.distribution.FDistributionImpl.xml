<?xml version="1.0"?><ts><start>s0</start><states><state id="s3"><transition target="s3" action="org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(double)" proba="0.6875"></transition><transition target="sX" action="epsilon" proba="0.3125"></transition></state><state id="s4"><transition target="s5" action="org.apache.commons.math.distribution.FDistributionImpl.setNumeratorDegreesOfFreedom(double)" proba="0.5"></transition><transition target="s6" action="org.apache.commons.math.distribution.FDistributionImpl.getDenominatorDegreesOfFreedom()" proba="0.5"></transition></state><state id="s5"><transition target="s4" action="org.apache.commons.math.distribution.FDistributionImpl.getNumeratorDegreesOfFreedom()" proba="0.5"></transition><transition target="s7" action="org.apache.commons.math.distribution.FDistributionImpl.setDenominatorDegreesOfFreedom(double)" proba="0.5"></transition></state><state id="s6"><transition target="s5" action="org.apache.commons.math.distribution.FDistributionImpl.setNumeratorDegreesOfFreedom(double)" proba="0.5"></transition><transition target="s7" action="org.apache.commons.math.distribution.FDistributionImpl.setDenominatorDegreesOfFreedom(double)" proba="0.5"></transition></state><state id="s7"><transition target="s6" action="org.apache.commons.math.distribution.FDistributionImpl.getDenominatorDegreesOfFreedom()" proba="0.5"></transition><transition target="sX" action="epsilon" proba="0.5"></transition></state><state id="sX"><transition target="s0" action="epsilon" proba="1.0"></transition></state><state id="s8"><transition target="s3" action="org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(double)" proba="0.125"></transition><transition target="s8" action="org.apache.commons.math.distribution.FDistributionImpl.cumulativeProbability(double,double)" proba="0.375"></transition><transition target="s2" action="org.apache.commons.math.distribution.FDistributionImpl.cumulativeProbability(double)" proba="0.5"></transition></state><state id="s0"><transition target="s1" action="org.apache.commons.math.distribution.FDistributionImpl.&lt;init&gt;(double,double)" proba="1.0"></transition></state><state id="s1"><transition target="s3" action="org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(double)" proba="0.18181818181818182"></transition><transition target="s4" action="org.apache.commons.math.distribution.FDistributionImpl.getNumeratorDegreesOfFreedom()" proba="0.09090909090909091"></transition><transition target="sX" action="epsilon" proba="0.09090909090909091"></transition><transition target="s8" action="org.apache.commons.math.distribution.FDistributionImpl.cumulativeProbability(double,double)" proba="0.18181818181818182"></transition><transition target="s2" action="org.apache.commons.math.distribution.FDistributionImpl.cumulativeProbability(double)" proba="0.45454545454545453"></transition></state><state id="s2"><transition target="s3" action="org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(double)" proba="0.08695652173913043"></transition><transition target="sX" action="epsilon" proba="0.17391304347826086"></transition><transition target="s8" action="org.apache.commons.math.distribution.FDistributionImpl.cumulativeProbability(double,double)" proba="0.13043478260869565"></transition><transition target="s2" action="org.apache.commons.math.distribution.FDistributionImpl.cumulativeProbability(double)" proba="0.6086956521739131"></transition></state></states></ts>