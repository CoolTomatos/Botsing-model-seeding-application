<?xml version="1.0"?><ts><start>s0</start><states><state id="s3"><transition target="s3" action="org.apache.commons.math.TestUtils.serializeAndRecover(java.lang.Object)" proba="0.3125"></transition><transition target="sX" action="epsilon" proba="0.5"></transition><transition target="s8" action="org.apache.commons.math.TestUtils.checkSerializedEquality(java.lang.Object)" proba="0.1875"></transition></state><state id="s4"><transition target="s4" action="org.apache.commons.math.TestUtils.assertEquals(org.apache.commons.math.complex.Complex,org.apache.commons.math.complex.Complex,double)" proba="0.45"></transition><transition target="sX" action="epsilon" proba="0.55"></transition></state><state id="s5"><transition target="s5" action="org.apache.commons.math.TestUtils.assertEquals(double,double,double)" proba="0.639344262295082"></transition><transition target="sX" action="epsilon" proba="0.2786885245901639"></transition><transition target="s1" action="org.apache.commons.math.TestUtils.assertEquals(java.lang.String,double,double,double)" proba="0.08196721311475409"></transition></state><state id="s6"><transition target="s6" action="org.apache.commons.math.TestUtils.assertEquals(double[],double[],double)" proba="0.6666666666666666"></transition><transition target="sX" action="epsilon" proba="0.3333333333333333"></transition></state><state id="s7"><transition target="s7" action="org.apache.commons.math.TestUtils.assertRelativelyEquals(double,double,double)" proba="0.6666666666666666"></transition><transition target="sX" action="epsilon" proba="0.3333333333333333"></transition></state><state id="sX"><transition target="s0" action="epsilon" proba="1.0"></transition></state><state id="s8"><transition target="s3" action="org.apache.commons.math.TestUtils.serializeAndRecover(java.lang.Object)" proba="0.8571428571428571"></transition><transition target="sX" action="epsilon" proba="0.14285714285714285"></transition></state><state id="s9"><transition target="sX" action="epsilon" proba="0.2"></transition><transition target="s9" action="org.apache.commons.math.TestUtils.assertContains(org.apache.commons.math.complex.Complex[],org.apache.commons.math.complex.Complex,double)" proba="0.8"></transition></state><state id="s0"><transition target="s3" action="org.apache.commons.math.TestUtils.serializeAndRecover(java.lang.Object)" proba="0.05952380952380952"></transition><transition target="s4" action="org.apache.commons.math.TestUtils.assertEquals(org.apache.commons.math.complex.Complex,org.apache.commons.math.complex.Complex,double)" proba="0.25"></transition><transition target="s5" action="org.apache.commons.math.TestUtils.assertEquals(double,double,double)" proba="0.21428571428571427"></transition><transition target="s6" action="org.apache.commons.math.TestUtils.assertEquals(double[],double[],double)" proba="0.08333333333333333"></transition><transition target="s7" action="org.apache.commons.math.TestUtils.assertRelativelyEquals(double,double,double)" proba="0.011904761904761904"></transition><transition target="s8" action="org.apache.commons.math.TestUtils.checkSerializedEquality(java.lang.Object)" proba="0.047619047619047616"></transition><transition target="s9" action="org.apache.commons.math.TestUtils.assertContains(org.apache.commons.math.complex.Complex[],org.apache.commons.math.complex.Complex,double)" proba="0.011904761904761904"></transition><transition target="s1" action="org.apache.commons.math.TestUtils.assertEquals(java.lang.String,double,double,double)" proba="0.10714285714285714"></transition><transition target="s2" action="org.apache.commons.math.TestUtils.assertSame(org.apache.commons.math.complex.Complex,org.apache.commons.math.complex.Complex)" proba="0.21428571428571427"></transition></state><state id="s1"><transition target="s5" action="org.apache.commons.math.TestUtils.assertEquals(double,double,double)" proba="0.0975609756097561"></transition><transition target="sX" action="epsilon" proba="0.24390243902439024"></transition><transition target="s1" action="org.apache.commons.math.TestUtils.assertEquals(java.lang.String,double,double,double)" proba="0.6585365853658537"></transition></state><state id="s2"><transition target="s4" action="org.apache.commons.math.TestUtils.assertEquals(org.apache.commons.math.complex.Complex,org.apache.commons.math.complex.Complex,double)" proba="0.007751937984496124"></transition><transition target="sX" action="epsilon" proba="0.13178294573643412"></transition><transition target="s2" action="org.apache.commons.math.TestUtils.assertSame(org.apache.commons.math.complex.Complex,org.apache.commons.math.complex.Complex)" proba="0.8604651162790697"></transition></state></states></ts>