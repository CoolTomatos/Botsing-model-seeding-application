<?xml version="1.0"?><ts><start>s0</start><states><state id="s3"><transition target="s11" action="org.apache.commons.math.linear.SparseRealMatrix.getRowDimension()" proba="0.5"></transition><transition target="sX" action="epsilon" proba="0.5"></transition></state><state id="s4"><transition target="s5" action="org.apache.commons.math.linear.SparseRealMatrix.isSquare()" proba="0.5"></transition><transition target="s17" action="org.apache.commons.math.linear.SparseRealMatrix.hashCode()" proba="0.5"></transition></state><state id="s5"><transition target="s6" action="org.apache.commons.math.linear.SparseRealMatrix.getColumnDimension()" proba="0.8571428571428571"></transition><transition target="sX" action="epsilon" proba="0.14285714285714285"></transition></state><state id="s6"><transition target="s5" action="org.apache.commons.math.linear.SparseRealMatrix.isSquare()" proba="0.3"></transition><transition target="s7" action="org.apache.commons.math.linear.SparseRealMatrix.getData()" proba="0.6"></transition><transition target="sX" action="epsilon" proba="0.1"></transition></state><state id="s7"><transition target="sX" action="epsilon" proba="1.0"></transition></state><state id="sX"><transition target="s0" action="epsilon" proba="1.0"></transition></state><state id="s8"><transition target="s8" action="org.apache.commons.math.linear.SparseRealMatrix.getRowVector(int)" proba="0.5"></transition><transition target="sX" action="epsilon" proba="0.5"></transition></state><state id="s9"><transition target="sX" action="epsilon" proba="0.5"></transition><transition target="s17" action="org.apache.commons.math.linear.SparseRealMatrix.hashCode()" proba="0.5"></transition></state><state id="s20"><transition target="sX" action="epsilon" proba="1.0"></transition></state><state id="s11"><transition target="s6" action="org.apache.commons.math.linear.SparseRealMatrix.getColumnDimension()" proba="0.8"></transition><transition target="sX" action="epsilon" proba="0.2"></transition></state><state id="s10"><transition target="s20" action="org.apache.commons.math.linear.SparseRealMatrix.operate(org.apache.commons.math.linear.RealVector)" proba="0.6666666666666666"></transition><transition target="s11" action="org.apache.commons.math.linear.SparseRealMatrix.getRowDimension()" proba="0.3333333333333333"></transition></state><state id="s21"><transition target="sX" action="epsilon" proba="1.0"></transition></state><state id="s13"><transition target="s13" action="org.apache.commons.math.linear.SparseRealMatrix.getColumnVector(int)" proba="0.5"></transition><transition target="sX" action="epsilon" proba="0.5"></transition></state><state id="s12"><transition target="sX" action="epsilon" proba="1.0"></transition></state><state id="s15"><transition target="sX" action="epsilon" proba="1.0"></transition></state><state id="s14"><transition target="s15" action="org.apache.commons.math.linear.SparseRealMatrix.getNorm()" proba="1.0"></transition></state><state id="s17"><transition target="s17" action="org.apache.commons.math.linear.SparseRealMatrix.hashCode()" proba="0.25"></transition><transition target="s18" action="org.apache.commons.math.linear.SparseRealMatrix.equals(java.lang.Object)" proba="0.75"></transition></state><state id="s16"><transition target="sX" action="epsilon" proba="1.0"></transition></state><state id="s19"><transition target="sX" action="epsilon" proba="1.0"></transition></state><state id="s18"><transition target="sX" action="epsilon" proba="1.0"></transition></state><state id="s0"><transition target="s3" action="org.apache.commons.math.linear.SparseRealMatrix.multiply(org.apache.commons.math.linear.RealMatrix)" proba="0.03278688524590164"></transition><transition target="s4" action="org.apache.commons.math.linear.SparseRealMatrix.transpose()" proba="0.03278688524590164"></transition><transition target="s9" action="org.apache.commons.math.linear.SparseRealMatrix.copy()" proba="0.03278688524590164"></transition><transition target="s14" action="org.apache.commons.math.linear.SparseRealMatrix.subtract(org.apache.commons.math.linear.RealMatrix)" proba="0.03278688524590164"></transition><transition target="s16" action="org.apache.commons.math.linear.SparseRealMatrix.preMultiply(org.apache.commons.math.linear.RealMatrix)" proba="0.01639344262295082"></transition><transition target="s18" action="org.apache.commons.math.linear.SparseRealMatrix.equals(java.lang.Object)" proba="0.01639344262295082"></transition><transition target="s1" action="org.apache.commons.math.linear.SparseRealMatrix.&lt;init&gt;(int,int)" proba="0.8360655737704918"></transition></state><state id="s1"><transition target="s11" action="org.apache.commons.math.linear.SparseRealMatrix.getRowDimension()" proba="0.0196078431372549"></transition><transition target="s12" action="org.apache.commons.math.linear.SparseRealMatrix.toString()" proba="0.0196078431372549"></transition><transition target="sX" action="epsilon" proba="0.0392156862745098"></transition><transition target="s2" action="org.apache.commons.math.linear.SparseRealMatrix.setEntry(int,int,double)" proba="0.9215686274509803"></transition></state><state id="s2"><transition target="s5" action="org.apache.commons.math.linear.SparseRealMatrix.isSquare()" proba="0.0084985835694051"></transition><transition target="sX" action="epsilon" proba="0.08498583569405099"></transition><transition target="s8" action="org.apache.commons.math.linear.SparseRealMatrix.getRowVector(int)" proba="0.0028328611898017"></transition><transition target="s11" action="org.apache.commons.math.linear.SparseRealMatrix.getRowDimension()" proba="0.0056657223796034"></transition><transition target="s10" action="org.apache.commons.math.linear.SparseRealMatrix.operate(double[])" proba="0.0084985835694051"></transition><transition target="s21" action="org.apache.commons.math.linear.SparseRealMatrix.preMultiply(double[])" proba="0.0028328611898017"></transition><transition target="s13" action="org.apache.commons.math.linear.SparseRealMatrix.getColumnVector(int)" proba="0.0028328611898017"></transition><transition target="s12" action="org.apache.commons.math.linear.SparseRealMatrix.toString()" proba="0.0028328611898017"></transition><transition target="s15" action="org.apache.commons.math.linear.SparseRealMatrix.getNorm()" proba="0.0056657223796034"></transition><transition target="s17" action="org.apache.commons.math.linear.SparseRealMatrix.hashCode()" proba="0.0028328611898017"></transition><transition target="s19" action="org.apache.commons.math.linear.SparseRealMatrix.setSubMatrix(double[][],int,int)" proba="0.0028328611898017"></transition><transition target="s18" action="org.apache.commons.math.linear.SparseRealMatrix.equals(java.lang.Object)" proba="0.0028328611898017"></transition><transition target="s2" action="org.apache.commons.math.linear.SparseRealMatrix.setEntry(int,int,double)" proba="0.8668555240793201"></transition></state></states></ts>