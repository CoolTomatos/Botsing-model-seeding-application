<?xml version="1.0"?><ts><start>s0</start><states><state id="s3"><transition target="s4" action="org.apache.commons.math.ode.nonstiff.RungeKuttaStepInterpolator.reinitialize(org.apache.commons.math.ode.FirstOrderDifferentialEquations,double[],double[][],boolean)" proba="1.0"></transition></state><state id="s4"><transition target="sX" action="epsilon" proba="1.0"></transition></state><state id="s5"><transition target="sX" action="epsilon" proba="1.0"></transition></state><state id="sX"><transition target="s0" action="epsilon" proba="1.0"></transition></state><state id="s0"><transition target="s3" action="org.apache.commons.math.ode.nonstiff.RungeKuttaStepInterpolator.copy()" proba="0.25"></transition><transition target="s4" action="org.apache.commons.math.ode.nonstiff.RungeKuttaStepInterpolator.reinitialize(org.apache.commons.math.ode.FirstOrderDifferentialEquations,double[],double[][],boolean)" proba="0.125"></transition><transition target="s5" action="org.apache.commons.math.ode.nonstiff.RungeKuttaStepInterpolator.storeTime(double)" proba="0.125"></transition><transition target="s1" action="org.apache.commons.math.ode.nonstiff.RungeKuttaStepInterpolator.&lt;init&gt;()" proba="0.25"></transition><transition target="s2" action="org.apache.commons.math.ode.nonstiff.RungeKuttaStepInterpolator.&lt;init&gt;(org.apache.commons.math.ode.nonstiff.RungeKuttaStepInterpolator)" proba="0.25"></transition></state><state id="s1"><transition target="sX" action="epsilon" proba="1.0"></transition></state><state id="s2"><transition target="sX" action="epsilon" proba="1.0"></transition></state></states></ts>