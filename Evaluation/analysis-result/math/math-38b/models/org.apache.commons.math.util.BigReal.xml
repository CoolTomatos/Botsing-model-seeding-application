<?xml version="1.0"?><ts><start>s0</start><states><state id="s3"><transition target="s4" action="org.apache.commons.math.util.BigReal.add(org.apache.commons.math.util.BigReal)" proba="0.08333333333333333"></transition><transition target="s11" action="org.apache.commons.math.util.BigReal.divide(org.apache.commons.math.util.BigReal)" proba="0.08333333333333333"></transition><transition target="s6" action="org.apache.commons.math.util.BigReal.subtract(org.apache.commons.math.util.BigReal)" proba="0.16666666666666666"></transition><transition target="s10" action="org.apache.commons.math.util.BigReal.multiply(org.apache.commons.math.util.BigReal)" proba="0.08333333333333333"></transition><transition target="s13" action="org.apache.commons.math.util.BigReal.negate()" proba="0.16666666666666666"></transition><transition target="sX" action="epsilon" proba="0.25"></transition><transition target="s8" action="org.apache.commons.math.util.BigReal.getScale()" proba="0.08333333333333333"></transition><transition target="s14" action="org.apache.commons.math.util.BigReal.multiply(int)" proba="0.08333333333333333"></transition></state><state id="s4"><transition target="s5" action="org.apache.commons.math.util.BigReal.doubleValue()" proba="0.3333333333333333"></transition><transition target="s13" action="org.apache.commons.math.util.BigReal.negate()" proba="0.3333333333333333"></transition><transition target="sX" action="epsilon" proba="0.3333333333333333"></transition></state><state id="s5"><transition target="s5" action="org.apache.commons.math.util.BigReal.doubleValue()" proba="0.14285714285714285"></transition><transition target="sX" action="epsilon" proba="0.8571428571428571"></transition></state><state id="s6"><transition target="s5" action="org.apache.commons.math.util.BigReal.doubleValue()" proba="0.3333333333333333"></transition><transition target="s6" action="org.apache.commons.math.util.BigReal.subtract(org.apache.commons.math.util.BigReal)" proba="0.3333333333333333"></transition><transition target="sX" action="epsilon" proba="0.3333333333333333"></transition></state><state id="s7"><transition target="s7" action="org.apache.commons.math.util.BigReal.compareTo(org.apache.commons.math.util.BigReal)" proba="0.5"></transition><transition target="sX" action="epsilon" proba="0.5"></transition></state><state id="sX"><transition target="s0" action="epsilon" proba="1.0"></transition></state><state id="s8"><transition target="s9" action="org.apache.commons.math.util.BigReal.reciprocal()" proba="1.0"></transition></state><state id="s9"><transition target="s10" action="org.apache.commons.math.util.BigReal.multiply(org.apache.commons.math.util.BigReal)" proba="1.0"></transition></state><state id="s11"><transition target="s5" action="org.apache.commons.math.util.BigReal.doubleValue()" proba="1.0"></transition></state><state id="s10"><transition target="s5" action="org.apache.commons.math.util.BigReal.doubleValue()" proba="0.3333333333333333"></transition><transition target="sX" action="epsilon" proba="0.6666666666666666"></transition></state><state id="s13"><transition target="s4" action="org.apache.commons.math.util.BigReal.add(org.apache.commons.math.util.BigReal)" proba="0.6666666666666666"></transition><transition target="sX" action="epsilon" proba="0.3333333333333333"></transition></state><state id="s12"><transition target="sX" action="epsilon" proba="0.5"></transition><transition target="s2" action="org.apache.commons.math.util.BigReal.equals(java.lang.Object)" proba="0.5"></transition></state><state id="s14"><transition target="s5" action="org.apache.commons.math.util.BigReal.doubleValue()" proba="1.0"></transition></state><state id="s0"><transition target="s3" action="org.apache.commons.math.util.BigReal.&lt;init&gt;(java.lang.String)" proba="0.6"></transition><transition target="s5" action="org.apache.commons.math.util.BigReal.doubleValue()" proba="0.05"></transition><transition target="s10" action="org.apache.commons.math.util.BigReal.multiply(org.apache.commons.math.util.BigReal)" proba="0.05"></transition><transition target="s1" action="org.apache.commons.math.util.BigReal.&lt;init&gt;(double)" proba="0.3"></transition></state><state id="s1"><transition target="s7" action="org.apache.commons.math.util.BigReal.compareTo(org.apache.commons.math.util.BigReal)" proba="0.3333333333333333"></transition><transition target="sX" action="epsilon" proba="0.16666666666666666"></transition><transition target="s12" action="org.apache.commons.math.util.BigReal.hashCode()" proba="0.16666666666666666"></transition><transition target="s2" action="org.apache.commons.math.util.BigReal.equals(java.lang.Object)" proba="0.3333333333333333"></transition></state><state id="s2"><transition target="sX" action="epsilon" proba="0.2857142857142857"></transition><transition target="s12" action="org.apache.commons.math.util.BigReal.hashCode()" proba="0.14285714285714285"></transition><transition target="s2" action="org.apache.commons.math.util.BigReal.equals(java.lang.Object)" proba="0.5714285714285714"></transition></state></states></ts>