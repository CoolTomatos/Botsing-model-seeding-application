<?xml version="1.0"?><ts><start>s0</start><states><state id="s3"><transition target="s4" action="org.apache.commons.math.optimization.general.GaussNewtonOptimizer.getRMS()" proba="0.65"></transition><transition target="sX" action="epsilon" proba="0.35"></transition></state><state id="s4"><transition target="s3" action="org.apache.commons.math.optimization.general.GaussNewtonOptimizer.optimize(int,org.apache.commons.math.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" proba="0.23076923076923078"></transition><transition target="sX" action="epsilon" proba="0.7692307692307693"></transition></state><state id="s5"><transition target="sX" action="epsilon" proba="1.0"></transition></state><state id="sX"><transition target="s0" action="epsilon" proba="1.0"></transition></state><state id="s0"><transition target="s5" action="org.apache.commons.math.optimization.general.GaussNewtonOptimizer.&lt;init&gt;(boolean)" proba="0.05"></transition><transition target="s1" action="org.apache.commons.math.optimization.general.GaussNewtonOptimizer.&lt;init&gt;(boolean,org.apache.commons.math.optimization.ConvergenceChecker)" proba="0.1"></transition><transition target="s2" action="org.apache.commons.math.optimization.general.GaussNewtonOptimizer.&lt;init&gt;(org.apache.commons.math.optimization.ConvergenceChecker)" proba="0.85"></transition></state><state id="s1"><transition target="sX" action="epsilon" proba="1.0"></transition></state><state id="s2"><transition target="s3" action="org.apache.commons.math.optimization.general.GaussNewtonOptimizer.optimize(int,org.apache.commons.math.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" proba="1.0"></transition></state></states></ts>