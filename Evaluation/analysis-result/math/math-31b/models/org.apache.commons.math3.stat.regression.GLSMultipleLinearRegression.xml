<?xml version="1.0"?><ts><start>s0</start><states><state id="s3"><transition target="sX" action="epsilon" proba="1.0"></transition></state><state id="s4"><transition target="s5" action="org.apache.commons.math3.stat.regression.GLSMultipleLinearRegression.newCovarianceData(double[][])" proba="1.0"></transition></state><state id="s5"><transition target="s6" action="org.apache.commons.math3.stat.regression.GLSMultipleLinearRegression.newYSampleData(double[])" proba="0.5"></transition><transition target="s7" action="org.apache.commons.math3.stat.regression.GLSMultipleLinearRegression.calculateBeta()" proba="0.5"></transition></state><state id="s6"><transition target="s7" action="org.apache.commons.math3.stat.regression.GLSMultipleLinearRegression.calculateBeta()" proba="0.5"></transition><transition target="s9" action="org.apache.commons.math3.stat.regression.GLSMultipleLinearRegression.getX()" proba="0.5"></transition></state><state id="s7"><transition target="sX" action="epsilon" proba="0.5"></transition><transition target="s8" action="org.apache.commons.math3.stat.regression.GLSMultipleLinearRegression.toArray()" proba="0.5"></transition></state><state id="sX"><transition target="s0" action="epsilon" proba="1.0"></transition></state><state id="s8"><transition target="sX" action="epsilon" proba="1.0"></transition></state><state id="s9"><transition target="s11" action="org.apache.commons.math3.stat.regression.GLSMultipleLinearRegression.getY()" proba="0.5"></transition><transition target="s10" action="org.apache.commons.math3.stat.regression.GLSMultipleLinearRegression.copy()" proba="0.5"></transition></state><state id="s11"><transition target="s10" action="org.apache.commons.math3.stat.regression.GLSMultipleLinearRegression.copy()" proba="0.5"></transition><transition target="s12" action="org.apache.commons.math3.stat.regression.GLSMultipleLinearRegression.getOmegaInverse()" proba="0.5"></transition></state><state id="s10"><transition target="s11" action="org.apache.commons.math3.stat.regression.GLSMultipleLinearRegression.getY()" proba="0.5"></transition><transition target="s12" action="org.apache.commons.math3.stat.regression.GLSMultipleLinearRegression.getOmegaInverse()" proba="0.5"></transition></state><state id="s13"><transition target="s6" action="org.apache.commons.math3.stat.regression.GLSMultipleLinearRegression.newYSampleData(double[])" proba="1.0"></transition></state><state id="s12"><transition target="s13" action="org.apache.commons.math3.stat.regression.GLSMultipleLinearRegression.newXSampleData(double[][])" proba="0.5"></transition><transition target="sX" action="epsilon" proba="0.5"></transition></state><state id="s0"><transition target="s1" action="org.apache.commons.math3.stat.regression.GLSMultipleLinearRegression.&lt;init&gt;()" proba="1.0"></transition></state><state id="s1"><transition target="s4" action="org.apache.commons.math3.stat.regression.GLSMultipleLinearRegression.newSampleData(double[],int,int)" proba="0.4"></transition><transition target="s2" action="org.apache.commons.math3.stat.regression.GLSMultipleLinearRegression.newSampleData(double[],double[][],double[][])" proba="0.6"></transition></state><state id="s2"><transition target="s3" action="org.apache.commons.math3.stat.regression.GLSMultipleLinearRegression.calculateYVariance()" proba="0.3333333333333333"></transition><transition target="sX" action="epsilon" proba="0.3333333333333333"></transition><transition target="s9" action="org.apache.commons.math3.stat.regression.GLSMultipleLinearRegression.getX()" proba="0.3333333333333333"></transition></state></states></ts>