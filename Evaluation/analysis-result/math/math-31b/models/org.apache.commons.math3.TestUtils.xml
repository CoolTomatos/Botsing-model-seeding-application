<?xml version="1.0"?><ts><start>s0</start><states><state id="sX"><transition target="s0" action="epsilon" proba="1.0"></transition></state><state id="s11"><transition target="s4" action="org.apache.commons.math3.TestUtils.assertEquals(double,double,double)" proba="0.05"></transition><transition target="s11" action="org.apache.commons.math3.TestUtils.assertEquals(java.lang.String,double,double,double)" proba="0.55"></transition><transition target="sX" action="epsilon" proba="0.4"></transition></state><state id="s10"><transition target="s8" action="org.apache.commons.math3.TestUtils.assertChiSquareAccept(double[],long[],double)" proba="1.0"></transition></state><state id="s13"><transition target="s14" action="org.apache.commons.math3.TestUtils.assertChiSquareAccept(int[],double[],long[],double)" proba="1.0"></transition></state><state id="s12"><transition target="sX" action="epsilon" proba="1.0"></transition></state><state id="s15"><transition target="s7" action="org.apache.commons.math3.TestUtils.assertEquals(org.apache.commons.math3.complex.Complex,org.apache.commons.math3.complex.Complex,double)" proba="0.013793103448275862"></transition><transition target="sX" action="epsilon" proba="0.12413793103448276"></transition><transition target="s15" action="org.apache.commons.math3.TestUtils.assertSame(org.apache.commons.math3.complex.Complex,org.apache.commons.math3.complex.Complex)" proba="0.8620689655172413"></transition></state><state id="s14"><transition target="sX" action="epsilon" proba="1.0"></transition></state><state id="s17"><transition target="sX" action="epsilon" proba="0.6"></transition><transition target="s17" action="org.apache.commons.math3.TestUtils.sumSquareDev(double[],double)" proba="0.4"></transition></state><state id="s16"><transition target="sX" action="epsilon" proba="0.5714285714285714"></transition><transition target="s16" action="org.apache.commons.math3.TestUtils.assertEquals(org.apache.commons.math3.FieldElement[],org.apache.commons.math3.FieldElement[])" proba="0.42857142857142855"></transition></state><state id="s19"><transition target="s20" action="org.apache.commons.math3.TestUtils.makeDensityTestValues()" proba="1.0"></transition></state><state id="s18"><transition target="s19" action="org.apache.commons.math3.TestUtils.makeDensityTestPoints()" proba="1.0"></transition></state><state id="s0"><transition target="s3" action="org.apache.commons.math3.TestUtils.assertEquals(double[],double[],double)" proba="0.1510204081632653"></transition><transition target="s4" action="org.apache.commons.math3.TestUtils.assertEquals(double,double,double)" proba="0.17959183673469387"></transition><transition target="s5" action="org.apache.commons.math3.TestUtils.checkSerializedEquality(java.lang.Object)" proba="0.0163265306122449"></transition><transition target="s6" action="org.apache.commons.math3.TestUtils.assertEquals(java.lang.String,org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealMatrix,double)" proba="0.07755102040816327"></transition><transition target="s7" action="org.apache.commons.math3.TestUtils.assertEquals(org.apache.commons.math3.complex.Complex,org.apache.commons.math3.complex.Complex,double)" proba="0.09387755102040816"></transition><transition target="s8" action="org.apache.commons.math3.TestUtils.assertChiSquareAccept(double[],long[],double)" proba="0.0326530612244898"></transition><transition target="s9" action="org.apache.commons.math3.TestUtils.getDistributionQuartiles(org.apache.commons.math3.distribution.RealDistribution)" proba="0.036734693877551024"></transition><transition target="s11" action="org.apache.commons.math3.TestUtils.assertEquals(java.lang.String,double,double,double)" proba="0.0326530612244898"></transition><transition target="s22" action="org.apache.commons.math3.TestUtils.assertRelativelyEquals(double,double,double)" proba="0.012244897959183673"></transition><transition target="s21" action="org.apache.commons.math3.TestUtils.assertEquals(java.lang.String,double[],double[],double)" proba="0.012244897959183673"></transition><transition target="s13" action="org.apache.commons.math3.TestUtils.eliminateZeroMassPoints(int[],double[])" proba="0.02040816326530612"></transition><transition target="s12" action="org.apache.commons.math3.TestUtils.assertSame(double,double)" proba="0.00816326530612245"></transition><transition target="s23" action="org.apache.commons.math3.TestUtils.fromString(java.lang.String)" proba="0.004081632653061225"></transition><transition target="s15" action="org.apache.commons.math3.TestUtils.assertSame(org.apache.commons.math3.complex.Complex,org.apache.commons.math3.complex.Complex)" proba="0.08163265306122448"></transition><transition target="s26" action="org.apache.commons.math3.TestUtils.assertRelativelyEquals(java.lang.String,double,double,double)" proba="0.004081632653061225"></transition><transition target="s17" action="org.apache.commons.math3.TestUtils.sumSquareDev(double[],double)" proba="0.012244897959183673"></transition><transition target="s16" action="org.apache.commons.math3.TestUtils.assertEquals(org.apache.commons.math3.FieldElement[],org.apache.commons.math3.FieldElement[])" proba="0.0326530612244898"></transition><transition target="s18" action="org.apache.commons.math3.TestUtils.&lt;init&gt;()" proba="0.004081632653061225"></transition><transition target="s1" action="org.apache.commons.math3.TestUtils.assertEquals(org.apache.commons.math3.linear.FieldMatrix,org.apache.commons.math3.linear.FieldMatrix)" proba="0.06938775510204082"></transition><transition target="s2" action="org.apache.commons.math3.TestUtils.serializeAndRecover(java.lang.Object)" proba="0.11836734693877551"></transition></state><state id="s1"><transition target="sX" action="epsilon" proba="0.3469387755102041"></transition><transition target="s1" action="org.apache.commons.math3.TestUtils.assertEquals(org.apache.commons.math3.linear.FieldMatrix,org.apache.commons.math3.linear.FieldMatrix)" proba="0.6530612244897959"></transition></state><state id="s2"><transition target="s5" action="org.apache.commons.math3.TestUtils.checkSerializedEquality(java.lang.Object)" proba="0.07317073170731707"></transition><transition target="sX" action="epsilon" proba="0.7804878048780488"></transition><transition target="s2" action="org.apache.commons.math3.TestUtils.serializeAndRecover(java.lang.Object)" proba="0.14634146341463414"></transition></state><state id="s3"><transition target="s3" action="org.apache.commons.math3.TestUtils.assertEquals(double[],double[],double)" proba="0.6859504132231405"></transition><transition target="s4" action="org.apache.commons.math3.TestUtils.assertEquals(double,double,double)" proba="0.10743801652892562"></transition><transition target="sX" action="epsilon" proba="0.2066115702479339"></transition></state><state id="s4"><transition target="s3" action="org.apache.commons.math3.TestUtils.assertEquals(double[],double[],double)" proba="0.006711409395973154"></transition><transition target="s4" action="org.apache.commons.math3.TestUtils.assertEquals(double,double,double)" proba="0.610738255033557"></transition><transition target="s11" action="org.apache.commons.math3.TestUtils.assertEquals(java.lang.String,double,double,double)" proba="0.006711409395973154"></transition><transition target="sX" action="epsilon" proba="0.37583892617449666"></transition></state><state id="s5"><transition target="sX" action="epsilon" proba="0.14285714285714285"></transition><transition target="s2" action="org.apache.commons.math3.TestUtils.serializeAndRecover(java.lang.Object)" proba="0.8571428571428571"></transition></state><state id="s6"><transition target="s6" action="org.apache.commons.math3.TestUtils.assertEquals(java.lang.String,org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealMatrix,double)" proba="0.5681818181818182"></transition><transition target="sX" action="epsilon" proba="0.4318181818181818"></transition></state><state id="s7"><transition target="s7" action="org.apache.commons.math3.TestUtils.assertEquals(org.apache.commons.math3.complex.Complex,org.apache.commons.math3.complex.Complex,double)" proba="0.5098039215686274"></transition><transition target="sX" action="epsilon" proba="0.49019607843137253"></transition></state><state id="s8"><transition target="sX" action="epsilon" proba="0.8947368421052632"></transition><transition target="s9" action="org.apache.commons.math3.TestUtils.getDistributionQuartiles(org.apache.commons.math3.distribution.RealDistribution)" proba="0.10526315789473684"></transition></state><state id="s9"><transition target="s10" action="org.apache.commons.math3.TestUtils.updateCounts(double,long[],double[])" proba="1.0"></transition></state><state id="s20"><transition target="sX" action="epsilon" proba="1.0"></transition></state><state id="s22"><transition target="sX" action="epsilon" proba="1.0"></transition></state><state id="s21"><transition target="s21" action="org.apache.commons.math3.TestUtils.assertEquals(java.lang.String,double[],double[],double)" proba="0.5"></transition><transition target="sX" action="epsilon" proba="0.5"></transition></state><state id="s24"><transition target="s25" action="org.apache.commons.math3.TestUtils.testSampling()" proba="1.0"></transition></state><state id="s23"><transition target="s24" action="org.apache.commons.math3.TestUtils.setUp()" proba="1.0"></transition></state><state id="s26"><transition target="sX" action="epsilon" proba="0.3333333333333333"></transition><transition target="s26" action="org.apache.commons.math3.TestUtils.assertRelativelyEquals(java.lang.String,double,double,double)" proba="0.6666666666666666"></transition></state><state id="s25"><transition target="s19" action="org.apache.commons.math3.TestUtils.makeDensityTestPoints()" proba="1.0"></transition></state></states></ts>