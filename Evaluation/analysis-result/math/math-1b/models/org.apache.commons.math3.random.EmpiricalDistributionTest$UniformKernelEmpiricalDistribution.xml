<?xml version="1.0"?><ts><start>s0</start><states><state id="s3"><transition target="s4" action="org.apache.commons.math3.random.EmpiricalDistributionTest$UniformKernelEmpiricalDistribution.cumulativeProbability(double)" proba="1.0"></transition></state><state id="s4"><transition target="s4" action="org.apache.commons.math3.random.EmpiricalDistributionTest$UniformKernelEmpiricalDistribution.cumulativeProbability(double)" proba="0.8333333333333334"></transition><transition target="s5" action="org.apache.commons.math3.random.EmpiricalDistributionTest$UniformKernelEmpiricalDistribution.inverseCumulativeProbability(double)" proba="0.16666666666666666"></transition></state><state id="s5"><transition target="s5" action="org.apache.commons.math3.random.EmpiricalDistributionTest$UniformKernelEmpiricalDistribution.inverseCumulativeProbability(double)" proba="0.8333333333333334"></transition><transition target="sX" action="epsilon" proba="0.16666666666666666"></transition></state><state id="sX"><transition target="s0" action="epsilon" proba="1.0"></transition></state><state id="s0"><transition target="s1" action="org.apache.commons.math3.random.EmpiricalDistributionTest$UniformKernelEmpiricalDistribution.&lt;init&gt;(org.apache.commons.math3.random.EmpiricalDistributionTest,int)" proba="1.0"></transition></state><state id="s1"><transition target="s2" action="org.apache.commons.math3.random.EmpiricalDistributionTest$UniformKernelEmpiricalDistribution.load(double[])" proba="1.0"></transition></state><state id="s2"><transition target="s3" action="org.apache.commons.math3.random.EmpiricalDistributionTest$UniformKernelEmpiricalDistribution.sample()" proba="1.0"></transition></state></states></ts>