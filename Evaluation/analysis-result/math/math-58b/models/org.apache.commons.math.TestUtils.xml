<?xml version="1.0"?><ts><start>s0</start><states><state id="s3"><transition target="s4" action="org.apache.commons.math.TestUtils.updateCounts(double,long[],double[])" proba="1.0"></transition></state><state id="s4"><transition target="s5" action="org.apache.commons.math.TestUtils.assertChiSquareAccept(double[],long[],double)" proba="1.0"></transition></state><state id="s5"><transition target="sX" action="epsilon" proba="1.0"></transition></state><state id="s6"><transition target="s6" action="org.apache.commons.math.TestUtils.assertEquals(double,double,double)" proba="0.6818181818181818"></transition><transition target="s13" action="org.apache.commons.math.TestUtils.assertEquals(java.lang.String,double,double,double)" proba="0.015151515151515152"></transition><transition target="sX" action="epsilon" proba="0.30303030303030304"></transition></state><state id="s7"><transition target="s11" action="org.apache.commons.math.TestUtils.assertEquals(org.apache.commons.math.complex.Complex,org.apache.commons.math.complex.Complex,double)" proba="0.007751937984496124"></transition><transition target="s7" action="org.apache.commons.math.TestUtils.assertSame(org.apache.commons.math.complex.Complex,org.apache.commons.math.complex.Complex)" proba="0.8604651162790697"></transition><transition target="sX" action="epsilon" proba="0.13178294573643412"></transition></state><state id="sX"><transition target="s0" action="epsilon" proba="1.0"></transition></state><state id="s8"><transition target="s9" action="org.apache.commons.math.TestUtils.assertChiSquareAccept(int[],double[],long[],double)" proba="1.0"></transition></state><state id="s9"><transition target="sX" action="epsilon" proba="1.0"></transition></state><state id="s20"><transition target="sX" action="epsilon" proba="1.0"></transition></state><state id="s11"><transition target="s11" action="org.apache.commons.math.TestUtils.assertEquals(org.apache.commons.math.complex.Complex,org.apache.commons.math.complex.Complex,double)" proba="0.45"></transition><transition target="sX" action="epsilon" proba="0.55"></transition></state><state id="s10"><transition target="s10" action="org.apache.commons.math.TestUtils.assertEquals(java.lang.String,org.apache.commons.math.linear.RealMatrix,org.apache.commons.math.linear.RealMatrix,double)" proba="0.5151515151515151"></transition><transition target="sX" action="epsilon" proba="0.48484848484848486"></transition></state><state id="s13"><transition target="s13" action="org.apache.commons.math.TestUtils.assertEquals(java.lang.String,double,double,double)" proba="0.6111111111111112"></transition><transition target="sX" action="epsilon" proba="0.3888888888888889"></transition></state><state id="s12"><transition target="s12" action="org.apache.commons.math.TestUtils.assertEquals(double[],double[],double)" proba="0.7586206896551724"></transition><transition target="sX" action="epsilon" proba="0.2413793103448276"></transition></state><state id="s15"><transition target="sX" action="epsilon" proba="1.0"></transition></state><state id="s14"><transition target="sX" action="epsilon" proba="0.4"></transition><transition target="s14" action="org.apache.commons.math.TestUtils.assertEquals(org.apache.commons.math.linear.FieldMatrix,org.apache.commons.math.linear.FieldMatrix)" proba="0.6"></transition></state><state id="s17"><transition target="sX" action="epsilon" proba="0.5714285714285714"></transition><transition target="s17" action="org.apache.commons.math.TestUtils.assertEquals(org.apache.commons.math.FieldElement[],org.apache.commons.math.FieldElement[])" proba="0.42857142857142855"></transition></state><state id="s16"><transition target="sX" action="epsilon" proba="0.6"></transition><transition target="s16" action="org.apache.commons.math.TestUtils.sumSquareDev(double[],double)" proba="0.4"></transition></state><state id="s19"><transition target="sX" action="epsilon" proba="0.3333333333333333"></transition><transition target="s19" action="org.apache.commons.math.TestUtils.assertRelativelyEquals(java.lang.String,double,double,double)" proba="0.6666666666666666"></transition></state><state id="s18"><transition target="sX" action="epsilon" proba="0.5"></transition><transition target="s18" action="org.apache.commons.math.TestUtils.assertEquals(java.lang.String,double[],double[],double)" proba="0.5"></transition></state><state id="s0"><transition target="s3" action="org.apache.commons.math.TestUtils.getDistributionQuartiles(org.apache.commons.math.distribution.ContinuousDistribution)" proba="0.043478260869565216"></transition><transition target="s6" action="org.apache.commons.math.TestUtils.assertEquals(double,double,double)" proba="0.11413043478260869"></transition><transition target="s7" action="org.apache.commons.math.TestUtils.assertSame(org.apache.commons.math.complex.Complex,org.apache.commons.math.complex.Complex)" proba="0.09782608695652174"></transition><transition target="s8" action="org.apache.commons.math.TestUtils.eliminateZeroMassPoints(int[],double[])" proba="0.02717391304347826"></transition><transition target="s20" action="org.apache.commons.math.TestUtils.assertSame(double,double)" proba="0.010869565217391304"></transition><transition target="s11" action="org.apache.commons.math.TestUtils.assertEquals(org.apache.commons.math.complex.Complex,org.apache.commons.math.complex.Complex,double)" proba="0.11413043478260869"></transition><transition target="s10" action="org.apache.commons.math.TestUtils.assertEquals(java.lang.String,org.apache.commons.math.linear.RealMatrix,org.apache.commons.math.linear.RealMatrix,double)" proba="0.08695652173913043"></transition><transition target="s13" action="org.apache.commons.math.TestUtils.assertEquals(java.lang.String,double,double,double)" proba="0.03260869565217391"></transition><transition target="s12" action="org.apache.commons.math.TestUtils.assertEquals(double[],double[],double)" proba="0.11413043478260869"></transition><transition target="s15" action="org.apache.commons.math.TestUtils.assertRelativelyEquals(double,double,double)" proba="0.016304347826086956"></transition><transition target="s14" action="org.apache.commons.math.TestUtils.assertEquals(org.apache.commons.math.linear.FieldMatrix,org.apache.commons.math.linear.FieldMatrix)" proba="0.08695652173913043"></transition><transition target="s17" action="org.apache.commons.math.TestUtils.assertEquals(org.apache.commons.math.FieldElement[],org.apache.commons.math.FieldElement[])" proba="0.043478260869565216"></transition><transition target="s16" action="org.apache.commons.math.TestUtils.sumSquareDev(double[],double)" proba="0.016304347826086956"></transition><transition target="s19" action="org.apache.commons.math.TestUtils.assertRelativelyEquals(java.lang.String,double,double,double)" proba="0.005434782608695652"></transition><transition target="s18" action="org.apache.commons.math.TestUtils.assertEquals(java.lang.String,double[],double[],double)" proba="0.016304347826086956"></transition><transition target="s1" action="org.apache.commons.math.TestUtils.checkSerializedEquality(java.lang.Object)" proba="0.021739130434782608"></transition><transition target="s2" action="org.apache.commons.math.TestUtils.serializeAndRecover(java.lang.Object)" proba="0.15217391304347827"></transition></state><state id="s1"><transition target="sX" action="epsilon" proba="0.14285714285714285"></transition><transition target="s2" action="org.apache.commons.math.TestUtils.serializeAndRecover(java.lang.Object)" proba="0.8571428571428571"></transition></state><state id="s2"><transition target="sX" action="epsilon" proba="0.775"></transition><transition target="s1" action="org.apache.commons.math.TestUtils.checkSerializedEquality(java.lang.Object)" proba="0.075"></transition><transition target="s2" action="org.apache.commons.math.TestUtils.serializeAndRecover(java.lang.Object)" proba="0.15"></transition></state></states></ts>