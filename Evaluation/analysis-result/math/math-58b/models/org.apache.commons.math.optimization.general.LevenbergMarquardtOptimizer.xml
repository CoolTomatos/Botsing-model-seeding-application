<?xml version="1.0"?><ts><start>s0</start><states><state id="s3"><transition target="s11" action="org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer.guessParametersErrors()" proba="0.058823529411764705"></transition><transition target="sX" action="epsilon" proba="0.7058823529411765"></transition><transition target="s12" action="org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer.getCovariances()" proba="0.11764705882352941"></transition><transition target="s2" action="org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer.optimize(int,org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction,double[],double[],double[])" proba="0.11764705882352941"></transition></state><state id="s4"><transition target="sX" action="epsilon" proba="0.9473684210526315"></transition><transition target="s2" action="org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer.optimize(int,org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction,double[],double[],double[])" proba="0.05263157894736842"></transition></state><state id="s5"><transition target="sX" action="epsilon" proba="0.5"></transition><transition target="s2" action="org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer.optimize(int,org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction,double[],double[],double[])" proba="0.5"></transition></state><state id="s6"><transition target="s7" action="org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer.setConvergenceChecker(org.apache.commons.math.optimization.ConvergenceChecker&lt;org.apache.commons.math.optimization.VectorialPointValuePair&gt;)" proba="1.0"></transition></state><state id="s7"><transition target="sX" action="epsilon" proba="1.0"></transition></state><state id="sX"><transition target="s0" action="epsilon" proba="1.0"></transition></state><state id="s8"><transition target="s2" action="org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer.optimize(int,org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction,double[],double[],double[])" proba="1.0"></transition></state><state id="s9"><transition target="s10" action="org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer.getJacobianEvaluations()" proba="1.0"></transition></state><state id="s11"><transition target="sX" action="epsilon" proba="0.6666666666666666"></transition><transition target="s2" action="org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer.optimize(int,org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction,double[],double[],double[])" proba="0.3333333333333333"></transition></state><state id="s10"><transition target="s3" action="org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer.getRMS()" proba="1.0"></transition></state><state id="s12"><transition target="s11" action="org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer.guessParametersErrors()" proba="0.6666666666666666"></transition><transition target="sX" action="epsilon" proba="0.3333333333333333"></transition></state><state id="s0"><transition target="s4" action="org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer.&lt;init&gt;(double,double,double)" proba="0.23170731707317074"></transition><transition target="s5" action="org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer.&lt;init&gt;(double,double,double,double,double)" proba="0.04878048780487805"></transition><transition target="s6" action="org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer.&lt;init&gt;(double,double)" proba="0.012195121951219513"></transition><transition target="s1" action="org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer.&lt;init&gt;()" proba="0.7073170731707317"></transition></state><state id="s1"><transition target="s3" action="org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer.getRMS()" proba="0.017241379310344827"></transition><transition target="sX" action="epsilon" proba="0.7413793103448276"></transition><transition target="s8" action="org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer.setConvergenceChecker(org.apache.commons.math.optimization.ConvergenceChecker)" proba="0.017241379310344827"></transition><transition target="s2" action="org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer.optimize(int,org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction,double[],double[],double[])" proba="0.22413793103448276"></transition></state><state id="s2"><transition target="s3" action="org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer.getRMS()" proba="0.6666666666666666"></transition><transition target="sX" action="epsilon" proba="0.14285714285714285"></transition><transition target="s12" action="org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer.getCovariances()" proba="0.047619047619047616"></transition><transition target="s9" action="org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer.getEvaluations()" proba="0.09523809523809523"></transition><transition target="s2" action="org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer.optimize(int,org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction,double[],double[],double[])" proba="0.047619047619047616"></transition></state></states></ts>