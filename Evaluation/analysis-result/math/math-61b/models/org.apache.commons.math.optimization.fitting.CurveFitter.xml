<?xml version="1.0"?><ts><start>s0</start><states><state id="s3"><transition target="s4" action="org.apache.commons.math.optimization.fitting.CurveFitter.size()" proba="0.5"></transition><transition target="s5" action="org.apache.commons.math.optimization.fitting.CurveFitter.iterator()" proba="0.5"></transition></state><state id="s4"><transition target="s3" action="org.apache.commons.math.optimization.fitting.CurveFitter.access$000(org.apache.commons.math.optimization.fitting.CurveFitter)" proba="1.0"></transition></state><state id="s5"><transition target="sX" action="epsilon" proba="1.0"></transition></state><state id="s6"><transition target="s7" action="org.apache.commons.math.optimization.fitting.CurveFitter.fit(org.apache.commons.math.optimization.fitting.ParametricRealFunction,double[])" proba="0.4"></transition><transition target="s1" action="org.apache.commons.math.optimization.fitting.CurveFitter.addObservedPoint(double,double)" proba="0.6"></transition></state><state id="s7"><transition target="s7" action="org.apache.commons.math.optimization.fitting.CurveFitter.fit(org.apache.commons.math.optimization.fitting.ParametricRealFunction,double[])" proba="0.2"></transition><transition target="sX" action="epsilon" proba="0.8"></transition></state><state id="sX"><transition target="s0" action="epsilon" proba="1.0"></transition></state><state id="s8"><transition target="s7" action="org.apache.commons.math.optimization.fitting.CurveFitter.fit(org.apache.commons.math.optimization.fitting.ParametricRealFunction,double[])" proba="1.0"></transition></state><state id="s9"><transition target="sX" action="epsilon" proba="1.0"></transition></state><state id="s0"><transition target="s3" action="org.apache.commons.math.optimization.fitting.CurveFitter.access$000(org.apache.commons.math.optimization.fitting.CurveFitter)" proba="0.13333333333333333"></transition><transition target="s6" action="org.apache.commons.math.optimization.fitting.CurveFitter.&lt;init&gt;(org.apache.commons.math.optimization.DifferentiableMultivariateVectorialOptimizer)" proba="0.3333333333333333"></transition><transition target="s7" action="org.apache.commons.math.optimization.fitting.CurveFitter.fit(org.apache.commons.math.optimization.fitting.ParametricRealFunction,double[])" proba="0.06666666666666667"></transition><transition target="s8" action="org.apache.commons.math.optimization.fitting.CurveFitter.getObservations()" proba="0.13333333333333333"></transition><transition target="s9" action="org.apache.commons.math.optimization.fitting.CurveFitter.clearObservations()" proba="0.06666666666666667"></transition><transition target="s1" action="org.apache.commons.math.optimization.fitting.CurveFitter.addObservedPoint(double,double)" proba="0.06666666666666667"></transition><transition target="s2" action="org.apache.commons.math.optimization.fitting.CurveFitter.addObservedPoint(double,double,double)" proba="0.2"></transition></state><state id="s1"><transition target="s7" action="org.apache.commons.math.optimization.fitting.CurveFitter.fit(org.apache.commons.math.optimization.fitting.ParametricRealFunction,double[])" proba="0.2"></transition><transition target="sX" action="epsilon" proba="0.06666666666666667"></transition><transition target="s1" action="org.apache.commons.math.optimization.fitting.CurveFitter.addObservedPoint(double,double)" proba="0.7333333333333333"></transition></state><state id="s2"><transition target="sX" action="epsilon" proba="1.0"></transition></state></states></ts>