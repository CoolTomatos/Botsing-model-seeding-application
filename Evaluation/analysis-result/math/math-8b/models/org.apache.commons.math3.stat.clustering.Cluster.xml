<?xml version="1.0"?><ts><start>s0</start><states><state id="s3"><transition target="s4" action="org.apache.commons.math3.stat.clustering.Cluster.getCenter()" proba="1.0"></transition></state><state id="s4"><transition target="sX" action="epsilon" proba="0.2857142857142857"></transition><transition target="s2" action="org.apache.commons.math3.stat.clustering.Cluster.getPoints()" proba="0.7142857142857143"></transition></state><state id="s5"><transition target="sX" action="epsilon" proba="1.0"></transition></state><state id="s6"><transition target="sX" action="epsilon" proba="1.0"></transition></state><state id="s7"><transition target="sX" action="epsilon" proba="0.6"></transition><transition target="s2" action="org.apache.commons.math3.stat.clustering.Cluster.getPoints()" proba="0.4"></transition></state><state id="sX"><transition target="s0" action="epsilon" proba="1.0"></transition></state><state id="s8"><transition target="sX" action="epsilon" proba="1.0"></transition></state><state id="s9"><transition target="sX" action="epsilon" proba="0.3333333333333333"></transition><transition target="s2" action="org.apache.commons.math3.stat.clustering.Cluster.getPoints()" proba="0.6666666666666666"></transition></state><state id="s0"><transition target="s4" action="org.apache.commons.math3.stat.clustering.Cluster.getCenter()" proba="0.25"></transition><transition target="s8" action="org.apache.commons.math3.stat.clustering.Cluster.&lt;init&gt;(org.apache.commons.math3.stat.clustering.Clusterable)" proba="0.0625"></transition><transition target="s1" action="org.apache.commons.math3.stat.clustering.Cluster.addPoint(org.apache.commons.math3.stat.clustering.Clusterable)" proba="0.125"></transition><transition target="s2" action="org.apache.commons.math3.stat.clustering.Cluster.getPoints()" proba="0.5625"></transition></state><state id="s1"><transition target="sX" action="epsilon" proba="0.6666666666666666"></transition><transition target="s1" action="org.apache.commons.math3.stat.clustering.Cluster.addPoint(org.apache.commons.math3.stat.clustering.Clusterable)" proba="0.3333333333333333"></transition></state><state id="s2"><transition target="s3" action="org.apache.commons.math3.stat.clustering.Cluster.isEmpty()" proba="0.16666666666666666"></transition><transition target="s5" action="org.apache.commons.math3.stat.clustering.Cluster.iterator()" proba="0.1111111111111111"></transition><transition target="s6" action="org.apache.commons.math3.stat.clustering.Cluster.remove(int)" proba="0.05555555555555555"></transition><transition target="s7" action="org.apache.commons.math3.stat.clustering.Cluster.size()" proba="0.2777777777777778"></transition><transition target="sX" action="epsilon" proba="0.2222222222222222"></transition><transition target="s9" action="org.apache.commons.math3.stat.clustering.Cluster.containsAll(java.util.Collection)" proba="0.16666666666666666"></transition></state></states></ts>