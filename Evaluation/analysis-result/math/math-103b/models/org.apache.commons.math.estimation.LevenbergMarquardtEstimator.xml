<?xml version="1.0"?><ts><start>s0</start><states><state id="s3"><transition target="s3" action="org.apache.commons.math.estimation.LevenbergMarquardtEstimator.getRMS(org.apache.commons.math.estimation.EstimationProblem)" proba="0.05555555555555555"></transition><transition target="sX" action="epsilon" proba="0.8333333333333334"></transition><transition target="s2" action="org.apache.commons.math.estimation.LevenbergMarquardtEstimator.estimate(org.apache.commons.math.estimation.EstimationProblem)" proba="0.1111111111111111"></transition></state><state id="s4"><transition target="s5" action="org.apache.commons.math.estimation.LevenbergMarquardtEstimator.getJacobianEvaluations()" proba="1.0"></transition></state><state id="s5"><transition target="s3" action="org.apache.commons.math.estimation.LevenbergMarquardtEstimator.getRMS(org.apache.commons.math.estimation.EstimationProblem)" proba="1.0"></transition></state><state id="s6"><transition target="s7" action="org.apache.commons.math.estimation.LevenbergMarquardtEstimator.setCostRelativeTolerance(double)" proba="1.0"></transition></state><state id="s7"><transition target="s8" action="org.apache.commons.math.estimation.LevenbergMarquardtEstimator.setParRelativeTolerance(double)" proba="1.0"></transition></state><state id="sX"><transition target="s0" action="epsilon" proba="1.0"></transition></state><state id="s8"><transition target="s9" action="org.apache.commons.math.estimation.LevenbergMarquardtEstimator.setOrthoTolerance(double)" proba="1.0"></transition></state><state id="s9"><transition target="s3" action="org.apache.commons.math.estimation.LevenbergMarquardtEstimator.getRMS(org.apache.commons.math.estimation.EstimationProblem)" proba="1.0"></transition></state><state id="s0"><transition target="s1" action="org.apache.commons.math.estimation.LevenbergMarquardtEstimator.&lt;init&gt;()" proba="1.0"></transition></state><state id="s1"><transition target="s3" action="org.apache.commons.math.estimation.LevenbergMarquardtEstimator.getRMS(org.apache.commons.math.estimation.EstimationProblem)" proba="0.06666666666666667"></transition><transition target="s6" action="org.apache.commons.math.estimation.LevenbergMarquardtEstimator.setMaxCostEval(int)" proba="0.06666666666666667"></transition><transition target="s2" action="org.apache.commons.math.estimation.LevenbergMarquardtEstimator.estimate(org.apache.commons.math.estimation.EstimationProblem)" proba="0.8666666666666667"></transition></state><state id="s2"><transition target="s3" action="org.apache.commons.math.estimation.LevenbergMarquardtEstimator.getRMS(org.apache.commons.math.estimation.EstimationProblem)" proba="0.8666666666666667"></transition><transition target="s4" action="org.apache.commons.math.estimation.LevenbergMarquardtEstimator.getCostEvaluations()" proba="0.13333333333333333"></transition></state></states></ts>