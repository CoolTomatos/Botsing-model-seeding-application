<?xml version="1.0"?><ts><start>s0</start><states><state id="s3"><transition target="s3" action="org.apache.commons.math.TestUtils.assertEquals(double,double,double)" proba="0.5822784810126582"></transition><transition target="sX" action="epsilon" proba="0.35443037974683544"></transition><transition target="s2" action="org.apache.commons.math.TestUtils.assertEquals(java.lang.String,double,double,double)" proba="0.06329113924050633"></transition></state><state id="s4"><transition target="s4" action="org.apache.commons.math.TestUtils.assertEquals(org.apache.commons.math.complex.Complex,org.apache.commons.math.complex.Complex,double)" proba="0.45"></transition><transition target="sX" action="epsilon" proba="0.55"></transition></state><state id="s5"><transition target="s5" action="org.apache.commons.math.TestUtils.serializeAndRecover(java.lang.Object)" proba="0.3333333333333333"></transition><transition target="s7" action="org.apache.commons.math.TestUtils.checkSerializedEquality(java.lang.Object)" proba="0.13333333333333333"></transition><transition target="sX" action="epsilon" proba="0.5333333333333333"></transition></state><state id="s6"><transition target="s6" action="org.apache.commons.math.TestUtils.assertContains(org.apache.commons.math.complex.Complex[],org.apache.commons.math.complex.Complex,double)" proba="0.8"></transition><transition target="sX" action="epsilon" proba="0.2"></transition></state><state id="s7"><transition target="s5" action="org.apache.commons.math.TestUtils.serializeAndRecover(java.lang.Object)" proba="0.8"></transition><transition target="sX" action="epsilon" proba="0.2"></transition></state><state id="sX"><transition target="s0" action="epsilon" proba="1.0"></transition></state><state id="s8"><transition target="s8" action="org.apache.commons.math.TestUtils.assertEquals(double[],double[],double)" proba="0.7333333333333333"></transition><transition target="sX" action="epsilon" proba="0.26666666666666666"></transition></state><state id="s9"><transition target="sX" action="epsilon" proba="0.3333333333333333"></transition><transition target="s9" action="org.apache.commons.math.TestUtils.assertRelativelyEquals(double,double,double)" proba="0.6666666666666666"></transition></state><state id="s0"><transition target="s3" action="org.apache.commons.math.TestUtils.assertEquals(double,double,double)" proba="0.30851063829787234"></transition><transition target="s4" action="org.apache.commons.math.TestUtils.assertEquals(org.apache.commons.math.complex.Complex,org.apache.commons.math.complex.Complex,double)" proba="0.22340425531914893"></transition><transition target="s5" action="org.apache.commons.math.TestUtils.serializeAndRecover(java.lang.Object)" proba="0.06382978723404255"></transition><transition target="s6" action="org.apache.commons.math.TestUtils.assertContains(org.apache.commons.math.complex.Complex[],org.apache.commons.math.complex.Complex,double)" proba="0.010638297872340425"></transition><transition target="s7" action="org.apache.commons.math.TestUtils.checkSerializedEquality(java.lang.Object)" proba="0.031914893617021274"></transition><transition target="s8" action="org.apache.commons.math.TestUtils.assertEquals(double[],double[],double)" proba="0.0425531914893617"></transition><transition target="s9" action="org.apache.commons.math.TestUtils.assertRelativelyEquals(double,double,double)" proba="0.010638297872340425"></transition><transition target="s1" action="org.apache.commons.math.TestUtils.assertSame(org.apache.commons.math.complex.Complex,org.apache.commons.math.complex.Complex)" proba="0.19148936170212766"></transition><transition target="s2" action="org.apache.commons.math.TestUtils.assertEquals(java.lang.String,double,double,double)" proba="0.11702127659574468"></transition></state><state id="s1"><transition target="s4" action="org.apache.commons.math.TestUtils.assertEquals(org.apache.commons.math.complex.Complex,org.apache.commons.math.complex.Complex,double)" proba="0.007751937984496124"></transition><transition target="sX" action="epsilon" proba="0.13178294573643412"></transition><transition target="s1" action="org.apache.commons.math.TestUtils.assertSame(org.apache.commons.math.complex.Complex,org.apache.commons.math.complex.Complex)" proba="0.8604651162790697"></transition></state><state id="s2"><transition target="s3" action="org.apache.commons.math.TestUtils.assertEquals(double,double,double)" proba="0.06349206349206349"></transition><transition target="sX" action="epsilon" proba="0.19047619047619047"></transition><transition target="s2" action="org.apache.commons.math.TestUtils.assertEquals(java.lang.String,double,double,double)" proba="0.746031746031746"></transition></state></states></ts>