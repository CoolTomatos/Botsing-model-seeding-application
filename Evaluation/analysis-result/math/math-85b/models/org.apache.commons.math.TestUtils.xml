<?xml version="1.0"?><ts><start>s0</start><states><state id="s3"><transition target="s3" action="org.apache.commons.math.TestUtils.assertEquals(double[],double[],double)" proba="0.7580645161290323"></transition><transition target="sX" action="epsilon" proba="0.24193548387096775"></transition></state><state id="s4"><transition target="s4" action="org.apache.commons.math.TestUtils.assertEquals(java.lang.String,org.apache.commons.math.linear.RealMatrix,org.apache.commons.math.linear.RealMatrix,double)" proba="0.5416666666666666"></transition><transition target="sX" action="epsilon" proba="0.4583333333333333"></transition></state><state id="s5"><transition target="s5" action="org.apache.commons.math.TestUtils.serializeAndRecover(java.lang.Object)" proba="0.1935483870967742"></transition><transition target="s10" action="org.apache.commons.math.TestUtils.checkSerializedEquality(java.lang.Object)" proba="0.0967741935483871"></transition><transition target="sX" action="epsilon" proba="0.7096774193548387"></transition></state><state id="s6"><transition target="s6" action="org.apache.commons.math.TestUtils.assertEquals(org.apache.commons.math.FieldElement[],org.apache.commons.math.FieldElement[])" proba="0.42857142857142855"></transition><transition target="sX" action="epsilon" proba="0.5714285714285714"></transition></state><state id="s7"><transition target="s7" action="org.apache.commons.math.TestUtils.assertEquals(org.apache.commons.math.linear.FieldMatrix,org.apache.commons.math.linear.FieldMatrix)" proba="0.6"></transition><transition target="sX" action="epsilon" proba="0.4"></transition></state><state id="sX"><transition target="s0" action="epsilon" proba="1.0"></transition></state><state id="s8"><transition target="s8" action="org.apache.commons.math.TestUtils.assertEquals(java.lang.String,double,double,double)" proba="0.6470588235294118"></transition><transition target="sX" action="epsilon" proba="0.35294117647058826"></transition></state><state id="s9"><transition target="sX" action="epsilon" proba="0.5"></transition><transition target="s9" action="org.apache.commons.math.TestUtils.assertEquals(java.lang.String,double[],double[],double)" proba="0.5"></transition></state><state id="s11"><transition target="s11" action="org.apache.commons.math.TestUtils.assertSame(org.apache.commons.math.complex.Complex,org.apache.commons.math.complex.Complex)" proba="0.8604651162790697"></transition><transition target="sX" action="epsilon" proba="0.13178294573643412"></transition><transition target="s1" action="org.apache.commons.math.TestUtils.assertEquals(org.apache.commons.math.complex.Complex,org.apache.commons.math.complex.Complex,double)" proba="0.007751937984496124"></transition></state><state id="s10"><transition target="s5" action="org.apache.commons.math.TestUtils.serializeAndRecover(java.lang.Object)" proba="0.8571428571428571"></transition><transition target="sX" action="epsilon" proba="0.14285714285714285"></transition></state><state id="s13"><transition target="s13" action="org.apache.commons.math.TestUtils.assertRelativelyEquals(double,double,double)" proba="0.6666666666666666"></transition><transition target="sX" action="epsilon" proba="0.3333333333333333"></transition></state><state id="s12"><transition target="sX" action="epsilon" proba="1.0"></transition></state><state id="s14"><transition target="sX" action="epsilon" proba="0.2"></transition><transition target="s14" action="org.apache.commons.math.TestUtils.assertContains(org.apache.commons.math.complex.Complex[],org.apache.commons.math.complex.Complex,double)" proba="0.8"></transition></state><state id="s0"><transition target="s3" action="org.apache.commons.math.TestUtils.assertEquals(double[],double[],double)" proba="0.09615384615384616"></transition><transition target="s4" action="org.apache.commons.math.TestUtils.assertEquals(java.lang.String,org.apache.commons.math.linear.RealMatrix,org.apache.commons.math.linear.RealMatrix,double)" proba="0.14102564102564102"></transition><transition target="s5" action="org.apache.commons.math.TestUtils.serializeAndRecover(java.lang.Object)" proba="0.12179487179487179"></transition><transition target="s6" action="org.apache.commons.math.TestUtils.assertEquals(org.apache.commons.math.FieldElement[],org.apache.commons.math.FieldElement[])" proba="0.05128205128205128"></transition><transition target="s7" action="org.apache.commons.math.TestUtils.assertEquals(org.apache.commons.math.linear.FieldMatrix,org.apache.commons.math.linear.FieldMatrix)" proba="0.10256410256410256"></transition><transition target="s8" action="org.apache.commons.math.TestUtils.assertEquals(java.lang.String,double,double,double)" proba="0.03205128205128205"></transition><transition target="s9" action="org.apache.commons.math.TestUtils.assertEquals(java.lang.String,double[],double[],double)" proba="0.038461538461538464"></transition><transition target="s11" action="org.apache.commons.math.TestUtils.assertSame(org.apache.commons.math.complex.Complex,org.apache.commons.math.complex.Complex)" proba="0.11538461538461539"></transition><transition target="s10" action="org.apache.commons.math.TestUtils.checkSerializedEquality(java.lang.Object)" proba="0.02564102564102564"></transition><transition target="s13" action="org.apache.commons.math.TestUtils.assertRelativelyEquals(double,double,double)" proba="0.00641025641025641"></transition><transition target="s12" action="org.apache.commons.math.TestUtils.assertSame(double,double)" proba="0.01282051282051282"></transition><transition target="s14" action="org.apache.commons.math.TestUtils.assertContains(org.apache.commons.math.complex.Complex[],org.apache.commons.math.complex.Complex,double)" proba="0.00641025641025641"></transition><transition target="s1" action="org.apache.commons.math.TestUtils.assertEquals(org.apache.commons.math.complex.Complex,org.apache.commons.math.complex.Complex,double)" proba="0.1346153846153846"></transition><transition target="s2" action="org.apache.commons.math.TestUtils.assertEquals(double,double,double)" proba="0.11538461538461539"></transition></state><state id="s1"><transition target="sX" action="epsilon" proba="0.55"></transition><transition target="s1" action="org.apache.commons.math.TestUtils.assertEquals(org.apache.commons.math.complex.Complex,org.apache.commons.math.complex.Complex,double)" proba="0.45"></transition></state><state id="s2"><transition target="sX" action="epsilon" proba="0.27419354838709675"></transition><transition target="s8" action="org.apache.commons.math.TestUtils.assertEquals(java.lang.String,double,double,double)" proba="0.016129032258064516"></transition><transition target="s2" action="org.apache.commons.math.TestUtils.assertEquals(double,double,double)" proba="0.7096774193548387"></transition></state></states></ts>