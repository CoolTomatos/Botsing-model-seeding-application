<?xml version="1.0"?><ts><start>s0</start><states><state id="s3"><transition target="s4" action="org.apache.commons.math.optimization.direct.MultiDirectional.optimize(org.apache.commons.math.analysis.MultivariateRealFunction,org.apache.commons.math.optimization.GoalType,double[])" proba="0.16666666666666666"></transition><transition target="s7" action="org.apache.commons.math.optimization.direct.MultiDirectional.setStartConfiguration(double[])" proba="0.3333333333333333"></transition><transition target="sX" action="epsilon" proba="0.16666666666666666"></transition><transition target="s9" action="org.apache.commons.math.optimization.direct.MultiDirectional.setStartConfiguration(double[][])" proba="0.3333333333333333"></transition></state><state id="s4"><transition target="s5" action="org.apache.commons.math.optimization.direct.MultiDirectional.getCause()" proba="0.25"></transition><transition target="s10" action="org.apache.commons.math.optimization.direct.MultiDirectional.getEvaluations()" proba="0.75"></transition></state><state id="s5"><transition target="s6" action="org.apache.commons.math.optimization.direct.MultiDirectional.getMessage()" proba="1.0"></transition></state><state id="s10"><transition target="s4" action="org.apache.commons.math.optimization.direct.MultiDirectional.optimize(org.apache.commons.math.analysis.MultivariateRealFunction,org.apache.commons.math.optimization.GoalType,double[])" proba="0.14285714285714285"></transition><transition target="s10" action="org.apache.commons.math.optimization.direct.MultiDirectional.getEvaluations()" proba="0.5714285714285714"></transition><transition target="sX" action="epsilon" proba="0.21428571428571427"></transition><transition target="s2" action="org.apache.commons.math.optimization.direct.MultiDirectional.setConvergenceChecker(org.apache.commons.math.optimization.RealConvergenceChecker)" proba="0.07142857142857142"></transition></state><state id="s6"><transition target="sX" action="epsilon" proba="0.5"></transition><transition target="s1" action="org.apache.commons.math.optimization.direct.MultiDirectional.&lt;init&gt;(double,double)" proba="0.5"></transition></state><state id="s7"><transition target="s4" action="org.apache.commons.math.optimization.direct.MultiDirectional.optimize(org.apache.commons.math.analysis.MultivariateRealFunction,org.apache.commons.math.optimization.GoalType,double[])" proba="0.5"></transition><transition target="sX" action="epsilon" proba="0.5"></transition></state><state id="sX"><transition target="s0" action="epsilon" proba="1.0"></transition></state><state id="s8"><transition target="sX" action="epsilon" proba="0.5"></transition><transition target="s2" action="org.apache.commons.math.optimization.direct.MultiDirectional.setConvergenceChecker(org.apache.commons.math.optimization.RealConvergenceChecker)" proba="0.5"></transition></state><state id="s9"><transition target="s4" action="org.apache.commons.math.optimization.direct.MultiDirectional.optimize(org.apache.commons.math.analysis.MultivariateRealFunction,org.apache.commons.math.optimization.GoalType,double[])" proba="0.5"></transition><transition target="sX" action="epsilon" proba="0.5"></transition></state><state id="s0"><transition target="s8" action="org.apache.commons.math.optimization.direct.MultiDirectional.&lt;init&gt;()" proba="0.5454545454545454"></transition><transition target="s1" action="org.apache.commons.math.optimization.direct.MultiDirectional.&lt;init&gt;(double,double)" proba="0.45454545454545453"></transition></state><state id="s1"><transition target="s4" action="org.apache.commons.math.optimization.direct.MultiDirectional.optimize(org.apache.commons.math.analysis.MultivariateRealFunction,org.apache.commons.math.optimization.GoalType,double[])" proba="0.3333333333333333"></transition><transition target="sX" action="epsilon" proba="0.16666666666666666"></transition><transition target="s2" action="org.apache.commons.math.optimization.direct.MultiDirectional.setConvergenceChecker(org.apache.commons.math.optimization.RealConvergenceChecker)" proba="0.5"></transition></state><state id="s2"><transition target="s3" action="org.apache.commons.math.optimization.direct.MultiDirectional.setMaxIterations(int)" proba="0.8571428571428571"></transition><transition target="s4" action="org.apache.commons.math.optimization.direct.MultiDirectional.optimize(org.apache.commons.math.analysis.MultivariateRealFunction,org.apache.commons.math.optimization.GoalType,double[])" proba="0.14285714285714285"></transition></state></states></ts>