<?xml version='1.0' encoding='UTF-8'?><ts><start>s0</start><states><state id="s3"><transition target="s4" action="java.util.Collection.next()" proba="0.05917159763313609"/><transition target="s11" action="java.util.Collection.isValid(java.lang.String)" proba="0.005917159763313609"/><transition target="s6" action="java.util.Collection.contains(java.lang.Object)" proba="0.005917159763313609"/><transition target="sX" action="epsilon" proba="0.9171597633136095"/><transition target="s15" action="java.util.Collection.createInputFilterStream(java.util.Map)" proba="0.005917159763313609"/><transition target="s2" action="java.util.Collection.size()" proba="0.005917159763313609"/></state><state id="s4"><transition target="s5" action="java.util.Collection.add(java.lang.Object)" proba="0.18181818181818182"/><transition target="sX" action="epsilon" proba="0.8181818181818182"/></state><state id="s5"><transition target="s5" action="java.util.Collection.add(java.lang.Object)" proba="0.05"/><transition target="sX" action="epsilon" proba="0.85"/><transition target="s1" action="java.util.Collection.isEmpty()" proba="0.05"/><transition target="s2" action="java.util.Collection.size()" proba="0.05"/></state><state id="s6"><transition target="s3" action="java.util.Collection.iterator()" proba="0.03571428571428571"/><transition target="s6" action="java.util.Collection.contains(java.lang.Object)" proba="0.35714285714285715"/><transition target="sX" action="epsilon" proba="0.6071428571428571"/></state><state id="s7"><transition target="sX" action="epsilon" proba="1.0"/></state><state id="sX"><transition target="s0" action="epsilon" proba="1.0"/></state><state id="s8"><transition target="sX" action="epsilon" proba="0.9090909090909091"/><transition target="s8" action="java.util.Collection.addAll(java.util.Collection)" proba="0.09090909090909091"/></state><state id="s9"><transition target="sX" action="epsilon" proba="0.5"/><transition target="s2" action="java.util.Collection.size()" proba="0.5"/></state><state id="s11"><transition target="s12" action="java.util.Collection.getId()" proba="1.0"/></state><state id="s10"><transition target="s8" action="java.util.Collection.addAll(java.util.Collection)" proba="1.0"/></state><state id="s13"><transition target="s4" action="java.util.Collection.next()" proba="1.0"/></state><state id="s12"><transition target="sX" action="epsilon" proba="1.0"/></state><state id="s15"><transition target="sX" action="epsilon" proba="1.0"/></state><state id="s14"><transition target="sX" action="epsilon" proba="0.5"/><transition target="s14" action="java.util.Collection.containsAll(java.util.Collection)" proba="0.5"/></state><state id="s0"><transition target="s3" action="java.util.Collection.iterator()" proba="0.38306451612903225"/><transition target="s5" action="java.util.Collection.add(java.lang.Object)" proba="0.06854838709677419"/><transition target="s6" action="java.util.Collection.contains(java.lang.Object)" proba="0.06048387096774194"/><transition target="s10" action="java.util.Collection.clear()" proba="0.004032258064516129"/><transition target="s7" action="java.util.Collection.remove(java.lang.Object)" proba="0.012096774193548387"/><transition target="s8" action="java.util.Collection.addAll(java.util.Collection)" proba="0.036290322580645164"/><transition target="s9" action="java.util.Collection.toArray()" proba="0.008064516129032258"/><transition target="s1" action="java.util.Collection.isEmpty()" proba="0.18548387096774194"/><transition target="s2" action="java.util.Collection.size()" proba="0.24193548387096775"/></state><state id="s1"><transition target="s3" action="java.util.Collection.iterator()" proba="0.3404255319148936"/><transition target="sX" action="epsilon" proba="0.3617021276595745"/><transition target="s2" action="java.util.Collection.size()" proba="0.2978723404255319"/></state><state id="s2"><transition target="s3" action="java.util.Collection.iterator()" proba="0.7037037037037037"/><transition target="s6" action="java.util.Collection.contains(java.lang.Object)" proba="0.024691358024691357"/><transition target="s13" action="java.util.Collection.hasNext()" proba="0.012345679012345678"/><transition target="sX" action="epsilon" proba="0.18518518518518517"/><transition target="s14" action="java.util.Collection.containsAll(java.util.Collection)" proba="0.024691358024691357"/><transition target="s2" action="java.util.Collection.size()" proba="0.04938271604938271"/></state></states></ts>