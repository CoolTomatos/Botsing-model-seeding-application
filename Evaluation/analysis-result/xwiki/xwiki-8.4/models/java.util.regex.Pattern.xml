<?xml version='1.0' encoding='UTF-8'?><ts><start>s0</start><states><state id="s3"><transition target="sX" action="epsilon" proba="1.0"/></state><state id="s4"><transition target="s4" action="java.util.regex.Pattern.quote(java.lang.String)" proba="0.14285714285714285"/><transition target="s6" action="java.util.regex.Pattern.compile(java.lang.String)" proba="0.2857142857142857"/><transition target="sX" action="epsilon" proba="0.5714285714285714"/></state><state id="s5"><transition target="s10" action="java.util.regex.Pattern.toCharArray()" proba="0.0625"/><transition target="sX" action="epsilon" proba="0.9375"/></state><state id="s6"><transition target="s6" action="java.util.regex.Pattern.compile(java.lang.String)" proba="0.07142857142857142"/><transition target="sX" action="epsilon" proba="0.9285714285714286"/></state><state id="s7"><transition target="sX" action="epsilon" proba="1.0"/></state><state id="sX"><transition target="s0" action="epsilon" proba="1.0"/></state><state id="s8"><transition target="sX" action="epsilon" proba="1.0"/></state><state id="s9"><transition target="sX" action="epsilon" proba="1.0"/></state><state id="s11"><transition target="sX" action="epsilon" proba="1.0"/></state><state id="s10"><transition target="sX" action="epsilon" proba="1.0"/></state><state id="s12"><transition target="sX" action="epsilon" proba="0.6"/><transition target="s1" action="java.util.regex.Pattern.matcher(java.lang.CharSequence)" proba="0.4"/></state><state id="s0"><transition target="s4" action="java.util.regex.Pattern.quote(java.lang.String)" proba="0.057692307692307696"/><transition target="s6" action="java.util.regex.Pattern.compile(java.lang.String)" proba="0.10576923076923077"/><transition target="s8" action="java.util.regex.Pattern.pattern()" proba="0.019230769230769232"/><transition target="s12" action="java.util.regex.Pattern.compile(java.lang.String,int)" proba="0.04807692307692308"/><transition target="s9" action="java.util.regex.Pattern.split(java.lang.CharSequence)" proba="0.019230769230769232"/><transition target="s1" action="java.util.regex.Pattern.matcher(java.lang.CharSequence)" proba="0.75"/></state><state id="s1"><transition target="s3" action="java.util.regex.Pattern.replaceFirst(java.lang.String)" proba="0.011627906976744186"/><transition target="s5" action="java.util.regex.Pattern.replaceAll(java.lang.String)" proba="0.18604651162790697"/><transition target="s11" action="java.util.regex.Pattern.toString()" proba="0.011627906976744186"/><transition target="s7" action="java.util.regex.Pattern.find()" proba="0.011627906976744186"/><transition target="sX" action="epsilon" proba="0.5348837209302325"/><transition target="s1" action="java.util.regex.Pattern.matcher(java.lang.CharSequence)" proba="0.05813953488372093"/><transition target="s2" action="java.util.regex.Pattern.matches()" proba="0.18604651162790697"/></state><state id="s2"><transition target="sX" action="epsilon" proba="0.9375"/><transition target="s1" action="java.util.regex.Pattern.matcher(java.lang.CharSequence)" proba="0.0625"/></state></states></ts>