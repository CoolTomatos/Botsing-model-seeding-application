<?xml version='1.0' encoding='UTF-8'?><ts><start>s0</start><states><state id="s3"><transition target="s1" action="org.jmock.Mockery.mock(java.lang.Class)" proba="1.0"/></state><state id="s4"><transition target="s1" action="org.jmock.Mockery.mock(java.lang.Class)" proba="1.0"/></state><state id="s5"><transition target="s5" action="org.jmock.Mockery.mock(java.lang.Class,java.lang.String)" proba="0.5"/><transition target="sX" action="epsilon" proba="0.5"/></state><state id="s6"><transition target="sX" action="epsilon" proba="1.0"/></state><state id="sX"><transition target="s0" action="epsilon" proba="1.0"/></state><state id="s0"><transition target="s3" action="org.jmock.Mockery.setImposteriser(org.jmock.api.Imposteriser)" proba="0.043478260869565216"/><transition target="s4" action="org.jmock.Mockery.&lt;init>()" proba="0.08695652173913043"/><transition target="s5" action="org.jmock.Mockery.mock(java.lang.Class,java.lang.String)" proba="0.043478260869565216"/><transition target="s6" action="org.jmock.Mockery.assertIsSatisfied()" proba="0.043478260869565216"/><transition target="s1" action="org.jmock.Mockery.mock(java.lang.Class)" proba="0.6521739130434783"/><transition target="s2" action="org.jmock.Mockery.checking(org.jmock.internal.ExpectationBuilder)" proba="0.13043478260869565"/></state><state id="s1"><transition target="sX" action="epsilon" proba="0.13043478260869565"/><transition target="s1" action="org.jmock.Mockery.mock(java.lang.Class)" proba="0.21739130434782608"/><transition target="s2" action="org.jmock.Mockery.checking(org.jmock.internal.ExpectationBuilder)" proba="0.6521739130434783"/></state><state id="s2"><transition target="sX" action="epsilon" proba="0.8571428571428571"/><transition target="s2" action="org.jmock.Mockery.checking(org.jmock.internal.ExpectationBuilder)" proba="0.14285714285714285"/></state></states></ts>