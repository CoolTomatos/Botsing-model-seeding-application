<?xml version='1.0' encoding='UTF-8'?><ts><start>s0</start><states><state id="s3"><transition target="sX" action="epsilon" proba="0.9545454545454546"/><transition target="s1" action="java.util.regex.Pattern.matcher(java.lang.CharSequence)" proba="0.045454545454545456"/></state><state id="s4"><transition target="s4" action="java.util.regex.Pattern.compile(java.lang.String)" proba="0.08823529411764706"/><transition target="sX" action="epsilon" proba="0.8529411764705882"/><transition target="s1" action="java.util.regex.Pattern.matcher(java.lang.CharSequence)" proba="0.058823529411764705"/></state><state id="s5"><transition target="s5" action="java.util.regex.Pattern.compile(java.lang.String,int)" proba="0.14285714285714285"/><transition target="sX" action="epsilon" proba="0.7142857142857143"/><transition target="s1" action="java.util.regex.Pattern.matcher(java.lang.CharSequence)" proba="0.14285714285714285"/></state><state id="s6"><transition target="s4" action="java.util.regex.Pattern.compile(java.lang.String)" proba="0.3076923076923077"/><transition target="s6" action="java.util.regex.Pattern.quote(java.lang.String)" proba="0.23076923076923078"/><transition target="sX" action="epsilon" proba="0.46153846153846156"/></state><state id="s7"><transition target="sX" action="epsilon" proba="0.9375"/><transition target="s12" action="java.util.regex.Pattern.toCharArray()" proba="0.0625"/></state><state id="sX"><transition target="s0" action="epsilon" proba="1.0"/></state><state id="s8"><transition target="sX" action="epsilon" proba="1.0"/></state><state id="s9"><transition target="sX" action="epsilon" proba="1.0"/></state><state id="s11"><transition target="sX" action="epsilon" proba="1.0"/></state><state id="s10"><transition target="sX" action="epsilon" proba="1.0"/></state><state id="s12"><transition target="sX" action="epsilon" proba="1.0"/></state><state id="s0"><transition target="s4" action="java.util.regex.Pattern.compile(java.lang.String)" proba="0.17763157894736842"/><transition target="s5" action="java.util.regex.Pattern.compile(java.lang.String,int)" proba="0.07894736842105263"/><transition target="s11" action="java.util.regex.Pattern.split(java.lang.CharSequence)" proba="0.013157894736842105"/><transition target="s6" action="java.util.regex.Pattern.quote(java.lang.String)" proba="0.06578947368421052"/><transition target="s9" action="java.util.regex.Pattern.pattern()" proba="0.013157894736842105"/><transition target="s1" action="java.util.regex.Pattern.matcher(java.lang.CharSequence)" proba="0.6513157894736842"/></state><state id="s1"><transition target="s3" action="java.util.regex.Pattern.matches()" proba="0.2018348623853211"/><transition target="s10" action="java.util.regex.Pattern.find()" proba="0.01834862385321101"/><transition target="s7" action="java.util.regex.Pattern.replaceAll(java.lang.String)" proba="0.14678899082568808"/><transition target="sX" action="epsilon" proba="0.5596330275229358"/><transition target="s8" action="java.util.regex.Pattern.replaceFirst(java.lang.String)" proba="0.01834862385321101"/><transition target="s1" action="java.util.regex.Pattern.matcher(java.lang.CharSequence)" proba="0.045871559633027525"/><transition target="s2" action="java.util.regex.Pattern.toString()" proba="0.009174311926605505"/></state><state id="s2"><transition target="sX" action="epsilon" proba="1.0"/></state></states></ts>