<?xml version='1.0' encoding='UTF-8'?><ts><start>s0</start><states><state id="sX"><transition target="s0" action="epsilon" proba="1.0"/></state><state id="s11"><transition target="sX" action="epsilon" proba="1.0"/></state><state id="s10"><transition target="sX" action="epsilon" proba="1.0"/></state><state id="s13"><transition target="s4" action="java.util.regex.Matcher.start()" proba="0.2857142857142857"/><transition target="s22" action="java.util.regex.Matcher.group()" proba="0.14285714285714285"/><transition target="sX" action="epsilon" proba="0.5714285714285714"/></state><state id="s12"><transition target="sX" action="epsilon" proba="1.0"/></state><state id="s15"><transition target="sX" action="epsilon" proba="1.0"/></state><state id="s14"><transition target="s7" action="java.util.regex.Matcher.start(int)" proba="0.4"/><transition target="s2" action="java.util.regex.Matcher.group(int)" proba="0.6"/></state><state id="s17"><transition target="sX" action="epsilon" proba="1.0"/></state><state id="s16"><transition target="s1" action="java.util.regex.Matcher.find()" proba="1.0"/></state><state id="s19"><transition target="s2" action="java.util.regex.Matcher.group(int)" proba="1.0"/></state><state id="s18"><transition target="s19" action="java.util.regex.Matcher.end(int)" proba="1.0"/></state><state id="s0"><transition target="s3" action="java.util.regex.Matcher.matches()" proba="0.36231884057971014"/><transition target="s5" action="java.util.regex.Matcher.quoteReplacement(java.lang.String)" proba="0.043478260869565216"/><transition target="s11" action="java.util.regex.Matcher.replaceAll(java.lang.String)" proba="0.057971014492753624"/><transition target="s6" action="java.util.regex.Matcher.lookingAt()" proba="0.057971014492753624"/><transition target="s1" action="java.util.regex.Matcher.find()" proba="0.4782608695652174"/></state><state id="s1"><transition target="s4" action="java.util.regex.Matcher.start()" proba="0.08108108108108109"/><transition target="s22" action="java.util.regex.Matcher.group()" proba="0.02702702702702703"/><transition target="sX" action="epsilon" proba="0.02702702702702703"/><transition target="s14" action="java.util.regex.Matcher.groupCount()" proba="0.13513513513513514"/><transition target="s17" action="java.util.regex.Matcher.hitEnd()" proba="0.05405405405405406"/><transition target="s1" action="java.util.regex.Matcher.find()" proba="0.05405405405405406"/><transition target="s2" action="java.util.regex.Matcher.group(int)" proba="0.6216216216216216"/></state><state id="s2"><transition target="s3" action="java.util.regex.Matcher.matches()" proba="0.012658227848101266"/><transition target="s4" action="java.util.regex.Matcher.start()" proba="0.02531645569620253"/><transition target="sX" action="epsilon" proba="0.3924050632911392"/><transition target="s8" action="java.util.regex.Matcher.charAt(int)" proba="0.012658227848101266"/><transition target="s9" action="java.util.regex.Matcher.appendReplacement(java.lang.StringBuffer,java.lang.String)" proba="0.012658227848101266"/><transition target="s20" action="java.util.regex.Matcher.getMessage()" proba="0.012658227848101266"/><transition target="s21" action="java.util.regex.Matcher.printStackTrace()" proba="0.012658227848101266"/><transition target="s13" action="java.util.regex.Matcher.end()" proba="0.05063291139240506"/><transition target="s24" action="java.util.regex.Matcher.lastIndexOf(java.lang.String)" proba="0.012658227848101266"/><transition target="s12" action="java.util.regex.Matcher.split(java.lang.String)" proba="0.012658227848101266"/><transition target="s23" action="java.util.regex.Matcher.trim()" proba="0.012658227848101266"/><transition target="s15" action="java.util.regex.Matcher.reset(java.lang.CharSequence)" proba="0.012658227848101266"/><transition target="s18" action="java.util.regex.Matcher.length()" proba="0.02531645569620253"/><transition target="s2" action="java.util.regex.Matcher.group(int)" proba="0.3924050632911392"/></state><state id="s3"><transition target="s3" action="java.util.regex.Matcher.matches()" proba="0.13333333333333333"/><transition target="sX" action="epsilon" proba="0.3"/><transition target="s16" action="java.util.regex.Matcher.reset()" proba="0.06666666666666667"/><transition target="s2" action="java.util.regex.Matcher.group(int)" proba="0.5"/></state><state id="s4"><transition target="s13" action="java.util.regex.Matcher.end()" proba="0.2857142857142857"/><transition target="s7" action="java.util.regex.Matcher.start(int)" proba="0.14285714285714285"/><transition target="sX" action="epsilon" proba="0.42857142857142855"/><transition target="s2" action="java.util.regex.Matcher.group(int)" proba="0.14285714285714285"/></state><state id="s5"><transition target="sX" action="epsilon" proba="1.0"/></state><state id="s6"><transition target="s7" action="java.util.regex.Matcher.start(int)" proba="0.25"/><transition target="s13" action="java.util.regex.Matcher.end()" proba="0.25"/><transition target="sX" action="epsilon" proba="0.5"/></state><state id="s7"><transition target="s7" action="java.util.regex.Matcher.start(int)" proba="0.2"/><transition target="sX" action="epsilon" proba="0.2"/><transition target="s19" action="java.util.regex.Matcher.end(int)" proba="0.4"/><transition target="s2" action="java.util.regex.Matcher.group(int)" proba="0.2"/></state><state id="s8"><transition target="s22" action="java.util.regex.Matcher.group()" proba="0.3333333333333333"/><transition target="sX" action="epsilon" proba="0.6666666666666666"/></state><state id="s9"><transition target="s10" action="java.util.regex.Matcher.appendTail(java.lang.StringBuffer)" proba="0.5"/><transition target="s9" action="java.util.regex.Matcher.appendReplacement(java.lang.StringBuffer,java.lang.String)" proba="0.5"/></state><state id="s20"><transition target="sX" action="epsilon" proba="1.0"/></state><state id="s22"><transition target="sX" action="epsilon" proba="0.3333333333333333"/><transition target="s8" action="java.util.regex.Matcher.charAt(int)" proba="0.6666666666666666"/></state><state id="s21"><transition target="sX" action="epsilon" proba="1.0"/></state><state id="s24"><transition target="s2" action="java.util.regex.Matcher.group(int)" proba="1.0"/></state><state id="s23"><transition target="sX" action="epsilon" proba="1.0"/></state></states></ts>