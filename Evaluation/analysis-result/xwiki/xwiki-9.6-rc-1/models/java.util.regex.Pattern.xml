<?xml version='1.0' encoding='UTF-8'?><ts><start>s0</start><states><state id="s3"><transition target="s3" action="java.util.regex.Pattern.compile(java.lang.String)" proba="0.07142857142857142"/><transition target="sX" action="epsilon" proba="0.8571428571428571"/><transition target="s2" action="java.util.regex.Pattern.matcher(java.lang.CharSequence)" proba="0.07142857142857142"/></state><state id="s4"><transition target="sX" action="epsilon" proba="0.9615384615384616"/><transition target="s2" action="java.util.regex.Pattern.matcher(java.lang.CharSequence)" proba="0.038461538461538464"/></state><state id="s5"><transition target="s3" action="java.util.regex.Pattern.compile(java.lang.String)" proba="0.35714285714285715"/><transition target="s5" action="java.util.regex.Pattern.quote(java.lang.String)" proba="0.21428571428571427"/><transition target="sX" action="epsilon" proba="0.42857142857142855"/></state><state id="s6"><transition target="s13" action="java.util.regex.Pattern.toCharArray()" proba="0.0625"/><transition target="sX" action="epsilon" proba="0.9375"/></state><state id="s7"><transition target="sX" action="epsilon" proba="1.0"/></state><state id="sX"><transition target="s0" action="epsilon" proba="1.0"/></state><state id="s8"><transition target="sX" action="epsilon" proba="1.0"/></state><state id="s9"><transition target="sX" action="epsilon" proba="1.0"/></state><state id="s11"><transition target="sX" action="epsilon" proba="1.0"/></state><state id="s10"><transition target="sX" action="epsilon" proba="1.0"/></state><state id="s13"><transition target="sX" action="epsilon" proba="1.0"/></state><state id="s12"><transition target="sX" action="epsilon" proba="1.0"/></state><state id="s0"><transition target="s3" action="java.util.regex.Pattern.compile(java.lang.String)" proba="0.20238095238095238"/><transition target="s5" action="java.util.regex.Pattern.quote(java.lang.String)" proba="0.06547619047619048"/><transition target="s7" action="java.util.regex.Pattern.split(java.lang.CharSequence)" proba="0.011904761904761904"/><transition target="s8" action="java.util.regex.Pattern.matches(java.lang.String,java.lang.CharSequence)" proba="0.005952380952380952"/><transition target="s9" action="java.util.regex.Pattern.pattern()" proba="0.011904761904761904"/><transition target="s1" action="java.util.regex.Pattern.compile(java.lang.String,int)" proba="0.07142857142857142"/><transition target="s2" action="java.util.regex.Pattern.matcher(java.lang.CharSequence)" proba="0.6309523809523809"/></state><state id="s1"><transition target="sX" action="epsilon" proba="0.7142857142857143"/><transition target="s1" action="java.util.regex.Pattern.compile(java.lang.String,int)" proba="0.14285714285714285"/><transition target="s2" action="java.util.regex.Pattern.matcher(java.lang.CharSequence)" proba="0.14285714285714285"/></state><state id="s2"><transition target="s4" action="java.util.regex.Pattern.matches()" proba="0.2222222222222222"/><transition target="s11" action="java.util.regex.Pattern.find()" proba="0.017094017094017096"/><transition target="s6" action="java.util.regex.Pattern.replaceAll(java.lang.String)" proba="0.13675213675213677"/><transition target="s10" action="java.util.regex.Pattern.toString()" proba="0.008547008547008548"/><transition target="sX" action="epsilon" proba="0.5555555555555556"/><transition target="s12" action="java.util.regex.Pattern.replaceFirst(java.lang.String)" proba="0.017094017094017096"/><transition target="s2" action="java.util.regex.Pattern.matcher(java.lang.CharSequence)" proba="0.042735042735042736"/></state></states></ts>