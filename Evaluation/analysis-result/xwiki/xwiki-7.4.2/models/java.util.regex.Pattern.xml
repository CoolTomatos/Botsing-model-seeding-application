<?xml version='1.0' encoding='UTF-8'?><ts><start>s0</start><states><state id="s3"><transition target="s3" action="java.util.regex.Pattern.matcher(java.lang.CharSequence)" proba="0.03759398496240601"/><transition target="s4" action="java.util.regex.Pattern.replaceFirst(java.lang.String)" proba="0.022556390977443608"/><transition target="s5" action="java.util.regex.Pattern.replaceAll(java.lang.String)" proba="0.19548872180451127"/><transition target="s11" action="java.util.regex.Pattern.find()" proba="0.007518796992481203"/><transition target="s7" action="java.util.regex.Pattern.matches()" proba="0.12781954887218044"/><transition target="sX" action="epsilon" proba="0.6015037593984962"/><transition target="s12" action="java.util.regex.Pattern.toString()" proba="0.007518796992481203"/></state><state id="s4"><transition target="sX" action="epsilon" proba="1.0"/></state><state id="s5"><transition target="s3" action="java.util.regex.Pattern.matcher(java.lang.CharSequence)" proba="0.038461538461538464"/><transition target="s10" action="java.util.regex.Pattern.toCharArray()" proba="0.038461538461538464"/><transition target="sX" action="epsilon" proba="0.9230769230769231"/></state><state id="s6"><transition target="sX" action="epsilon" proba="0.5"/><transition target="s2" action="java.util.regex.Pattern.compile(java.lang.String)" proba="0.5"/></state><state id="s7"><transition target="s3" action="java.util.regex.Pattern.matcher(java.lang.CharSequence)" proba="0.058823529411764705"/><transition target="sX" action="epsilon" proba="0.9411764705882353"/></state><state id="sX"><transition target="s0" action="epsilon" proba="1.0"/></state><state id="s8"><transition target="sX" action="epsilon" proba="1.0"/></state><state id="s9"><transition target="sX" action="epsilon" proba="1.0"/></state><state id="s11"><transition target="sX" action="epsilon" proba="1.0"/></state><state id="s10"><transition target="sX" action="epsilon" proba="1.0"/></state><state id="s12"><transition target="sX" action="epsilon" proba="1.0"/></state><state id="s0"><transition target="s3" action="java.util.regex.Pattern.matcher(java.lang.CharSequence)" proba="0.8367346938775511"/><transition target="s6" action="java.util.regex.Pattern.quote(java.lang.String)" proba="0.013605442176870748"/><transition target="s8" action="java.util.regex.Pattern.split(java.lang.CharSequence)" proba="0.013605442176870748"/><transition target="s9" action="java.util.regex.Pattern.pattern()" proba="0.013605442176870748"/><transition target="s1" action="java.util.regex.Pattern.compile(java.lang.String,int)" proba="0.034013605442176874"/><transition target="s2" action="java.util.regex.Pattern.compile(java.lang.String)" proba="0.08843537414965986"/></state><state id="s1"><transition target="s3" action="java.util.regex.Pattern.matcher(java.lang.CharSequence)" proba="0.4"/><transition target="sX" action="epsilon" proba="0.6"/></state><state id="s2"><transition target="s3" action="java.util.regex.Pattern.matcher(java.lang.CharSequence)" proba="0.06666666666666667"/><transition target="sX" action="epsilon" proba="0.8666666666666667"/><transition target="s2" action="java.util.regex.Pattern.compile(java.lang.String)" proba="0.06666666666666667"/></state></states></ts>