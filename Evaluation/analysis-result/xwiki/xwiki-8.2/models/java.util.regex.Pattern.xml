<?xml version='1.0' encoding='UTF-8'?><ts><start>s0</start><states><state id="s3"><transition target="sX" action="epsilon" proba="0.6"/><transition target="s1" action="java.util.regex.Pattern.matcher(java.lang.CharSequence)" proba="0.4"/></state><state id="s4"><transition target="sX" action="epsilon" proba="1.0"/></state><state id="s5"><transition target="s5" action="java.util.regex.Pattern.compile(java.lang.String)" proba="0.07692307692307693"/><transition target="sX" action="epsilon" proba="0.9230769230769231"/></state><state id="s6"><transition target="s11" action="java.util.regex.Pattern.toCharArray()" proba="0.0625"/><transition target="sX" action="epsilon" proba="0.9375"/></state><state id="s7"><transition target="sX" action="epsilon" proba="1.0"/></state><state id="sX"><transition target="s0" action="epsilon" proba="1.0"/></state><state id="s8"><transition target="sX" action="epsilon" proba="1.0"/></state><state id="s9"><transition target="s5" action="java.util.regex.Pattern.compile(java.lang.String)" proba="0.3333333333333333"/><transition target="sX" action="epsilon" proba="0.5"/><transition target="s9" action="java.util.regex.Pattern.quote(java.lang.String)" proba="0.16666666666666666"/></state><state id="s11"><transition target="sX" action="epsilon" proba="1.0"/></state><state id="s10"><transition target="sX" action="epsilon" proba="1.0"/></state><state id="s12"><transition target="sX" action="epsilon" proba="1.0"/></state><state id="s0"><transition target="s3" action="java.util.regex.Pattern.compile(java.lang.String,int)" proba="0.04950495049504951"/><transition target="s4" action="java.util.regex.Pattern.pattern()" proba="0.019801980198019802"/><transition target="s5" action="java.util.regex.Pattern.compile(java.lang.String)" proba="0.09900990099009901"/><transition target="s10" action="java.util.regex.Pattern.split(java.lang.CharSequence)" proba="0.019801980198019802"/><transition target="s9" action="java.util.regex.Pattern.quote(java.lang.String)" proba="0.04950495049504951"/><transition target="s1" action="java.util.regex.Pattern.matcher(java.lang.CharSequence)" proba="0.7623762376237624"/></state><state id="s1"><transition target="s6" action="java.util.regex.Pattern.replaceAll(java.lang.String)" proba="0.19753086419753085"/><transition target="s7" action="java.util.regex.Pattern.toString()" proba="0.012345679012345678"/><transition target="sX" action="epsilon" proba="0.5555555555555556"/><transition target="s8" action="java.util.regex.Pattern.find()" proba="0.012345679012345678"/><transition target="s12" action="java.util.regex.Pattern.replaceFirst(java.lang.String)" proba="0.012345679012345678"/><transition target="s1" action="java.util.regex.Pattern.matcher(java.lang.CharSequence)" proba="0.012345679012345678"/><transition target="s2" action="java.util.regex.Pattern.matches()" proba="0.19753086419753085"/></state><state id="s2"><transition target="sX" action="epsilon" proba="0.9375"/><transition target="s1" action="java.util.regex.Pattern.matcher(java.lang.CharSequence)" proba="0.0625"/></state></states></ts>