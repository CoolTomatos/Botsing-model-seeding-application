<?xml version='1.0' encoding='UTF-8'?><ts><start>s0</start><states><state id="s3"><transition target="s4" action="java.util.Deque.iterator()" proba="0.020833333333333332"/><transition target="s5" action="java.util.Deque.isEmpty()" proba="0.020833333333333332"/><transition target="s7" action="java.util.Deque.push(java.lang.Object)" proba="0.08333333333333333"/><transition target="sX" action="epsilon" proba="0.8333333333333334"/><transition target="s1" action="java.util.Deque.size()" proba="0.020833333333333332"/><transition target="s2" action="java.util.Deque.peek()" proba="0.020833333333333332"/></state><state id="s4"><transition target="sX" action="epsilon" proba="1.0"/></state><state id="s5"><transition target="s3" action="java.util.Deque.pop()" proba="0.11764705882352941"/><transition target="s4" action="java.util.Deque.iterator()" proba="0.058823529411764705"/><transition target="s6" action="java.util.Deque.descendingIterator()" proba="0.058823529411764705"/><transition target="sX" action="epsilon" proba="0.058823529411764705"/><transition target="s1" action="java.util.Deque.size()" proba="0.11764705882352941"/><transition target="s2" action="java.util.Deque.peek()" proba="0.5882352941176471"/></state><state id="s6"><transition target="sX" action="epsilon" proba="1.0"/></state><state id="s7"><transition target="s3" action="java.util.Deque.pop()" proba="0.13333333333333333"/><transition target="s7" action="java.util.Deque.push(java.lang.Object)" proba="0.06666666666666667"/><transition target="sX" action="epsilon" proba="0.7833333333333333"/><transition target="s1" action="java.util.Deque.size()" proba="0.016666666666666666"/></state><state id="sX"><transition target="s0" action="epsilon" proba="1.0"/></state><state id="s8"><transition target="s1" action="java.util.Deque.size()" proba="1.0"/></state><state id="s9"><transition target="sX" action="epsilon" proba="1.0"/></state><state id="s11"><transition target="s4" action="java.util.Deque.iterator()" proba="1.0"/></state><state id="s10"><transition target="sX" action="epsilon" proba="1.0"/></state><state id="s13"><transition target="sX" action="epsilon" proba="1.0"/></state><state id="s12"><transition target="sX" action="epsilon" proba="1.0"/></state><state id="s15"><transition target="sX" action="epsilon" proba="1.0"/></state><state id="s14"><transition target="sX" action="epsilon" proba="1.0"/></state><state id="s16"><transition target="s7" action="java.util.Deque.push(java.lang.Object)" proba="1.0"/></state><state id="s0"><transition target="s3" action="java.util.Deque.pop()" proba="0.2222222222222222"/><transition target="s4" action="java.util.Deque.iterator()" proba="0.014814814814814815"/><transition target="s5" action="java.util.Deque.isEmpty()" proba="0.1111111111111111"/><transition target="s6" action="java.util.Deque.descendingIterator()" proba="0.007407407407407408"/><transition target="s7" action="java.util.Deque.push(java.lang.Object)" proba="0.34074074074074073"/><transition target="s9" action="java.util.Deque.getFirst()" proba="0.007407407407407408"/><transition target="s11" action="java.util.Deque.removeLast()" proba="0.007407407407407408"/><transition target="s10" action="java.util.Deque.getLast()" proba="0.007407407407407408"/><transition target="s13" action="java.util.Deque.addAll(java.util.Collection)" proba="0.007407407407407408"/><transition target="s12" action="java.util.Deque.offerFirst(java.lang.Object)" proba="0.007407407407407408"/><transition target="s15" action="java.util.Deque.add(java.lang.Object)" proba="0.007407407407407408"/><transition target="s16" action="java.util.Deque.contains(java.lang.Object)" proba="0.007407407407407408"/><transition target="s1" action="java.util.Deque.size()" proba="0.06666666666666667"/><transition target="s2" action="java.util.Deque.peek()" proba="0.18518518518518517"/></state><state id="s1"><transition target="s3" action="java.util.Deque.pop()" proba="0.06666666666666667"/><transition target="s5" action="java.util.Deque.isEmpty()" proba="0.06666666666666667"/><transition target="s7" action="java.util.Deque.push(java.lang.Object)" proba="0.06666666666666667"/><transition target="sX" action="epsilon" proba="0.6666666666666666"/><transition target="s8" action="java.util.Deque.toArray()" proba="0.06666666666666667"/><transition target="s14" action="java.util.Deque.toArray(java.lang.Object[])" proba="0.06666666666666667"/></state><state id="s2"><transition target="s3" action="java.util.Deque.pop()" proba="0.18421052631578946"/><transition target="s7" action="java.util.Deque.push(java.lang.Object)" proba="0.10526315789473684"/><transition target="sX" action="epsilon" proba="0.631578947368421"/><transition target="s1" action="java.util.Deque.size()" proba="0.02631578947368421"/><transition target="s2" action="java.util.Deque.peek()" proba="0.05263157894736842"/></state></states></ts>