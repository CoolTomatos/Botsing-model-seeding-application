<?xml version='1.0' encoding='UTF-8'?><ts><start>s0</start><states><state id="s3"><transition target="sX" action="epsilon" proba="1.0"/></state><state id="s4"><transition target="sX" action="epsilon" proba="1.0"/></state><state id="s5"><transition target="sX" action="epsilon" proba="1.0"/></state><state id="s6"><transition target="sX" action="epsilon" proba="1.0"/></state><state id="s7"><transition target="sX" action="epsilon" proba="1.0"/></state><state id="sX"><transition target="s0" action="epsilon" proba="1.0"/></state><state id="s0"><transition target="s3" action="java.util.concurrent.BlockingQueue.poll()" proba="0.07692307692307693"/><transition target="s4" action="java.util.concurrent.BlockingQueue.size()" proba="0.15384615384615385"/><transition target="s5" action="java.util.concurrent.BlockingQueue.iterator()" proba="0.07692307692307693"/><transition target="s6" action="java.util.concurrent.BlockingQueue.put(java.lang.Object)" proba="0.07692307692307693"/><transition target="s7" action="java.util.concurrent.BlockingQueue.take()" proba="0.15384615384615385"/><transition target="s1" action="java.util.concurrent.BlockingQueue.offer(java.lang.Object)" proba="0.3076923076923077"/><transition target="s2" action="java.util.concurrent.BlockingQueue.clear()" proba="0.15384615384615385"/></state><state id="s1"><transition target="sX" action="epsilon" proba="1.0"/></state><state id="s2"><transition target="s1" action="java.util.concurrent.BlockingQueue.offer(java.lang.Object)" proba="1.0"/></state></states></ts>