<?xml version='1.0' encoding='UTF-8'?><ts><start>s0</start><states><state id="s3"><transition target="s3" action="java.util.regex.Pattern.compile(java.lang.String)" proba="0.07142857142857142"/><transition target="sX" action="epsilon" proba="0.9285714285714286"/></state><state id="s4"><transition target="s3" action="java.util.regex.Pattern.compile(java.lang.String)" proba="0.42857142857142855"/><transition target="s4" action="java.util.regex.Pattern.quote(java.lang.String)" proba="0.14285714285714285"/><transition target="sX" action="epsilon" proba="0.42857142857142855"/></state><state id="s5"><transition target="sX" action="epsilon" proba="0.9375"/><transition target="s1" action="java.util.regex.Pattern.matcher(java.lang.CharSequence)" proba="0.0625"/></state><state id="s6"><transition target="sX" action="epsilon" proba="0.6"/><transition target="s1" action="java.util.regex.Pattern.matcher(java.lang.CharSequence)" proba="0.4"/></state><state id="s7"><transition target="sX" action="epsilon" proba="1.0"/></state><state id="sX"><transition target="s0" action="epsilon" proba="1.0"/></state><state id="s8"><transition target="sX" action="epsilon" proba="1.0"/></state><state id="s9"><transition target="sX" action="epsilon" proba="1.0"/></state><state id="s11"><transition target="sX" action="epsilon" proba="1.0"/></state><state id="s10"><transition target="sX" action="epsilon" proba="1.0"/></state><state id="s0"><transition target="s3" action="java.util.regex.Pattern.compile(java.lang.String)" proba="0.10416666666666667"/><transition target="s4" action="java.util.regex.Pattern.quote(java.lang.String)" proba="0.0625"/><transition target="s11" action="java.util.regex.Pattern.pattern()" proba="0.020833333333333332"/><transition target="s6" action="java.util.regex.Pattern.compile(java.lang.String,int)" proba="0.052083333333333336"/><transition target="s1" action="java.util.regex.Pattern.matcher(java.lang.CharSequence)" proba="0.7604166666666666"/></state><state id="s1"><transition target="s5" action="java.util.regex.Pattern.matches()" proba="0.2077922077922078"/><transition target="s7" action="java.util.regex.Pattern.find()" proba="0.012987012987012988"/><transition target="sX" action="epsilon" proba="0.5324675324675324"/><transition target="s8" action="java.util.regex.Pattern.toString()" proba="0.012987012987012988"/><transition target="s9" action="java.util.regex.Pattern.replaceFirst(java.lang.String)" proba="0.012987012987012988"/><transition target="s1" action="java.util.regex.Pattern.matcher(java.lang.CharSequence)" proba="0.012987012987012988"/><transition target="s2" action="java.util.regex.Pattern.replaceAll(java.lang.String)" proba="0.2077922077922078"/></state><state id="s2"><transition target="s10" action="java.util.regex.Pattern.toCharArray()" proba="0.0625"/><transition target="sX" action="epsilon" proba="0.9375"/></state></states></ts>