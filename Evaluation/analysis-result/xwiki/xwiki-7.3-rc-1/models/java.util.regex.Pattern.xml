<?xml version='1.0' encoding='UTF-8'?><ts><start>s0</start><states><state id="s3"><transition target="sX" action="epsilon" proba="0.9230769230769231"/><transition target="s12" action="java.util.regex.Pattern.toCharArray()" proba="0.038461538461538464"/><transition target="s1" action="java.util.regex.Pattern.matcher(java.lang.CharSequence)" proba="0.038461538461538464"/></state><state id="s4"><transition target="s4" action="java.util.regex.Pattern.compile(java.lang.String)" proba="0.07142857142857142"/><transition target="sX" action="epsilon" proba="0.8571428571428571"/><transition target="s1" action="java.util.regex.Pattern.matcher(java.lang.CharSequence)" proba="0.07142857142857142"/></state><state id="s5"><transition target="sX" action="epsilon" proba="0.75"/><transition target="s1" action="java.util.regex.Pattern.matcher(java.lang.CharSequence)" proba="0.25"/></state><state id="s6"><transition target="sX" action="epsilon" proba="0.9411764705882353"/><transition target="s1" action="java.util.regex.Pattern.matcher(java.lang.CharSequence)" proba="0.058823529411764705"/></state><state id="s7"><transition target="sX" action="epsilon" proba="1.0"/></state><state id="sX"><transition target="s0" action="epsilon" proba="1.0"/></state><state id="s8"><transition target="sX" action="epsilon" proba="1.0"/></state><state id="s9"><transition target="sX" action="epsilon" proba="1.0"/></state><state id="s11"><transition target="s4" action="java.util.regex.Pattern.compile(java.lang.String)" proba="0.3333333333333333"/><transition target="sX" action="epsilon" proba="0.6666666666666666"/></state><state id="s10"><transition target="sX" action="epsilon" proba="1.0"/></state><state id="s12"><transition target="sX" action="epsilon" proba="1.0"/></state><state id="s0"><transition target="s4" action="java.util.regex.Pattern.compile(java.lang.String)" proba="0.08053691275167785"/><transition target="s5" action="java.util.regex.Pattern.compile(java.lang.String,int)" proba="0.026845637583892617"/><transition target="s11" action="java.util.regex.Pattern.quote(java.lang.String)" proba="0.020134228187919462"/><transition target="s8" action="java.util.regex.Pattern.split(java.lang.CharSequence)" proba="0.013422818791946308"/><transition target="s1" action="java.util.regex.Pattern.matcher(java.lang.CharSequence)" proba="0.8456375838926175"/><transition target="s2" action="java.util.regex.Pattern.pattern()" proba="0.013422818791946308"/></state><state id="s1"><transition target="s3" action="java.util.regex.Pattern.replaceAll(java.lang.String)" proba="0.18705035971223022"/><transition target="s6" action="java.util.regex.Pattern.matches()" proba="0.1223021582733813"/><transition target="s10" action="java.util.regex.Pattern.toString()" proba="0.007194244604316547"/><transition target="s7" action="java.util.regex.Pattern.replaceFirst(java.lang.String)" proba="0.02158273381294964"/><transition target="sX" action="epsilon" proba="0.5899280575539568"/><transition target="s9" action="java.util.regex.Pattern.find()" proba="0.007194244604316547"/><transition target="s1" action="java.util.regex.Pattern.matcher(java.lang.CharSequence)" proba="0.06474820143884892"/></state><state id="s2"><transition target="sX" action="epsilon" proba="1.0"/></state></states></ts>