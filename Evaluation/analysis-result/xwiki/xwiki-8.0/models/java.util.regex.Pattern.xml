<?xml version='1.0' encoding='UTF-8'?><ts><start>s0</start><states><state id="s3"><transition target="s3" action="java.util.regex.Pattern.matcher(java.lang.CharSequence)" proba="0.045454545454545456"/><transition target="s4" action="java.util.regex.Pattern.replaceAll(java.lang.String)" proba="0.13636363636363635"/><transition target="s6" action="java.util.regex.Pattern.matches()" proba="0.20909090909090908"/><transition target="s7" action="java.util.regex.Pattern.find()" proba="0.01818181818181818"/><transition target="sX" action="epsilon" proba="0.5636363636363636"/><transition target="s8" action="java.util.regex.Pattern.replaceFirst(java.lang.String)" proba="0.01818181818181818"/><transition target="s12" action="java.util.regex.Pattern.toString()" proba="0.00909090909090909"/></state><state id="s4"><transition target="s11" action="java.util.regex.Pattern.toCharArray()" proba="0.06666666666666667"/><transition target="sX" action="epsilon" proba="0.9333333333333333"/></state><state id="s5"><transition target="s5" action="java.util.regex.Pattern.quote(java.lang.String)" proba="0.2222222222222222"/><transition target="sX" action="epsilon" proba="0.4444444444444444"/><transition target="s1" action="java.util.regex.Pattern.compile(java.lang.String)" proba="0.3333333333333333"/></state><state id="s6"><transition target="s3" action="java.util.regex.Pattern.matcher(java.lang.CharSequence)" proba="0.043478260869565216"/><transition target="sX" action="epsilon" proba="0.9565217391304348"/></state><state id="s7"><transition target="sX" action="epsilon" proba="1.0"/></state><state id="sX"><transition target="s0" action="epsilon" proba="1.0"/></state><state id="s8"><transition target="sX" action="epsilon" proba="1.0"/></state><state id="s9"><transition target="sX" action="epsilon" proba="1.0"/></state><state id="s11"><transition target="sX" action="epsilon" proba="1.0"/></state><state id="s10"><transition target="sX" action="epsilon" proba="1.0"/></state><state id="s12"><transition target="sX" action="epsilon" proba="1.0"/></state><state id="s0"><transition target="s3" action="java.util.regex.Pattern.matcher(java.lang.CharSequence)" proba="0.6688741721854304"/><transition target="s5" action="java.util.regex.Pattern.quote(java.lang.String)" proba="0.046357615894039736"/><transition target="s10" action="java.util.regex.Pattern.pattern()" proba="0.013245033112582781"/><transition target="s9" action="java.util.regex.Pattern.split(java.lang.CharSequence)" proba="0.013245033112582781"/><transition target="s1" action="java.util.regex.Pattern.compile(java.lang.String)" proba="0.17880794701986755"/><transition target="s2" action="java.util.regex.Pattern.compile(java.lang.String,int)" proba="0.07947019867549669"/></state><state id="s1"><transition target="s3" action="java.util.regex.Pattern.matcher(java.lang.CharSequence)" proba="0.030303030303030304"/><transition target="sX" action="epsilon" proba="0.8787878787878788"/><transition target="s1" action="java.util.regex.Pattern.compile(java.lang.String)" proba="0.09090909090909091"/></state><state id="s2"><transition target="s3" action="java.util.regex.Pattern.matcher(java.lang.CharSequence)" proba="0.14285714285714285"/><transition target="sX" action="epsilon" proba="0.7142857142857143"/><transition target="s2" action="java.util.regex.Pattern.compile(java.lang.String,int)" proba="0.14285714285714285"/></state></states></ts>