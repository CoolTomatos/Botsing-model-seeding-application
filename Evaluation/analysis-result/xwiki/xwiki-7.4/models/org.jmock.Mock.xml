<?xml version='1.0' encoding='UTF-8'?><ts><start>s0</start><states><state id="s3"><transition target="s3" action="org.jmock.Mock.proxy()" proba="0.1276595744680851"/><transition target="sX" action="epsilon" proba="0.6808510638297872"/><transition target="s1" action="org.jmock.Mock.stubs()" proba="0.19148936170212766"/></state><state id="s4"><transition target="s2" action="org.jmock.Mock.method(java.lang.String)" proba="1.0"/></state><state id="s5"><transition target="s3" action="org.jmock.Mock.proxy()" proba="0.21428571428571427"/><transition target="sX" action="epsilon" proba="0.07142857142857142"/><transition target="s1" action="org.jmock.Mock.stubs()" proba="0.7142857142857143"/></state><state id="s6"><transition target="sX" action="epsilon" proba="0.5"/><transition target="s1" action="org.jmock.Mock.stubs()" proba="0.5"/></state><state id="sX"><transition target="s0" action="epsilon" proba="1.0"/></state><state id="s0"><transition target="s3" action="org.jmock.Mock.proxy()" proba="0.1780821917808219"/><transition target="s4" action="org.jmock.Mock.expects(org.jmock.core.InvocationMatcher)" proba="0.136986301369863"/><transition target="s1" action="org.jmock.Mock.stubs()" proba="0.684931506849315"/></state><state id="s1"><transition target="s2" action="org.jmock.Mock.method(java.lang.String)" proba="1.0"/></state><state id="s2"><transition target="s3" action="org.jmock.Mock.proxy()" proba="0.17123287671232876"/><transition target="s4" action="org.jmock.Mock.expects(org.jmock.core.InvocationMatcher)" proba="0.03424657534246575"/><transition target="s5" action="org.jmock.Mock.will(org.jmock.core.Stub)" proba="0.0958904109589041"/><transition target="s6" action="org.jmock.Mock.isVoid()" proba="0.0273972602739726"/><transition target="sX" action="epsilon" proba="0.2602739726027397"/><transition target="s1" action="org.jmock.Mock.stubs()" proba="0.410958904109589"/></state></states></ts>