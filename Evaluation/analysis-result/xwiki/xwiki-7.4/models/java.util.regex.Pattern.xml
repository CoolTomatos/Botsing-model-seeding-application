<?xml version='1.0' encoding='UTF-8'?><ts><start>s0</start><states><state id="s3"><transition target="s3" action="java.util.regex.Pattern.compile(java.lang.String,int)" proba="0.2"/><transition target="sX" action="epsilon" proba="0.6"/><transition target="s2" action="java.util.regex.Pattern.matcher(java.lang.CharSequence)" proba="0.2"/></state><state id="s4"><transition target="sX" action="epsilon" proba="0.9411764705882353"/><transition target="s2" action="java.util.regex.Pattern.matcher(java.lang.CharSequence)" proba="0.058823529411764705"/></state><state id="s5"><transition target="sX" action="epsilon" proba="1.0"/></state><state id="s6"><transition target="sX" action="epsilon" proba="0.9230769230769231"/><transition target="s8" action="java.util.regex.Pattern.toCharArray()" proba="0.038461538461538464"/><transition target="s2" action="java.util.regex.Pattern.matcher(java.lang.CharSequence)" proba="0.038461538461538464"/></state><state id="s7"><transition target="sX" action="epsilon" proba="0.6666666666666666"/><transition target="s1" action="java.util.regex.Pattern.compile(java.lang.String)" proba="0.3333333333333333"/></state><state id="sX"><transition target="s0" action="epsilon" proba="1.0"/></state><state id="s8"><transition target="sX" action="epsilon" proba="1.0"/></state><state id="s9"><transition target="sX" action="epsilon" proba="1.0"/></state><state id="s11"><transition target="sX" action="epsilon" proba="1.0"/></state><state id="s10"><transition target="sX" action="epsilon" proba="1.0"/></state><state id="s12"><transition target="sX" action="epsilon" proba="1.0"/></state><state id="s0"><transition target="s3" action="java.util.regex.Pattern.compile(java.lang.String,int)" proba="0.050314465408805034"/><transition target="s10" action="java.util.regex.Pattern.pattern()" proba="0.012578616352201259"/><transition target="s7" action="java.util.regex.Pattern.quote(java.lang.String)" proba="0.018867924528301886"/><transition target="s12" action="java.util.regex.Pattern.split(java.lang.CharSequence)" proba="0.012578616352201259"/><transition target="s1" action="java.util.regex.Pattern.compile(java.lang.String)" proba="0.11320754716981132"/><transition target="s2" action="java.util.regex.Pattern.matcher(java.lang.CharSequence)" proba="0.7924528301886793"/></state><state id="s1"><transition target="sX" action="epsilon" proba="0.85"/><transition target="s1" action="java.util.regex.Pattern.compile(java.lang.String)" proba="0.05"/><transition target="s2" action="java.util.regex.Pattern.matcher(java.lang.CharSequence)" proba="0.1"/></state><state id="s2"><transition target="s4" action="java.util.regex.Pattern.matches()" proba="0.12056737588652482"/><transition target="s5" action="java.util.regex.Pattern.replaceFirst(java.lang.String)" proba="0.02127659574468085"/><transition target="s11" action="java.util.regex.Pattern.find()" proba="0.0070921985815602835"/><transition target="s6" action="java.util.regex.Pattern.replaceAll(java.lang.String)" proba="0.18439716312056736"/><transition target="sX" action="epsilon" proba="0.5957446808510638"/><transition target="s9" action="java.util.regex.Pattern.toString()" proba="0.0070921985815602835"/><transition target="s2" action="java.util.regex.Pattern.matcher(java.lang.CharSequence)" proba="0.06382978723404255"/></state></states></ts>