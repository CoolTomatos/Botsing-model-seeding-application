<?xml version='1.0' encoding='UTF-8'?><ts><start>s0</start><states><state id="s3"><transition target="s1" action="org.jmock.Mockery.mock(java.lang.Class)" proba="1.0"/></state><state id="s4"><transition target="s1" action="org.jmock.Mockery.mock(java.lang.Class)" proba="1.0"/></state><state id="s5"><transition target="sX" action="epsilon" proba="1.0"/></state><state id="sX"><transition target="s0" action="epsilon" proba="1.0"/></state><state id="s0"><transition target="s3" action="org.jmock.Mockery.&lt;init>()" proba="0.06666666666666667"/><transition target="s4" action="org.jmock.Mockery.setImposteriser(org.jmock.api.Imposteriser)" proba="0.03333333333333333"/><transition target="s5" action="org.jmock.Mockery.assertIsSatisfied()" proba="0.03333333333333333"/><transition target="s1" action="org.jmock.Mockery.mock(java.lang.Class)" proba="0.6333333333333333"/><transition target="s2" action="org.jmock.Mockery.checking(org.jmock.internal.ExpectationBuilder)" proba="0.23333333333333334"/></state><state id="s1"><transition target="sX" action="epsilon" proba="0.0967741935483871"/><transition target="s1" action="org.jmock.Mockery.mock(java.lang.Class)" proba="0.2903225806451613"/><transition target="s2" action="org.jmock.Mockery.checking(org.jmock.internal.ExpectationBuilder)" proba="0.6129032258064516"/></state><state id="s2"><transition target="sX" action="epsilon" proba="0.896551724137931"/><transition target="s2" action="org.jmock.Mockery.checking(org.jmock.internal.ExpectationBuilder)" proba="0.10344827586206896"/></state></states></ts>