<?xml version='1.0' encoding='UTF-8'?><ts><start>s0</start><states><state id="s3"><transition target="s4" action="java.lang.Character.isDigit(char)" proba="0.1"/><transition target="s11" action="java.lang.Character.forDigit(int,int)" proba="0.1"/><transition target="s7" action="java.lang.Character.isLetterOrDigit(char)" proba="0.3"/><transition target="sX" action="epsilon" proba="0.4"/><transition target="s9" action="java.lang.Character.isUpperCase(char)" proba="0.1"/></state><state id="s4"><transition target="sX" action="epsilon" proba="0.75"/><transition target="s2" action="java.lang.Character.isWhitespace(char)" proba="0.25"/></state><state id="s5"><transition target="s5" action="java.lang.Character.charValue()" proba="0.25"/><transition target="sX" action="epsilon" proba="0.75"/></state><state id="s6"><transition target="sX" action="epsilon" proba="1.0"/></state><state id="s7"><transition target="s4" action="java.lang.Character.isDigit(char)" proba="0.2"/><transition target="sX" action="epsilon" proba="0.8"/></state><state id="sX"><transition target="s0" action="epsilon" proba="1.0"/></state><state id="s8"><transition target="s3" action="java.lang.Character.isLetter(char)" proba="0.16666666666666666"/><transition target="sX" action="epsilon" proba="0.8333333333333334"/></state><state id="s9"><transition target="sX" action="epsilon" proba="1.0"/></state><state id="s11"><transition target="s3" action="java.lang.Character.isLetter(char)" proba="1.0"/></state><state id="s10"><transition target="sX" action="epsilon" proba="1.0"/></state><state id="s13"><transition target="sX" action="epsilon" proba="1.0"/></state><state id="s12"><transition target="sX" action="epsilon" proba="1.0"/></state><state id="s15"><transition target="sX" action="epsilon" proba="1.0"/></state><state id="s14"><transition target="sX" action="epsilon" proba="1.0"/></state><state id="s0"><transition target="s3" action="java.lang.Character.isLetter(char)" proba="0.0958904109589041"/><transition target="s4" action="java.lang.Character.isDigit(char)" proba="0.0273972602739726"/><transition target="s5" action="java.lang.Character.charValue()" proba="0.0410958904109589"/><transition target="s6" action="java.lang.Character.digit(char,int)" proba="0.0136986301369863"/><transition target="s7" action="java.lang.Character.isLetterOrDigit(char)" proba="0.0273972602739726"/><transition target="s8" action="java.lang.Character.isSpaceChar(char)" proba="0.0684931506849315"/><transition target="s9" action="java.lang.Character.isUpperCase(char)" proba="0.0136986301369863"/><transition target="s11" action="java.lang.Character.forDigit(int,int)" proba="0.0136986301369863"/><transition target="s10" action="java.lang.Character.toChars(int)" proba="0.0136986301369863"/><transition target="s13" action="java.lang.Character.toLowerCase(char)" proba="0.0410958904109589"/><transition target="s12" action="java.lang.Character.toUpperCase(char)" proba="0.0547945205479452"/><transition target="s15" action="java.lang.Character.toString(char)" proba="0.0136986301369863"/><transition target="s14" action="java.lang.Character.isJavaIdentifierPart(int)" proba="0.0136986301369863"/><transition target="s1" action="java.lang.Character.valueOf(char)" proba="0.3424657534246575"/><transition target="s2" action="java.lang.Character.isWhitespace(char)" proba="0.2191780821917808"/></state><state id="s1"><transition target="sX" action="epsilon" proba="0.3125"/><transition target="s1" action="java.lang.Character.valueOf(char)" proba="0.6875"/></state><state id="s2"><transition target="sX" action="epsilon" proba="0.8421052631578947"/><transition target="s8" action="java.lang.Character.isSpaceChar(char)" proba="0.05263157894736842"/><transition target="s2" action="java.lang.Character.isWhitespace(char)" proba="0.10526315789473684"/></state></states></ts>