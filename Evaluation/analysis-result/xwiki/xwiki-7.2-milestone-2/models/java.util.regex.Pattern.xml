<?xml version='1.0' encoding='UTF-8'?><ts><start>s0</start><states><state id="s3"><transition target="sX" action="epsilon" proba="1.0"/></state><state id="s4"><transition target="sX" action="epsilon" proba="0.9565217391304348"/><transition target="s1" action="java.util.regex.Pattern.matcher(java.lang.CharSequence)" proba="0.043478260869565216"/></state><state id="s5"><transition target="sX" action="epsilon" proba="1.0"/></state><state id="s6"><transition target="s6" action="java.util.regex.Pattern.compile(java.lang.String,int)" proba="0.15384615384615385"/><transition target="sX" action="epsilon" proba="0.7692307692307693"/><transition target="s1" action="java.util.regex.Pattern.matcher(java.lang.CharSequence)" proba="0.07692307692307693"/></state><state id="s7"><transition target="sX" action="epsilon" proba="1.0"/></state><state id="sX"><transition target="s0" action="epsilon" proba="1.0"/></state><state id="s8"><transition target="s8" action="java.util.regex.Pattern.quote(java.lang.String)" proba="0.2222222222222222"/><transition target="sX" action="epsilon" proba="0.4444444444444444"/><transition target="s2" action="java.util.regex.Pattern.compile(java.lang.String)" proba="0.3333333333333333"/></state><state id="s9"><transition target="s11" action="java.util.regex.Pattern.toCharArray()" proba="0.038461538461538464"/><transition target="sX" action="epsilon" proba="0.9230769230769231"/><transition target="s1" action="java.util.regex.Pattern.matcher(java.lang.CharSequence)" proba="0.038461538461538464"/></state><state id="s11"><transition target="sX" action="epsilon" proba="1.0"/></state><state id="s10"><transition target="sX" action="epsilon" proba="1.0"/></state><state id="s12"><transition target="sX" action="epsilon" proba="1.0"/></state><state id="s0"><transition target="s3" action="java.util.regex.Pattern.pattern()" proba="0.01020408163265306"/><transition target="s5" action="java.util.regex.Pattern.split(java.lang.CharSequence)" proba="0.01020408163265306"/><transition target="s6" action="java.util.regex.Pattern.compile(java.lang.String,int)" proba="0.05612244897959184"/><transition target="s8" action="java.util.regex.Pattern.quote(java.lang.String)" proba="0.03571428571428571"/><transition target="s1" action="java.util.regex.Pattern.matcher(java.lang.CharSequence)" proba="0.7448979591836735"/><transition target="s2" action="java.util.regex.Pattern.compile(java.lang.String)" proba="0.14285714285714285"/></state><state id="s1"><transition target="s4" action="java.util.regex.Pattern.matches()" proba="0.14375"/><transition target="s10" action="java.util.regex.Pattern.find()" proba="0.0125"/><transition target="s7" action="java.util.regex.Pattern.replaceFirst(java.lang.String)" proba="0.025"/><transition target="sX" action="epsilon" proba="0.59375"/><transition target="s12" action="java.util.regex.Pattern.toString()" proba="0.00625"/><transition target="s9" action="java.util.regex.Pattern.replaceAll(java.lang.String)" proba="0.1625"/><transition target="s1" action="java.util.regex.Pattern.matcher(java.lang.CharSequence)" proba="0.05625"/></state><state id="s2"><transition target="sX" action="epsilon" proba="0.8787878787878788"/><transition target="s1" action="java.util.regex.Pattern.matcher(java.lang.CharSequence)" proba="0.06060606060606061"/><transition target="s2" action="java.util.regex.Pattern.compile(java.lang.String)" proba="0.06060606060606061"/></state></states></ts>