<?xml version="1.0"?><ts><start>s0</start><states><state id="s3"><transition target="s3" action="org.mockito.asm.Label.&lt;init&gt;()" proba="0.3333333333333333"></transition><transition target="s4" action="org.mockito.asm.Label.resolve(org.mockito.asm.MethodWriter,int,byte[])" proba="0.3333333333333333"></transition><transition target="sX" action="epsilon" proba="0.3333333333333333"></transition></state><state id="s4"><transition target="sX" action="epsilon" proba="1.0"></transition></state><state id="s5"><transition target="sX" action="epsilon" proba="1.0"></transition></state><state id="sX"><transition target="s0" action="epsilon" proba="1.0"></transition></state><state id="s0"><transition target="s3" action="org.mockito.asm.Label.&lt;init&gt;()" proba="0.125"></transition><transition target="s4" action="org.mockito.asm.Label.resolve(org.mockito.asm.MethodWriter,int,byte[])" proba="0.0625"></transition><transition target="s5" action="org.mockito.asm.Label.visitSubroutine(org.mockito.asm.Label,long,int)" proba="0.125"></transition><transition target="s1" action="org.mockito.asm.Label.getFirst()" proba="0.4375"></transition><transition target="s2" action="org.mockito.asm.Label.put(org.mockito.asm.MethodWriter,org.mockito.asm.ByteVector,int,boolean)" proba="0.25"></transition></state><state id="s1"><transition target="sX" action="epsilon" proba="0.8571428571428571"></transition><transition target="s2" action="org.mockito.asm.Label.put(org.mockito.asm.MethodWriter,org.mockito.asm.ByteVector,int,boolean)" proba="0.14285714285714285"></transition></state><state id="s2"><transition target="sX" action="epsilon" proba="0.8333333333333334"></transition><transition target="s2" action="org.mockito.asm.Label.put(org.mockito.asm.MethodWriter,org.mockito.asm.ByteVector,int,boolean)" proba="0.16666666666666666"></transition></state></states></ts>