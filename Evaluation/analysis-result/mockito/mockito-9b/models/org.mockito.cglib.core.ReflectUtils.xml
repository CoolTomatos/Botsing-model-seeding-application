<?xml version="1.0"?><ts><start>s0</start><states><state id="sX"><transition target="s0" action="epsilon" proba="1.0"></transition></state><state id="s11"><transition target="s11" action="org.mockito.cglib.core.ReflectUtils.getBeanGetters(java.lang.Class)" proba="0.3333333333333333"></transition><transition target="s7" action="org.mockito.cglib.core.ReflectUtils.getMethodInfo(java.lang.reflect.Member)" proba="0.3333333333333333"></transition><transition target="s12" action="org.mockito.cglib.core.ReflectUtils.getBeanSetters(java.lang.Class)" proba="0.3333333333333333"></transition></state><state id="s10"><transition target="sX" action="epsilon" proba="1.0"></transition></state><state id="s13"><transition target="s13" action="org.mockito.cglib.core.ReflectUtils.getClasses(java.lang.Object[])" proba="0.3333333333333333"></transition><transition target="s8" action="org.mockito.cglib.core.ReflectUtils.findPackageProtected(java.lang.Class[])" proba="0.3333333333333333"></transition><transition target="sX" action="epsilon" proba="0.3333333333333333"></transition></state><state id="s12"><transition target="sX" action="epsilon" proba="1.0"></transition></state><state id="s15"><transition target="sX" action="epsilon" proba="0.3333333333333333"></transition><transition target="s16" action="org.mockito.cglib.core.ReflectUtils.getPropertyMethods(java.beans.PropertyDescriptor[],boolean,boolean)" proba="0.6666666666666666"></transition></state><state id="s14"><transition target="sX" action="epsilon" proba="0.6666666666666666"></transition><transition target="s18" action="org.mockito.cglib.core.ReflectUtils.getSignature(java.lang.reflect.Member)" proba="0.3333333333333333"></transition></state><state id="s17"><transition target="s18" action="org.mockito.cglib.core.ReflectUtils.getSignature(java.lang.reflect.Member)" proba="1.0"></transition></state><state id="s16"><transition target="s7" action="org.mockito.cglib.core.ReflectUtils.getMethodInfo(java.lang.reflect.Member)" proba="0.3333333333333333"></transition><transition target="sX" action="epsilon" proba="0.3333333333333333"></transition><transition target="s16" action="org.mockito.cglib.core.ReflectUtils.getPropertyMethods(java.beans.PropertyDescriptor[],boolean,boolean)" proba="0.3333333333333333"></transition></state><state id="s19"><transition target="sX" action="epsilon" proba="1.0"></transition></state><state id="s18"><transition target="sX" action="epsilon" proba="0.42857142857142855"></transition><transition target="s23" action="org.mockito.cglib.core.ReflectUtils.toString()" proba="0.2857142857142857"></transition><transition target="s14" action="org.mockito.cglib.core.ReflectUtils.getExceptionTypes(java.lang.reflect.Member)" proba="0.2857142857142857"></transition></state><state id="s0"><transition target="s3" action="org.mockito.cglib.core.ReflectUtils.getNames(java.lang.Class[])" proba="0.038461538461538464"></transition><transition target="s4" action="org.mockito.cglib.core.ReflectUtils.newInstance(java.lang.Class,java.lang.Class[],java.lang.Object[])" proba="0.038461538461538464"></transition><transition target="s5" action="org.mockito.cglib.core.ReflectUtils.addAllInterfaces(java.lang.Class,java.util.List)" proba="0.02564102564102564"></transition><transition target="s6" action="org.mockito.cglib.core.ReflectUtils.findInterfaceMethod(java.lang.Class)" proba="0.02564102564102564"></transition><transition target="s7" action="org.mockito.cglib.core.ReflectUtils.getMethodInfo(java.lang.reflect.Member)" proba="0.10256410256410256"></transition><transition target="s8" action="org.mockito.cglib.core.ReflectUtils.findPackageProtected(java.lang.Class[])" proba="0.1794871794871795"></transition><transition target="s9" action="org.mockito.cglib.core.ReflectUtils.findDeclaredMethod(java.lang.Class,java.lang.String,java.lang.Class[])" proba="0.01282051282051282"></transition><transition target="s20" action="org.mockito.cglib.core.ReflectUtils.access$002(java.lang.reflect.Method)" proba="0.01282051282051282"></transition><transition target="s11" action="org.mockito.cglib.core.ReflectUtils.getBeanGetters(java.lang.Class)" proba="0.02564102564102564"></transition><transition target="s10" action="org.mockito.cglib.core.ReflectUtils.newInstance(java.lang.Class)" proba="0.15384615384615385"></transition><transition target="s13" action="org.mockito.cglib.core.ReflectUtils.getClasses(java.lang.Object[])" proba="0.02564102564102564"></transition><transition target="s24" action="org.mockito.cglib.core.ReflectUtils.getMethodInfo(java.lang.reflect.Member,int)" proba="0.01282051282051282"></transition><transition target="s15" action="org.mockito.cglib.core.ReflectUtils.getBeanProperties(java.lang.Class)" proba="0.038461538461538464"></transition><transition target="s14" action="org.mockito.cglib.core.ReflectUtils.getExceptionTypes(java.lang.reflect.Member)" proba="0.01282051282051282"></transition><transition target="s25" action="org.mockito.cglib.core.ReflectUtils.getClassInfo(java.lang.Class)" proba="0.01282051282051282"></transition><transition target="s17" action="org.mockito.cglib.core.ReflectUtils.findNewInstance(java.lang.Class)" proba="0.02564102564102564"></transition><transition target="s19" action="org.mockito.cglib.core.ReflectUtils.defineClass(java.lang.String,byte[],java.lang.ClassLoader)" proba="0.01282051282051282"></transition><transition target="s18" action="org.mockito.cglib.core.ReflectUtils.getSignature(java.lang.reflect.Member)" proba="0.05128205128205128"></transition><transition target="s1" action="org.mockito.cglib.core.ReflectUtils.&lt;init&gt;()" proba="0.16666666666666666"></transition><transition target="s2" action="org.mockito.cglib.core.ReflectUtils.addAllMethods(java.lang.Class,java.util.List)" proba="0.02564102564102564"></transition></state><state id="s1"><transition target="s2" action="org.mockito.cglib.core.ReflectUtils.addAllMethods(java.lang.Class,java.util.List)" proba="1.0"></transition></state><state id="s2"><transition target="s3" action="org.mockito.cglib.core.ReflectUtils.getNames(java.lang.Class[])" proba="0.4666666666666667"></transition><transition target="sX" action="epsilon" proba="0.5"></transition><transition target="s2" action="org.mockito.cglib.core.ReflectUtils.addAllMethods(java.lang.Class,java.util.List)" proba="0.03333333333333333"></transition></state><state id="s3"><transition target="s3" action="org.mockito.cglib.core.ReflectUtils.getNames(java.lang.Class[])" proba="0.7009345794392523"></transition><transition target="sX" action="epsilon" proba="0.16822429906542055"></transition><transition target="s1" action="org.mockito.cglib.core.ReflectUtils.&lt;init&gt;()" proba="0.1308411214953271"></transition></state><state id="s4"><transition target="s10" action="org.mockito.cglib.core.ReflectUtils.newInstance(java.lang.Class)" proba="0.3333333333333333"></transition><transition target="sX" action="epsilon" proba="0.6666666666666666"></transition></state><state id="s5"><transition target="sX" action="epsilon" proba="1.0"></transition></state><state id="s6"><transition target="s7" action="org.mockito.cglib.core.ReflectUtils.getMethodInfo(java.lang.reflect.Member)" proba="1.0"></transition></state><state id="s7"><transition target="s7" action="org.mockito.cglib.core.ReflectUtils.getMethodInfo(java.lang.reflect.Member)" proba="0.29411764705882354"></transition><transition target="sX" action="epsilon" proba="0.7058823529411765"></transition></state><state id="s8"><transition target="s3" action="org.mockito.cglib.core.ReflectUtils.getNames(java.lang.Class[])" proba="1.0"></transition></state><state id="s9"><transition target="sX" action="epsilon" proba="0.5"></transition><transition target="s9" action="org.mockito.cglib.core.ReflectUtils.findDeclaredMethod(java.lang.Class,java.lang.String,java.lang.Class[])" proba="0.5"></transition></state><state id="s20"><transition target="s21" action="org.mockito.cglib.core.ReflectUtils.access$000()" proba="1.0"></transition></state><state id="s22"><transition target="sX" action="epsilon" proba="1.0"></transition></state><state id="s21"><transition target="s22" action="org.mockito.cglib.core.ReflectUtils.setAccessible(boolean)" proba="1.0"></transition></state><state id="s24"><transition target="sX" action="epsilon" proba="1.0"></transition></state><state id="s23"><transition target="sX" action="epsilon" proba="1.0"></transition></state><state id="s25"><transition target="sX" action="epsilon" proba="1.0"></transition></state></states></ts>